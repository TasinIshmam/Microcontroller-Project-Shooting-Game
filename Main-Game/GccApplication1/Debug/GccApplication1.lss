
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  000015f6  0000168a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001e5  008000be  008000be  000016e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046fb  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a24  00000000  00000000  00005f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000128b  00000000  00000000  0000696b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00007bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018d6  00000000  00000000  00007ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f0a  00000000  00000000  000097ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000b6b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	ce 08       	sbc	r12, r14

00000056 <__ctors_end>:
      56:	11 24       	eor	r1, r1
      58:	1f be       	out	0x3f, r1	; 63
      5a:	cf e5       	ldi	r28, 0x5F	; 95
      5c:	d8 e0       	ldi	r29, 0x08	; 8
      5e:	de bf       	out	0x3e, r29	; 62
      60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
      62:	10 e0       	ldi	r17, 0x00	; 0
      64:	a0 e6       	ldi	r26, 0x60	; 96
      66:	b0 e0       	ldi	r27, 0x00	; 0
      68:	e6 ef       	ldi	r30, 0xF6	; 246
      6a:	f5 e1       	ldi	r31, 0x15	; 21
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
      6e:	05 90       	lpm	r0, Z+
      70:	0d 92       	st	X+, r0
      72:	ae 3b       	cpi	r26, 0xBE	; 190
      74:	b1 07       	cpc	r27, r17
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
      78:	22 e0       	ldi	r18, 0x02	; 2
      7a:	ae eb       	ldi	r26, 0xBE	; 190
      7c:	b0 e0       	ldi	r27, 0x00	; 0
      7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
      80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
      82:	a3 3a       	cpi	r26, 0xA3	; 163
      84:	b2 07       	cpc	r27, r18
      86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
      88:	10 e0       	ldi	r17, 0x00	; 0
      8a:	cb e2       	ldi	r28, 0x2B	; 43
      8c:	d0 e0       	ldi	r29, 0x00	; 0
      8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
      90:	21 97       	sbiw	r28, 0x01	; 1
      92:	fe 01       	movw	r30, r28
      94:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__tablejump2__>
      98:	ca 32       	cpi	r28, 0x2A	; 42
      9a:	d1 07       	cpc	r29, r17
      9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
      9e:	0e 94 c5 08 	call	0x118a	; 0x118a <main>
      a2:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <_exit>

000000a6 <__bad_interrupt>:
      a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z27voidLedPrintUsingOneDecodercc>:
}

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
	Lcd4_Cmd(0x08);
      aa:	62 95       	swap	r22
      ac:	60 7f       	andi	r22, 0xF0	; 240
      ae:	21 e0       	ldi	r18, 0x01	; 1
      b0:	30 e0       	ldi	r19, 0x00	; 0
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <_Z27voidLedPrintUsingOneDecodercc+0xe>
      b4:	22 0f       	add	r18, r18
      b6:	33 1f       	adc	r19, r19
      b8:	8a 95       	dec	r24
      ba:	e2 f7       	brpl	.-8      	; 0xb4 <_Z27voidLedPrintUsingOneDecodercc+0xa>
      bc:	20 95       	com	r18
      be:	28 bb       	out	0x18, r18	; 24
      c0:	6b bb       	out	0x1b, r22	; 27
      c2:	08 95       	ret

000000c4 <_Z9pinChangeii>:
      c4:	67 2b       	or	r22, r23
      c6:	09 f0       	breq	.+2      	; 0xca <_Z9pinChangeii+0x6>
      c8:	9f c0       	rjmp	.+318    	; 0x208 <_Z9pinChangeii+0x144>
      ca:	00 97       	sbiw	r24, 0x00	; 0
      cc:	11 f4       	brne	.+4      	; 0xd2 <_Z9pinChangeii+0xe>
      ce:	d8 98       	cbi	0x1b, 0	; 27
      d0:	08 95       	ret
      d2:	81 30       	cpi	r24, 0x01	; 1
      d4:	91 05       	cpc	r25, r1
      d6:	11 f4       	brne	.+4      	; 0xdc <_Z9pinChangeii+0x18>
      d8:	d9 98       	cbi	0x1b, 1	; 27
      da:	08 95       	ret
      dc:	82 30       	cpi	r24, 0x02	; 2
      de:	91 05       	cpc	r25, r1
      e0:	11 f4       	brne	.+4      	; 0xe6 <_Z9pinChangeii+0x22>
      e2:	da 98       	cbi	0x1b, 2	; 27
      e4:	08 95       	ret
      e6:	83 30       	cpi	r24, 0x03	; 3
      e8:	91 05       	cpc	r25, r1
      ea:	11 f4       	brne	.+4      	; 0xf0 <_Z9pinChangeii+0x2c>
      ec:	db 98       	cbi	0x1b, 3	; 27
      ee:	08 95       	ret
      f0:	84 30       	cpi	r24, 0x04	; 4
      f2:	91 05       	cpc	r25, r1
      f4:	11 f4       	brne	.+4      	; 0xfa <_Z9pinChangeii+0x36>
      f6:	dc 98       	cbi	0x1b, 4	; 27
      f8:	08 95       	ret
      fa:	85 30       	cpi	r24, 0x05	; 5
      fc:	91 05       	cpc	r25, r1
      fe:	11 f4       	brne	.+4      	; 0x104 <_Z9pinChangeii+0x40>
     100:	dd 98       	cbi	0x1b, 5	; 27
     102:	08 95       	ret
     104:	86 30       	cpi	r24, 0x06	; 6
     106:	91 05       	cpc	r25, r1
     108:	11 f4       	brne	.+4      	; 0x10e <_Z9pinChangeii+0x4a>
     10a:	de 98       	cbi	0x1b, 6	; 27
     10c:	08 95       	ret
     10e:	87 30       	cpi	r24, 0x07	; 7
     110:	91 05       	cpc	r25, r1
     112:	11 f4       	brne	.+4      	; 0x118 <_Z9pinChangeii+0x54>
     114:	df 98       	cbi	0x1b, 7	; 27
     116:	08 95       	ret
     118:	8a 30       	cpi	r24, 0x0A	; 10
     11a:	91 05       	cpc	r25, r1
     11c:	11 f4       	brne	.+4      	; 0x122 <_Z9pinChangeii+0x5e>
     11e:	c0 98       	cbi	0x18, 0	; 24
     120:	08 95       	ret
     122:	8b 30       	cpi	r24, 0x0B	; 11
     124:	91 05       	cpc	r25, r1
     126:	11 f4       	brne	.+4      	; 0x12c <_Z9pinChangeii+0x68>
     128:	c1 98       	cbi	0x18, 1	; 24
     12a:	08 95       	ret
     12c:	8c 30       	cpi	r24, 0x0C	; 12
     12e:	91 05       	cpc	r25, r1
     130:	11 f4       	brne	.+4      	; 0x136 <_Z9pinChangeii+0x72>
     132:	c2 98       	cbi	0x18, 2	; 24
     134:	08 95       	ret
     136:	8d 30       	cpi	r24, 0x0D	; 13
     138:	91 05       	cpc	r25, r1
     13a:	11 f4       	brne	.+4      	; 0x140 <_Z9pinChangeii+0x7c>
     13c:	c3 98       	cbi	0x18, 3	; 24
     13e:	08 95       	ret
     140:	8e 30       	cpi	r24, 0x0E	; 14
     142:	91 05       	cpc	r25, r1
     144:	11 f4       	brne	.+4      	; 0x14a <_Z9pinChangeii+0x86>
     146:	c4 98       	cbi	0x18, 4	; 24
     148:	08 95       	ret
     14a:	8f 30       	cpi	r24, 0x0F	; 15
     14c:	91 05       	cpc	r25, r1
     14e:	11 f4       	brne	.+4      	; 0x154 <_Z9pinChangeii+0x90>
     150:	c5 98       	cbi	0x18, 5	; 24
     152:	08 95       	ret
     154:	80 31       	cpi	r24, 0x10	; 16
     156:	91 05       	cpc	r25, r1
     158:	11 f4       	brne	.+4      	; 0x15e <_Z9pinChangeii+0x9a>
     15a:	c6 98       	cbi	0x18, 6	; 24
     15c:	08 95       	ret
     15e:	81 31       	cpi	r24, 0x11	; 17
     160:	91 05       	cpc	r25, r1
     162:	11 f4       	brne	.+4      	; 0x168 <_Z9pinChangeii+0xa4>
     164:	c7 98       	cbi	0x18, 7	; 24
     166:	08 95       	ret
     168:	84 31       	cpi	r24, 0x14	; 20
     16a:	91 05       	cpc	r25, r1
     16c:	11 f4       	brne	.+4      	; 0x172 <_Z9pinChangeii+0xae>
     16e:	a8 98       	cbi	0x15, 0	; 21
     170:	08 95       	ret
     172:	85 31       	cpi	r24, 0x15	; 21
     174:	91 05       	cpc	r25, r1
     176:	11 f4       	brne	.+4      	; 0x17c <_Z9pinChangeii+0xb8>
     178:	a9 98       	cbi	0x15, 1	; 21
     17a:	08 95       	ret
     17c:	86 31       	cpi	r24, 0x16	; 22
     17e:	91 05       	cpc	r25, r1
     180:	11 f4       	brne	.+4      	; 0x186 <_Z9pinChangeii+0xc2>
     182:	aa 98       	cbi	0x15, 2	; 21
     184:	08 95       	ret
     186:	87 31       	cpi	r24, 0x17	; 23
     188:	91 05       	cpc	r25, r1
     18a:	11 f4       	brne	.+4      	; 0x190 <_Z9pinChangeii+0xcc>
     18c:	ab 98       	cbi	0x15, 3	; 21
     18e:	08 95       	ret
     190:	88 31       	cpi	r24, 0x18	; 24
     192:	91 05       	cpc	r25, r1
     194:	11 f4       	brne	.+4      	; 0x19a <_Z9pinChangeii+0xd6>
     196:	ac 98       	cbi	0x15, 4	; 21
     198:	08 95       	ret
     19a:	89 31       	cpi	r24, 0x19	; 25
     19c:	91 05       	cpc	r25, r1
     19e:	11 f4       	brne	.+4      	; 0x1a4 <_Z9pinChangeii+0xe0>
     1a0:	ad 98       	cbi	0x15, 5	; 21
     1a2:	08 95       	ret
     1a4:	8a 31       	cpi	r24, 0x1A	; 26
     1a6:	91 05       	cpc	r25, r1
     1a8:	11 f4       	brne	.+4      	; 0x1ae <_Z9pinChangeii+0xea>
     1aa:	ae 98       	cbi	0x15, 6	; 21
     1ac:	08 95       	ret
     1ae:	8b 31       	cpi	r24, 0x1B	; 27
     1b0:	91 05       	cpc	r25, r1
     1b2:	11 f4       	brne	.+4      	; 0x1b8 <_Z9pinChangeii+0xf4>
     1b4:	af 98       	cbi	0x15, 7	; 21
     1b6:	08 95       	ret
     1b8:	8e 31       	cpi	r24, 0x1E	; 30
     1ba:	91 05       	cpc	r25, r1
     1bc:	11 f4       	brne	.+4      	; 0x1c2 <_Z9pinChangeii+0xfe>
     1be:	90 98       	cbi	0x12, 0	; 18
     1c0:	08 95       	ret
     1c2:	8f 31       	cpi	r24, 0x1F	; 31
     1c4:	91 05       	cpc	r25, r1
     1c6:	11 f4       	brne	.+4      	; 0x1cc <_Z9pinChangeii+0x108>
     1c8:	91 98       	cbi	0x12, 1	; 18
     1ca:	08 95       	ret
     1cc:	80 32       	cpi	r24, 0x20	; 32
     1ce:	91 05       	cpc	r25, r1
     1d0:	11 f4       	brne	.+4      	; 0x1d6 <_Z9pinChangeii+0x112>
     1d2:	92 98       	cbi	0x12, 2	; 18
     1d4:	08 95       	ret
     1d6:	81 32       	cpi	r24, 0x21	; 33
     1d8:	91 05       	cpc	r25, r1
     1da:	11 f4       	brne	.+4      	; 0x1e0 <_Z9pinChangeii+0x11c>
     1dc:	93 98       	cbi	0x12, 3	; 18
     1de:	08 95       	ret
     1e0:	82 32       	cpi	r24, 0x22	; 34
     1e2:	91 05       	cpc	r25, r1
     1e4:	11 f4       	brne	.+4      	; 0x1ea <_Z9pinChangeii+0x126>
     1e6:	94 98       	cbi	0x12, 4	; 18
     1e8:	08 95       	ret
     1ea:	83 32       	cpi	r24, 0x23	; 35
     1ec:	91 05       	cpc	r25, r1
     1ee:	11 f4       	brne	.+4      	; 0x1f4 <_Z9pinChangeii+0x130>
     1f0:	95 98       	cbi	0x12, 5	; 18
     1f2:	08 95       	ret
     1f4:	84 32       	cpi	r24, 0x24	; 36
     1f6:	91 05       	cpc	r25, r1
     1f8:	11 f4       	brne	.+4      	; 0x1fe <_Z9pinChangeii+0x13a>
     1fa:	96 98       	cbi	0x12, 6	; 18
     1fc:	08 95       	ret
     1fe:	85 97       	sbiw	r24, 0x25	; 37
     200:	09 f0       	breq	.+2      	; 0x204 <_Z9pinChangeii+0x140>
     202:	9f c0       	rjmp	.+318    	; 0x342 <_Z9pinChangeii+0x27e>
     204:	97 98       	cbi	0x12, 7	; 18
     206:	08 95       	ret
     208:	00 97       	sbiw	r24, 0x00	; 0
     20a:	11 f4       	brne	.+4      	; 0x210 <_Z9pinChangeii+0x14c>
     20c:	d8 9a       	sbi	0x1b, 0	; 27
     20e:	08 95       	ret
     210:	81 30       	cpi	r24, 0x01	; 1
     212:	91 05       	cpc	r25, r1
     214:	11 f4       	brne	.+4      	; 0x21a <_Z9pinChangeii+0x156>
     216:	d9 9a       	sbi	0x1b, 1	; 27
     218:	08 95       	ret
     21a:	82 30       	cpi	r24, 0x02	; 2
     21c:	91 05       	cpc	r25, r1
     21e:	11 f4       	brne	.+4      	; 0x224 <_Z9pinChangeii+0x160>
     220:	da 9a       	sbi	0x1b, 2	; 27
     222:	08 95       	ret
     224:	83 30       	cpi	r24, 0x03	; 3
     226:	91 05       	cpc	r25, r1
     228:	11 f4       	brne	.+4      	; 0x22e <_Z9pinChangeii+0x16a>
     22a:	db 9a       	sbi	0x1b, 3	; 27
     22c:	08 95       	ret
     22e:	84 30       	cpi	r24, 0x04	; 4
     230:	91 05       	cpc	r25, r1
     232:	11 f4       	brne	.+4      	; 0x238 <_Z9pinChangeii+0x174>
     234:	dc 9a       	sbi	0x1b, 4	; 27
     236:	08 95       	ret
     238:	85 30       	cpi	r24, 0x05	; 5
     23a:	91 05       	cpc	r25, r1
     23c:	11 f4       	brne	.+4      	; 0x242 <_Z9pinChangeii+0x17e>
     23e:	dd 9a       	sbi	0x1b, 5	; 27
     240:	08 95       	ret
     242:	86 30       	cpi	r24, 0x06	; 6
     244:	91 05       	cpc	r25, r1
     246:	11 f4       	brne	.+4      	; 0x24c <_Z9pinChangeii+0x188>
     248:	de 9a       	sbi	0x1b, 6	; 27
     24a:	08 95       	ret
     24c:	87 30       	cpi	r24, 0x07	; 7
     24e:	91 05       	cpc	r25, r1
     250:	11 f4       	brne	.+4      	; 0x256 <_Z9pinChangeii+0x192>
     252:	df 9a       	sbi	0x1b, 7	; 27
     254:	08 95       	ret
     256:	8a 30       	cpi	r24, 0x0A	; 10
     258:	91 05       	cpc	r25, r1
     25a:	11 f4       	brne	.+4      	; 0x260 <_Z9pinChangeii+0x19c>
     25c:	c0 9a       	sbi	0x18, 0	; 24
     25e:	08 95       	ret
     260:	8b 30       	cpi	r24, 0x0B	; 11
     262:	91 05       	cpc	r25, r1
     264:	11 f4       	brne	.+4      	; 0x26a <_Z9pinChangeii+0x1a6>
     266:	c1 9a       	sbi	0x18, 1	; 24
     268:	08 95       	ret
     26a:	8c 30       	cpi	r24, 0x0C	; 12
     26c:	91 05       	cpc	r25, r1
     26e:	11 f4       	brne	.+4      	; 0x274 <_Z9pinChangeii+0x1b0>
     270:	c2 9a       	sbi	0x18, 2	; 24
     272:	08 95       	ret
     274:	8d 30       	cpi	r24, 0x0D	; 13
     276:	91 05       	cpc	r25, r1
     278:	11 f4       	brne	.+4      	; 0x27e <_Z9pinChangeii+0x1ba>
     27a:	c3 9a       	sbi	0x18, 3	; 24
     27c:	08 95       	ret
     27e:	8e 30       	cpi	r24, 0x0E	; 14
     280:	91 05       	cpc	r25, r1
     282:	11 f4       	brne	.+4      	; 0x288 <_Z9pinChangeii+0x1c4>
     284:	c4 9a       	sbi	0x18, 4	; 24
     286:	08 95       	ret
     288:	8f 30       	cpi	r24, 0x0F	; 15
     28a:	91 05       	cpc	r25, r1
     28c:	11 f4       	brne	.+4      	; 0x292 <_Z9pinChangeii+0x1ce>
     28e:	c5 9a       	sbi	0x18, 5	; 24
     290:	08 95       	ret
     292:	80 31       	cpi	r24, 0x10	; 16
     294:	91 05       	cpc	r25, r1
     296:	11 f4       	brne	.+4      	; 0x29c <_Z9pinChangeii+0x1d8>
     298:	c6 9a       	sbi	0x18, 6	; 24
     29a:	08 95       	ret
     29c:	81 31       	cpi	r24, 0x11	; 17
     29e:	91 05       	cpc	r25, r1
     2a0:	11 f4       	brne	.+4      	; 0x2a6 <_Z9pinChangeii+0x1e2>
     2a2:	c7 9a       	sbi	0x18, 7	; 24
     2a4:	08 95       	ret
     2a6:	84 31       	cpi	r24, 0x14	; 20
     2a8:	91 05       	cpc	r25, r1
     2aa:	11 f4       	brne	.+4      	; 0x2b0 <_Z9pinChangeii+0x1ec>
     2ac:	a8 9a       	sbi	0x15, 0	; 21
     2ae:	08 95       	ret
     2b0:	85 31       	cpi	r24, 0x15	; 21
     2b2:	91 05       	cpc	r25, r1
     2b4:	11 f4       	brne	.+4      	; 0x2ba <_Z9pinChangeii+0x1f6>
     2b6:	a9 9a       	sbi	0x15, 1	; 21
     2b8:	08 95       	ret
     2ba:	86 31       	cpi	r24, 0x16	; 22
     2bc:	91 05       	cpc	r25, r1
     2be:	11 f4       	brne	.+4      	; 0x2c4 <_Z9pinChangeii+0x200>
     2c0:	aa 9a       	sbi	0x15, 2	; 21
     2c2:	08 95       	ret
     2c4:	87 31       	cpi	r24, 0x17	; 23
     2c6:	91 05       	cpc	r25, r1
     2c8:	11 f4       	brne	.+4      	; 0x2ce <_Z9pinChangeii+0x20a>
     2ca:	ab 9a       	sbi	0x15, 3	; 21
     2cc:	08 95       	ret
     2ce:	88 31       	cpi	r24, 0x18	; 24
     2d0:	91 05       	cpc	r25, r1
     2d2:	11 f4       	brne	.+4      	; 0x2d8 <_Z9pinChangeii+0x214>
     2d4:	ac 9a       	sbi	0x15, 4	; 21
     2d6:	08 95       	ret
     2d8:	89 31       	cpi	r24, 0x19	; 25
     2da:	91 05       	cpc	r25, r1
     2dc:	11 f4       	brne	.+4      	; 0x2e2 <_Z9pinChangeii+0x21e>
     2de:	ad 9a       	sbi	0x15, 5	; 21
     2e0:	08 95       	ret
     2e2:	8a 31       	cpi	r24, 0x1A	; 26
     2e4:	91 05       	cpc	r25, r1
     2e6:	11 f4       	brne	.+4      	; 0x2ec <_Z9pinChangeii+0x228>
     2e8:	ae 9a       	sbi	0x15, 6	; 21
     2ea:	08 95       	ret
     2ec:	8b 31       	cpi	r24, 0x1B	; 27
     2ee:	91 05       	cpc	r25, r1
     2f0:	11 f4       	brne	.+4      	; 0x2f6 <_Z9pinChangeii+0x232>
     2f2:	af 9a       	sbi	0x15, 7	; 21
     2f4:	08 95       	ret
     2f6:	8e 31       	cpi	r24, 0x1E	; 30
     2f8:	91 05       	cpc	r25, r1
     2fa:	11 f4       	brne	.+4      	; 0x300 <_Z9pinChangeii+0x23c>
     2fc:	90 9a       	sbi	0x12, 0	; 18
     2fe:	08 95       	ret
     300:	8f 31       	cpi	r24, 0x1F	; 31
     302:	91 05       	cpc	r25, r1
     304:	11 f4       	brne	.+4      	; 0x30a <_Z9pinChangeii+0x246>
     306:	91 9a       	sbi	0x12, 1	; 18
     308:	08 95       	ret
     30a:	80 32       	cpi	r24, 0x20	; 32
     30c:	91 05       	cpc	r25, r1
     30e:	11 f4       	brne	.+4      	; 0x314 <_Z9pinChangeii+0x250>
     310:	92 9a       	sbi	0x12, 2	; 18
     312:	08 95       	ret
     314:	81 32       	cpi	r24, 0x21	; 33
     316:	91 05       	cpc	r25, r1
     318:	11 f4       	brne	.+4      	; 0x31e <_Z9pinChangeii+0x25a>
     31a:	93 9a       	sbi	0x12, 3	; 18
     31c:	08 95       	ret
     31e:	82 32       	cpi	r24, 0x22	; 34
     320:	91 05       	cpc	r25, r1
     322:	11 f4       	brne	.+4      	; 0x328 <_Z9pinChangeii+0x264>
     324:	94 9a       	sbi	0x12, 4	; 18
     326:	08 95       	ret
     328:	83 32       	cpi	r24, 0x23	; 35
     32a:	91 05       	cpc	r25, r1
     32c:	11 f4       	brne	.+4      	; 0x332 <_Z9pinChangeii+0x26e>
     32e:	95 9a       	sbi	0x12, 5	; 18
     330:	08 95       	ret
     332:	84 32       	cpi	r24, 0x24	; 36
     334:	91 05       	cpc	r25, r1
     336:	11 f4       	brne	.+4      	; 0x33c <_Z9pinChangeii+0x278>
     338:	96 9a       	sbi	0x12, 6	; 18
     33a:	08 95       	ret
     33c:	85 97       	sbiw	r24, 0x25	; 37
     33e:	09 f4       	brne	.+2      	; 0x342 <_Z9pinChangeii+0x27e>
     340:	97 9a       	sbi	0x12, 7	; 18
     342:	08 95       	ret

00000344 <_Z9Lcd4_Portc>:
     344:	cf 93       	push	r28
     346:	c8 2f       	mov	r28, r24
     348:	80 ff       	sbrs	r24, 0
     34a:	07 c0       	rjmp	.+14     	; 0x35a <_Z9Lcd4_Portc+0x16>
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	82 e2       	ldi	r24, 0x22	; 34
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z9pinChangeii>
     358:	06 c0       	rjmp	.+12     	; 0x366 <_Z9Lcd4_Portc+0x22>
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	82 e2       	ldi	r24, 0x22	; 34
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z9pinChangeii>
     366:	c1 ff       	sbrs	r28, 1
     368:	07 c0       	rjmp	.+14     	; 0x378 <_Z9Lcd4_Portc+0x34>
     36a:	61 e0       	ldi	r22, 0x01	; 1
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	83 e2       	ldi	r24, 0x23	; 35
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z9pinChangeii>
     376:	06 c0       	rjmp	.+12     	; 0x384 <_Z9Lcd4_Portc+0x40>
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	83 e2       	ldi	r24, 0x23	; 35
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z9pinChangeii>
     384:	c2 ff       	sbrs	r28, 2
     386:	07 c0       	rjmp	.+14     	; 0x396 <_Z9Lcd4_Portc+0x52>
     388:	61 e0       	ldi	r22, 0x01	; 1
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	84 e2       	ldi	r24, 0x24	; 36
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z9pinChangeii>
     394:	06 c0       	rjmp	.+12     	; 0x3a2 <_Z9Lcd4_Portc+0x5e>
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	84 e2       	ldi	r24, 0x24	; 36
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z9pinChangeii>
     3a2:	c3 ff       	sbrs	r28, 3
     3a4:	07 c0       	rjmp	.+14     	; 0x3b4 <_Z9Lcd4_Portc+0x70>
     3a6:	61 e0       	ldi	r22, 0x01	; 1
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	85 e2       	ldi	r24, 0x25	; 37
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z9pinChangeii>
     3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <_Z9Lcd4_Portc+0x7c>
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	85 e2       	ldi	r24, 0x25	; 37
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z9pinChangeii>
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <_Z8Lcd4_Cmdc>:
     3c4:	cf 93       	push	r28
     3c6:	c8 2f       	mov	r28, r24
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	8a e1       	ldi	r24, 0x1A	; 26
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z9pinChangeii>
     3d4:	8c 2f       	mov	r24, r28
     3d6:	0e 94 a2 01 	call	0x344	; 0x344 <_Z9Lcd4_Portc>
     3da:	61 e0       	ldi	r22, 0x01	; 1
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	8b e1       	ldi	r24, 0x1B	; 27
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z9pinChangeii>
     3e6:	89 ef       	ldi	r24, 0xF9	; 249
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <_Z8Lcd4_Cmdc+0x26>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <_Z8Lcd4_Cmdc+0x2c>
     3f0:	00 00       	nop
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	8b e1       	ldi	r24, 0x1B	; 27
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z9pinChangeii>
     3fe:	89 ef       	ldi	r24, 0xF9	; 249
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     408:	00 00       	nop
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <_Z10Lcd4_Clearv>:
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z8Lcd4_Cmdc>
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z8Lcd4_Cmdc>
     41a:	08 95       	ret

0000041c <_Z15Lcd4_Set_Cursorcc>:
     41c:	cf 93       	push	r28
     41e:	c6 2f       	mov	r28, r22
     420:	81 30       	cpi	r24, 0x01	; 1
     422:	59 f4       	brne	.+22     	; 0x43a <_Z15Lcd4_Set_Cursorcc+0x1e>
     424:	80 e8       	ldi	r24, 0x80	; 128
     426:	86 0f       	add	r24, r22
     428:	82 95       	swap	r24
     42a:	8f 70       	andi	r24, 0x0F	; 15
     42c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z8Lcd4_Cmdc>
     430:	8c 2f       	mov	r24, r28
     432:	8f 70       	andi	r24, 0x0F	; 15
     434:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z8Lcd4_Cmdc>
     438:	0c c0       	rjmp	.+24     	; 0x452 <_Z15Lcd4_Set_Cursorcc+0x36>
     43a:	82 30       	cpi	r24, 0x02	; 2
     43c:	51 f4       	brne	.+20     	; 0x452 <_Z15Lcd4_Set_Cursorcc+0x36>
     43e:	80 ec       	ldi	r24, 0xC0	; 192
     440:	86 0f       	add	r24, r22
     442:	82 95       	swap	r24
     444:	8f 70       	andi	r24, 0x0F	; 15
     446:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z8Lcd4_Cmdc>
     44a:	8c 2f       	mov	r24, r28
     44c:	8f 70       	andi	r24, 0x0F	; 15
     44e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z8Lcd4_Cmdc>
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <_Z9Lcd4_Initv>:
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	0e 94 a2 01 	call	0x344	; 0x344 <_Z9Lcd4_Portc>
     45c:	87 e8       	ldi	r24, 0x87	; 135
     45e:	93 e1       	ldi	r25, 0x13	; 19
     460:	01 97       	sbiw	r24, 0x01	; 1
     462:	f1 f7       	brne	.-4      	; 0x460 <_Z9Lcd4_Initv+0xa>
     464:	00 c0       	rjmp	.+0      	; 0x466 <_Z9Lcd4_Initv+0x10>
     466:	00 00       	nop
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z8Lcd4_Cmdc>
     46e:	81 ee       	ldi	r24, 0xE1	; 225
     470:	94 e0       	ldi	r25, 0x04	; 4
     472:	01 97       	sbiw	r24, 0x01	; 1
     474:	f1 f7       	brne	.-4      	; 0x472 <_Z9Lcd4_Initv+0x1c>
     476:	00 c0       	rjmp	.+0      	; 0x478 <_Z9Lcd4_Initv+0x22>
     478:	00 00       	nop
     47a:	83 e0       	ldi	r24, 0x03	; 3
     47c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z8Lcd4_Cmdc>
     480:	8d eb       	ldi	r24, 0xBD	; 189
     482:	9a e0       	ldi	r25, 0x0A	; 10
     484:	01 97       	sbiw	r24, 0x01	; 1
     486:	f1 f7       	brne	.-4      	; 0x484 <_Z9Lcd4_Initv+0x2e>
     488:	00 c0       	rjmp	.+0      	; 0x48a <_Z9Lcd4_Initv+0x34>
     48a:	00 00       	nop
     48c:	83 e0       	ldi	r24, 0x03	; 3
     48e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z8Lcd4_Cmdc>
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z8Lcd4_Cmdc>
     498:	82 e0       	ldi	r24, 0x02	; 2
     49a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z8Lcd4_Cmdc>
     49e:	88 e0       	ldi	r24, 0x08	; 8
     4a0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z8Lcd4_Cmdc>
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z8Lcd4_Cmdc>
     4aa:	8c e0       	ldi	r24, 0x0C	; 12
     4ac:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z8Lcd4_Cmdc>
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z8Lcd4_Cmdc>
     4b6:	86 e0       	ldi	r24, 0x06	; 6
     4b8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z8Lcd4_Cmdc>
     4bc:	08 95       	ret

000004be <_Z15Lcd4_Write_Charc>:
     4be:	cf 93       	push	r28
     4c0:	c8 2f       	mov	r28, r24
     4c2:	61 e0       	ldi	r22, 0x01	; 1
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	8a e1       	ldi	r24, 0x1A	; 26
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z9pinChangeii>
     4ce:	8c 2f       	mov	r24, r28
     4d0:	82 95       	swap	r24
     4d2:	8f 70       	andi	r24, 0x0F	; 15
     4d4:	0e 94 a2 01 	call	0x344	; 0x344 <_Z9Lcd4_Portc>
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	8b e1       	ldi	r24, 0x1B	; 27
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z9pinChangeii>
     4e4:	89 ef       	ldi	r24, 0xF9	; 249
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	01 97       	sbiw	r24, 0x01	; 1
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <_Z15Lcd4_Write_Charc+0x2a>
     4ec:	00 c0       	rjmp	.+0      	; 0x4ee <_Z15Lcd4_Write_Charc+0x30>
     4ee:	00 00       	nop
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	8b e1       	ldi	r24, 0x1B	; 27
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z9pinChangeii>
     4fc:	89 ef       	ldi	r24, 0xF9	; 249
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	f1 f7       	brne	.-4      	; 0x500 <_Z15Lcd4_Write_Charc+0x42>
     504:	00 c0       	rjmp	.+0      	; 0x506 <_Z15Lcd4_Write_Charc+0x48>
     506:	00 00       	nop
     508:	8c 2f       	mov	r24, r28
     50a:	8f 70       	andi	r24, 0x0F	; 15
     50c:	0e 94 a2 01 	call	0x344	; 0x344 <_Z9Lcd4_Portc>
     510:	61 e0       	ldi	r22, 0x01	; 1
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	8b e1       	ldi	r24, 0x1B	; 27
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z9pinChangeii>
     51c:	89 ef       	ldi	r24, 0xF9	; 249
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	f1 f7       	brne	.-4      	; 0x520 <_Z15Lcd4_Write_Charc+0x62>
     524:	00 c0       	rjmp	.+0      	; 0x526 <_Z15Lcd4_Write_Charc+0x68>
     526:	00 00       	nop
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	8b e1       	ldi	r24, 0x1B	; 27
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z9pinChangeii>
     534:	89 ef       	ldi	r24, 0xF9	; 249
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	01 97       	sbiw	r24, 0x01	; 1
     53a:	f1 f7       	brne	.-4      	; 0x538 <_Z15Lcd4_Write_Charc+0x7a>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <_Z15Lcd4_Write_Charc+0x80>
     53e:	00 00       	nop
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <_Z17Lcd4_Write_StringPc>:
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ec 01       	movw	r28, r24
     54a:	88 81       	ld	r24, Y
     54c:	88 23       	and	r24, r24
     54e:	31 f0       	breq	.+12     	; 0x55c <_Z17Lcd4_Write_StringPc+0x18>
     550:	21 96       	adiw	r28, 0x01	; 1
     552:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z15Lcd4_Write_Charc>
     556:	89 91       	ld	r24, Y+
     558:	81 11       	cpse	r24, r1
     55a:	fb cf       	rjmp	.-10     	; 0x552 <_Z17Lcd4_Write_StringPc+0xe>
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <_ZN14GameControllerC1Ev>:
	public:
	int displayBoard[BOARD_HEIGHT][BOARD_WIDTH];



	GameController() {
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	ec 01       	movw	r28, r24
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	88 87       	std	Y+8, r24	; 0x08
    


public:
    Player() {
        playerPosition = Position(4,BOARD_HEIGHT-1);
     574:	24 e0       	ldi	r18, 0x04	; 4
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	3a 87       	std	Y+10, r19	; 0x0a
     57a:	29 87       	std	Y+9, r18	; 0x09
     57c:	2f e0       	ldi	r18, 0x0F	; 15
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	3c 87       	std	Y+12, r19	; 0x0c
     582:	2b 87       	std	Y+11, r18	; 0x0b
        readyToMove = true;
     584:	8d 87       	std	Y+13, r24	; 0x0d
     586:	fe 01       	movw	r30, r28
     588:	3e 96       	adiw	r30, 0x0e	; 14
     58a:	9e 01       	movw	r18, r28
     58c:	27 5d       	subi	r18, 0xD7	; 215
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     590:	11 82       	std	Z+1, r1	; 0x01
     592:	10 82       	st	Z, r1
        y = 0;
     594:	13 82       	std	Z+3, r1	; 0x03
     596:	12 82       	std	Z+2, r1	; 0x02
    unsigned int moveTimerCounter;

public:

    Enemy() {
        alive = true;
     598:	84 83       	std	Z+4, r24	; 0x04
     59a:	39 96       	adiw	r30, 0x09	; 9
     59c:	2e 17       	cp	r18, r30
     59e:	3f 07       	cpc	r19, r31
     5a0:	b9 f7       	brne	.-18     	; 0x590 <_ZN14GameControllerC1Ev+0x2e>
     5a2:	fe 01       	movw	r30, r28
     5a4:	bd 96       	adiw	r30, 0x2d	; 45
     5a6:	ce 01       	movw	r24, r28
     5a8:	8f 51       	subi	r24, 0x1F	; 31
     5aa:	9f 4f       	sbci	r25, 0xFF	; 255
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     5ac:	11 82       	std	Z+1, r1	; 0x01
     5ae:	10 82       	st	Z, r1
        y = 0;
     5b0:	13 82       	std	Z+3, r1	; 0x03
     5b2:	12 82       	std	Z+2, r1	; 0x02

public:

    NewBullet() {

        isActiveOnBoard = false;
     5b4:	14 82       	std	Z+4, r1	; 0x04
        bulletPosition = Position(0, 0);
        moveTimeCounter = 0;
     5b6:	16 82       	std	Z+6, r1	; 0x06
     5b8:	15 82       	std	Z+5, r1	; 0x05
     5ba:	39 96       	adiw	r30, 0x09	; 9
     5bc:	e8 17       	cp	r30, r24
     5be:	f9 07       	cpc	r31, r25
     5c0:	a9 f7       	brne	.-22     	; 0x5ac <_ZN14GameControllerC1Ev+0x4a>
    //    newBullet1 = NewBullet(0, 0,0);
    //    newBullet2 = NewBullet(2000, 0,0);
    //    newBullet3 = NewBullet(4000, 0,0);
    //    newBullet4 = NewBullet(6000, 0,0);

	enemyBulletCollisionCounter = 0;
     5c2:	19 82       	std	Y+1, r1	; 0x01
     5c4:	18 82       	st	Y, r1
	enemyPlayerCollisionCounter = 0;
     5c6:	1b 82       	std	Y+3, r1	; 0x03
     5c8:	1a 82       	std	Y+2, r1	; 0x02
	
	score1 = (char *)malloc(4*sizeof(char));
     5ca:	84 e0       	ldi	r24, 0x04	; 4
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <malloc>
     5d2:	9d 83       	std	Y+5, r25	; 0x05
     5d4:	8c 83       	std	Y+4, r24	; 0x04
	score2 = (char *)malloc(4*sizeof(char));
     5d6:	84 e0       	ldi	r24, 0x04	; 4
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <malloc>
     5de:	9f 83       	std	Y+7, r25	; 0x07
     5e0:	8e 83       	std	Y+6, r24	; 0x06
     5e2:	7e 01       	movw	r14, r28
     5e4:	00 e0       	ldi	r16, 0x00	; 0
     5e6:	10 e0       	ldi	r17, 0x00	; 0
	//Enemy enemy1, enemy2, enemy3;

	Enemy enemyPool[ENEMY_POOL_SIZE];

	 int getRandomBoardXCordinate() {
		 	return rand() % BOARD_WIDTH;
     5e8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <rand>
     5ec:	f7 01       	movw	r30, r14
	score1 = (char *)malloc(4*sizeof(char));
	score2 = (char *)malloc(4*sizeof(char));
	
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {

		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
     5ee:	87 70       	andi	r24, 0x07	; 7
     5f0:	90 78       	andi	r25, 0x80	; 128
     5f2:	99 23       	and	r25, r25
     5f4:	24 f4       	brge	.+8      	; 0x5fe <_ZN14GameControllerC1Ev+0x9c>
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	88 6f       	ori	r24, 0xF8	; 248
     5fa:	9f 6f       	ori	r25, 0xFF	; 255
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	97 87       	std	Z+15, r25	; 0x0f
     600:	86 87       	std	Z+14, r24	; 0x0e
     602:	11 8a       	std	Z+17, r1	; 0x11
     604:	10 8a       	std	Z+16, r1	; 0x10
     606:	12 8a       	std	Z+18, r1	; 0x12
     608:	14 8b       	std	Z+20, r17	; 0x14
     60a:	03 8b       	std	Z+19, r16	; 0x13
     60c:	16 8a       	std	Z+22, r1	; 0x16
     60e:	15 8a       	std	Z+21, r1	; 0x15
     610:	89 e0       	ldi	r24, 0x09	; 9
     612:	e8 0e       	add	r14, r24
     614:	f1 1c       	adc	r15, r1
     616:	0c 50       	subi	r16, 0x0C	; 12
     618:	1e 4f       	sbci	r17, 0xFE	; 254
	enemyPlayerCollisionCounter = 0;
	
	score1 = (char *)malloc(4*sizeof(char));
	score2 = (char *)malloc(4*sizeof(char));
	
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
     61a:	0c 3d       	cpi	r16, 0xDC	; 220
     61c:	85 e0       	ldi	r24, 0x05	; 5
     61e:	18 07       	cpc	r17, r24
     620:	19 f7       	brne	.-58     	; 0x5e8 <_ZN14GameControllerC1Ev+0x86>
     622:	de 01       	movw	r26, r28
     624:	9d 96       	adiw	r26, 0x2d	; 45
     626:	fe 01       	movw	r30, r28
     628:	ef 51       	subi	r30, 0x1F	; 31
     62a:	ff 4f       	sbci	r31, 0xFF	; 255
		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
	}


	    for(int i = 0; i < BULLET_POOL_SIZE; i++) {
		    bulletPool[i] = NewBullet(0,0,0);
     62c:	11 96       	adiw	r26, 0x01	; 1
     62e:	1c 92       	st	X, r1
     630:	1e 92       	st	-X, r1
     632:	13 96       	adiw	r26, 0x03	; 3
     634:	1c 92       	st	X, r1
     636:	1e 92       	st	-X, r1
     638:	12 97       	sbiw	r26, 0x02	; 2
     63a:	14 96       	adiw	r26, 0x04	; 4
     63c:	1c 92       	st	X, r1
     63e:	14 97       	sbiw	r26, 0x04	; 4
     640:	16 96       	adiw	r26, 0x06	; 6
     642:	1c 92       	st	X, r1
     644:	1e 92       	st	-X, r1
     646:	15 97       	sbiw	r26, 0x05	; 5
     648:	18 96       	adiw	r26, 0x08	; 8
     64a:	1c 92       	st	X, r1
     64c:	1e 92       	st	-X, r1
     64e:	17 97       	sbiw	r26, 0x07	; 7
     650:	19 96       	adiw	r26, 0x09	; 9

		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
	}


	    for(int i = 0; i < BULLET_POOL_SIZE; i++) {
     652:	ae 17       	cp	r26, r30
     654:	bf 07       	cpc	r27, r31
     656:	51 f7       	brne	.-44     	; 0x62c <_ZN14GameControllerC1Ev+0xca>
     658:	9e 01       	movw	r18, r28
     65a:	2f 51       	subi	r18, 0x1F	; 31
     65c:	3e 4f       	sbci	r19, 0xFE	; 254
     65e:	cf 01       	movw	r24, r30
     660:	40 96       	adiw	r24, 0x10	; 16

		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				displayBoard[i][j] = 0;
     662:	11 92       	st	Z+, r1
     664:	11 92       	st	Z+, r1


		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
     666:	e8 17       	cp	r30, r24
     668:	f9 07       	cpc	r31, r25
     66a:	d9 f7       	brne	.-10     	; 0x662 <_ZN14GameControllerC1Ev+0x100>
     66c:	fc 01       	movw	r30, r24



		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++) {
     66e:	28 17       	cp	r18, r24
     670:	39 07       	cpc	r19, r25
     672:	a9 f7       	brne	.-22     	; 0x65e <_ZN14GameControllerC1Ev+0xfc>
			for (int j = 0; j < cols; j++) {
				displayBoard[i][j] = 0;
			}
		}
	}
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	ff 90       	pop	r15
     67e:	ef 90       	pop	r14
     680:	08 95       	ret

00000682 <_Z13softwareSetupv>:
#include "headers/game/GameController.h"
#include "headers/utils/HardwareController.h"

GameController gameController;

void softwareSetup() {
     682:	af 92       	push	r10
     684:	bf 92       	push	r11
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	c1 5e       	subi	r28, 0xE1	; 225
     69c:	d1 40       	sbci	r29, 0x01	; 1
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
	public:
	int displayBoard[BOARD_HEIGHT][BOARD_WIDTH];



	GameController() {
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	89 87       	std	Y+9, r24	; 0x09
    


public:
    Player() {
        playerPosition = Position(4,BOARD_HEIGHT-1);
     6ac:	24 e0       	ldi	r18, 0x04	; 4
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	3b 87       	std	Y+11, r19	; 0x0b
     6b2:	2a 87       	std	Y+10, r18	; 0x0a
     6b4:	2f e0       	ldi	r18, 0x0F	; 15
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	3d 87       	std	Y+13, r19	; 0x0d
     6ba:	2c 87       	std	Y+12, r18	; 0x0c
        readyToMove = true;
     6bc:	8e 87       	std	Y+14, r24	; 0x0e
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     6be:	18 8a       	std	Y+16, r1	; 0x10
     6c0:	1f 86       	std	Y+15, r1	; 0x0f
        y = 0;
     6c2:	1a 8a       	std	Y+18, r1	; 0x12
     6c4:	19 8a       	std	Y+17, r1	; 0x11
     6c6:	8b 8b       	std	Y+19, r24	; 0x13
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     6c8:	19 8e       	std	Y+25, r1	; 0x19
     6ca:	18 8e       	std	Y+24, r1	; 0x18
        y = 0;
     6cc:	1b 8e       	std	Y+27, r1	; 0x1b
     6ce:	1a 8e       	std	Y+26, r1	; 0x1a
     6d0:	8c 8f       	std	Y+28, r24	; 0x1c
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     6d2:	1a a2       	std	Y+34, r1	; 0x22
     6d4:	19 a2       	std	Y+33, r1	; 0x21
        y = 0;
     6d6:	1c a2       	std	Y+36, r1	; 0x24
     6d8:	1b a2       	std	Y+35, r1	; 0x23
     6da:	8d a3       	std	Y+37, r24	; 0x25
     6dc:	7e 01       	movw	r14, r28
     6de:	8e e2       	ldi	r24, 0x2E	; 46
     6e0:	e8 0e       	add	r14, r24
     6e2:	f1 1c       	adc	r15, r1
     6e4:	8e 01       	movw	r16, r28
     6e6:	0e 51       	subi	r16, 0x1E	; 30
     6e8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ea:	f7 01       	movw	r30, r14
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     6ec:	11 82       	std	Z+1, r1	; 0x01
     6ee:	10 82       	st	Z, r1
        y = 0;
     6f0:	13 82       	std	Z+3, r1	; 0x03
     6f2:	12 82       	std	Z+2, r1	; 0x02

public:

    NewBullet() {

        isActiveOnBoard = false;
     6f4:	14 82       	std	Z+4, r1	; 0x04
        bulletPosition = Position(0, 0);
        moveTimeCounter = 0;
     6f6:	16 82       	std	Z+6, r1	; 0x06
     6f8:	15 82       	std	Z+5, r1	; 0x05
     6fa:	39 96       	adiw	r30, 0x09	; 9
     6fc:	0e 17       	cp	r16, r30
     6fe:	1f 07       	cpc	r17, r31
     700:	a9 f7       	brne	.-22     	; 0x6ec <_Z13softwareSetupv+0x6a>
     702:	88 c0       	rjmp	.+272    	; 0x814 <_Z13softwareSetupv+0x192>
	//Enemy enemy1, enemy2, enemy3;

	Enemy enemyPool[ENEMY_POOL_SIZE];

	 int getRandomBoardXCordinate() {
		 	return rand() % BOARD_WIDTH;
     704:	0e 94 55 0a 	call	0x14aa	; 0x14aa <rand>
     708:	f5 01       	movw	r30, r10
	score1 = (char *)malloc(4*sizeof(char));
	score2 = (char *)malloc(4*sizeof(char));
	
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {

		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
     70a:	87 70       	andi	r24, 0x07	; 7
     70c:	90 78       	andi	r25, 0x80	; 128
     70e:	99 23       	and	r25, r25
     710:	24 f4       	brge	.+8      	; 0x71a <_Z13softwareSetupv+0x98>
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	88 6f       	ori	r24, 0xF8	; 248
     716:	9f 6f       	ori	r25, 0xFF	; 255
     718:	01 96       	adiw	r24, 0x01	; 1
     71a:	97 87       	std	Z+15, r25	; 0x0f
     71c:	86 87       	std	Z+14, r24	; 0x0e
     71e:	11 8a       	std	Z+17, r1	; 0x11
     720:	10 8a       	std	Z+16, r1	; 0x10
     722:	12 8a       	std	Z+18, r1	; 0x12
     724:	d4 8a       	std	Z+20, r13	; 0x14
     726:	c3 8a       	std	Z+19, r12	; 0x13
     728:	16 8a       	std	Z+22, r1	; 0x16
     72a:	15 8a       	std	Z+21, r1	; 0x15
     72c:	99 e0       	ldi	r25, 0x09	; 9
     72e:	a9 0e       	add	r10, r25
     730:	b1 1c       	adc	r11, r1
     732:	ec e0       	ldi	r30, 0x0C	; 12
     734:	ce 1a       	sub	r12, r30
     736:	ee ef       	ldi	r30, 0xFE	; 254
     738:	de 0a       	sbc	r13, r30
	enemyPlayerCollisionCounter = 0;
	
	score1 = (char *)malloc(4*sizeof(char));
	score2 = (char *)malloc(4*sizeof(char));
	
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
     73a:	fc ed       	ldi	r31, 0xDC	; 220
     73c:	cf 16       	cp	r12, r31
     73e:	f5 e0       	ldi	r31, 0x05	; 5
     740:	df 06       	cpc	r13, r31
     742:	01 f7       	brne	.-64     	; 0x704 <_Z13softwareSetupv+0x82>
		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
	}


	    for(int i = 0; i < BULLET_POOL_SIZE; i++) {
		    bulletPool[i] = NewBullet(0,0,0);
     744:	f7 01       	movw	r30, r14
     746:	11 82       	std	Z+1, r1	; 0x01
     748:	10 82       	st	Z, r1
     74a:	13 82       	std	Z+3, r1	; 0x03
     74c:	12 82       	std	Z+2, r1	; 0x02
     74e:	14 82       	std	Z+4, r1	; 0x04
     750:	16 82       	std	Z+6, r1	; 0x06
     752:	15 82       	std	Z+5, r1	; 0x05
     754:	10 86       	std	Z+8, r1	; 0x08
     756:	17 82       	std	Z+7, r1	; 0x07
     758:	f9 e0       	ldi	r31, 0x09	; 9
     75a:	ef 0e       	add	r14, r31
     75c:	f1 1c       	adc	r15, r1

		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
	}


	    for(int i = 0; i < BULLET_POOL_SIZE; i++) {
     75e:	0e 15       	cp	r16, r14
     760:	1f 05       	cpc	r17, r15
     762:	81 f7       	brne	.-32     	; 0x744 <_Z13softwareSetupv+0xc2>
     764:	9e 01       	movw	r18, r28
     766:	2e 51       	subi	r18, 0x1E	; 30
     768:	3e 4f       	sbci	r19, 0xFE	; 254
     76a:	c8 01       	movw	r24, r16
     76c:	40 96       	adiw	r24, 0x10	; 16

		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				displayBoard[i][j] = 0;
     76e:	f8 01       	movw	r30, r16
     770:	11 92       	st	Z+, r1
     772:	11 92       	st	Z+, r1
     774:	8f 01       	movw	r16, r30


		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
     776:	8e 17       	cp	r24, r30
     778:	9f 07       	cpc	r25, r31
     77a:	c9 f7       	brne	.-14     	; 0x76e <_Z13softwareSetupv+0xec>
     77c:	8c 01       	movw	r16, r24



		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++) {
     77e:	82 17       	cp	r24, r18
     780:	93 07       	cpc	r25, r19
     782:	99 f7       	brne	.-26     	; 0x76a <_Z13softwareSetupv+0xe8>
    gameController = GameController();
     784:	81 ee       	ldi	r24, 0xE1	; 225
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	fe 01       	movw	r30, r28
     78a:	31 96       	adiw	r30, 0x01	; 1
     78c:	ae eb       	ldi	r26, 0xBE	; 190
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	01 90       	ld	r0, Z+
     792:	0d 92       	st	X+, r0
     794:	01 97       	sbiw	r24, 0x01	; 1
     796:	e1 f7       	brne	.-8      	; 0x790 <_Z13softwareSetupv+0x10e>
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     798:	ee eb       	ldi	r30, 0xBE	; 190
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	63 85       	ldd	r22, Z+11	; 0x0b
     79e:	74 85       	ldd	r23, Z+12	; 0x0c
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     7a0:	81 85       	ldd	r24, Z+9	; 0x09
     7a2:	92 85       	ldd	r25, Z+10	; 0x0a
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     7a4:	fb 01       	movw	r30, r22
     7a6:	ee 0f       	add	r30, r30
     7a8:	ff 1f       	adc	r31, r31
     7aa:	ee 0f       	add	r30, r30
     7ac:	ff 1f       	adc	r31, r31
     7ae:	ee 0f       	add	r30, r30
     7b0:	ff 1f       	adc	r31, r31
     7b2:	df 01       	movw	r26, r30
     7b4:	a8 0f       	add	r26, r24
     7b6:	b9 1f       	adc	r27, r25
     7b8:	aa 0f       	add	r26, r26
     7ba:	bb 1f       	adc	r27, r27
     7bc:	a1 56       	subi	r26, 0x61	; 97
     7be:	be 4f       	sbci	r27, 0xFE	; 254
     7c0:	43 e0       	ldi	r20, 0x03	; 3
     7c2:	50 e0       	ldi	r21, 0x00	; 0
     7c4:	4d 93       	st	X+, r20
     7c6:	5c 93       	st	X, r21
     7c8:	dc 01       	movw	r26, r24
     7ca:	11 97       	sbiw	r26, 0x01	; 1
     7cc:	ae 0f       	add	r26, r30
     7ce:	bf 1f       	adc	r27, r31
     7d0:	aa 0f       	add	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	a1 56       	subi	r26, 0x61	; 97
     7d6:	be 4f       	sbci	r27, 0xFE	; 254
     7d8:	4d 93       	st	X+, r20
     7da:	5c 93       	st	X, r21
     7dc:	9c 01       	movw	r18, r24
     7de:	2f 5f       	subi	r18, 0xFF	; 255
     7e0:	3f 4f       	sbci	r19, 0xFF	; 255
     7e2:	e2 0f       	add	r30, r18
     7e4:	f3 1f       	adc	r31, r19
     7e6:	ee 0f       	add	r30, r30
     7e8:	ff 1f       	adc	r31, r31
     7ea:	e1 56       	subi	r30, 0x61	; 97
     7ec:	fe 4f       	sbci	r31, 0xFE	; 254
     7ee:	51 83       	std	Z+1, r21	; 0x01
     7f0:	40 83       	st	Z, r20
     7f2:	fb 01       	movw	r30, r22
     7f4:	31 97       	sbiw	r30, 0x01	; 1
     7f6:	ee 0f       	add	r30, r30
     7f8:	ff 1f       	adc	r31, r31
     7fa:	ee 0f       	add	r30, r30
     7fc:	ff 1f       	adc	r31, r31
     7fe:	ee 0f       	add	r30, r30
     800:	ff 1f       	adc	r31, r31
     802:	e8 0f       	add	r30, r24
     804:	f9 1f       	adc	r31, r25
     806:	ee 0f       	add	r30, r30
     808:	ff 1f       	adc	r31, r31
     80a:	e1 56       	subi	r30, 0x61	; 97
     80c:	fe 4f       	sbci	r31, 0xFE	; 254
     80e:	51 83       	std	Z+1, r21	; 0x01
     810:	40 83       	st	Z, r20
    gameController.initializePlayerPosition();
   // gameController.initEnemyPositions();
}
     812:	16 c0       	rjmp	.+44     	; 0x840 <_Z13softwareSetupv+0x1be>
    //    newBullet1 = NewBullet(0, 0,0);
    //    newBullet2 = NewBullet(2000, 0,0);
    //    newBullet3 = NewBullet(4000, 0,0);
    //    newBullet4 = NewBullet(6000, 0,0);

	enemyBulletCollisionCounter = 0;
     814:	1a 82       	std	Y+2, r1	; 0x02
     816:	19 82       	std	Y+1, r1	; 0x01
	enemyPlayerCollisionCounter = 0;
     818:	1c 82       	std	Y+4, r1	; 0x04
     81a:	1b 82       	std	Y+3, r1	; 0x03
	
	score1 = (char *)malloc(4*sizeof(char));
     81c:	84 e0       	ldi	r24, 0x04	; 4
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <malloc>
     824:	9e 83       	std	Y+6, r25	; 0x06
     826:	8d 83       	std	Y+5, r24	; 0x05
	score2 = (char *)malloc(4*sizeof(char));
     828:	84 e0       	ldi	r24, 0x04	; 4
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <malloc>
     830:	98 87       	std	Y+8, r25	; 0x08
     832:	8f 83       	std	Y+7, r24	; 0x07
     834:	ce 01       	movw	r24, r28
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	5c 01       	movw	r10, r24
     83a:	c1 2c       	mov	r12, r1
     83c:	d1 2c       	mov	r13, r1
     83e:	62 cf       	rjmp	.-316    	; 0x704 <_Z13softwareSetupv+0x82>
     840:	cf 51       	subi	r28, 0x1F	; 31
     842:	de 4f       	sbci	r29, 0xFE	; 254
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	de bf       	out	0x3e, r29	; 62
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	cd bf       	out	0x3d, r28	; 61
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	1f 91       	pop	r17
     854:	0f 91       	pop	r16
     856:	ff 90       	pop	r15
     858:	ef 90       	pop	r14
     85a:	df 90       	pop	r13
     85c:	cf 90       	pop	r12
     85e:	bf 90       	pop	r11
     860:	af 90       	pop	r10
     862:	08 95       	ret

00000864 <_Z5setupv>:


void setup() {
    softwareSetup();
     864:	0e 94 41 03 	call	0x682	; 0x682 <_Z13softwareSetupv>
	}

	static void hardWareSetup()
	{
		//LED MATRIX OUTPUT
		DDRA = 0b11111000;
     868:	88 ef       	ldi	r24, 0xF8	; 248
     86a:	8a bb       	out	0x1a, r24	; 26
		DDRB = 255;
     86c:	8f ef       	ldi	r24, 0xFF	; 255
     86e:	87 bb       	out	0x17, r24	; 23
		//LCD DISPLAY
		DDRD = 0xFF;
     870:	81 bb       	out	0x11, r24	; 17
		DDRC = 0xFF;
     872:	84 bb       	out	0x14, r24	; 20
		Lcd4_Init();
     874:	0e 94 2b 02 	call	0x456	; 0x456 <_Z9Lcd4_Initv>
		}
	}

	static void displayLcd(char * upper,char * lower)
	{
		Lcd4_Clear();
     878:	0e 94 07 02 	call	0x40e	; 0x40e <_Z10Lcd4_Clearv>
		Lcd4_Set_Cursor(1, 0);
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	0e 94 0e 02 	call	0x41c	; 0x41c <_Z15Lcd4_Set_Cursorcc>
		Lcd4_Write_String(upper);
     884:	82 e7       	ldi	r24, 0x72	; 114
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 a2 02 	call	0x544	; 0x544 <_Z17Lcd4_Write_StringPc>
		Lcd4_Set_Cursor(2, 0);
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	82 e0       	ldi	r24, 0x02	; 2
     890:	0e 94 0e 02 	call	0x41c	; 0x41c <_Z15Lcd4_Set_Cursorcc>
		Lcd4_Write_String(lower);
     894:	8b e7       	ldi	r24, 0x7B	; 123
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 a2 02 	call	0x544	; 0x544 <_Z17Lcd4_Write_StringPc>
     89c:	08 95       	ret

0000089e <_Z4loopj>:
	HardwareController::hardWareSetup();
	
}


void loop(unsigned loopNo) {
     89e:	2f 92       	push	r2
     8a0:	3f 92       	push	r3
     8a2:	4f 92       	push	r4
     8a4:	5f 92       	push	r5
     8a6:	6f 92       	push	r6
     8a8:	7f 92       	push	r7
     8aa:	8f 92       	push	r8
     8ac:	9f 92       	push	r9
     8ae:	af 92       	push	r10
     8b0:	bf 92       	push	r11
     8b2:	cf 92       	push	r12
     8b4:	df 92       	push	r13
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	6c 97       	sbiw	r28, 0x1c	; 28
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
	int getLoopNo() const {
		return loopNo;
	}

	void setLoopNo(int loopNo) {
		GameController::loopNo = loopNo;
     8d2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__data_end+0x2a>
     8d6:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__data_end+0x29>
     8da:	0f 2e       	mov	r0, r31
     8dc:	fe eb       	ldi	r31, 0xBE	; 190
     8de:	af 2e       	mov	r10, r31
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	bf 2e       	mov	r11, r31
     8e4:	f0 2d       	mov	r31, r0
     8e6:	75 01       	movw	r14, r10
		// else if(enemyNo == 3)moveTime = ENEMY3_MOVE_TIME;

		unsigned int currentTime = enemy.getSpawnTimerCounter();
		enemy.setSpawnTimerCounter(currentTime + 1);

		if( enemy.getSpawnTimerCounter() % ENEMY_SPAWN_TIME_NEW == 0 ) {
     8e8:	0f 2e       	mov	r0, r31
     8ea:	f8 eb       	ldi	r31, 0xB8	; 184
     8ec:	cf 2e       	mov	r12, r31
     8ee:	fb e0       	ldi	r31, 0x0B	; 11
     8f0:	df 2e       	mov	r13, r31
     8f2:	f0 2d       	mov	r31, r0
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
     8f4:	55 24       	eor	r5, r5
     8f6:	53 94       	inc	r5
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     8f8:	68 94       	set
     8fa:	88 24       	eor	r8, r8
     8fc:	81 f8       	bld	r8, 1
     8fe:	91 2c       	mov	r9, r1
     900:	87 01       	movw	r16, r14
		// else if(enemyNo == 2)
		// moveTime = ENEMY2_MOVE_TIME;
		// else if(enemyNo == 3)moveTime = ENEMY3_MOVE_TIME;

		unsigned int currentTime = enemy.getSpawnTimerCounter();
		enemy.setSpawnTimerCounter(currentTime + 1);
     902:	d7 01       	movw	r26, r14
     904:	53 96       	adiw	r26, 0x13	; 19
     906:	4d 91       	ld	r20, X+
     908:	5c 91       	ld	r21, X
     90a:	54 97       	sbiw	r26, 0x14	; 20
     90c:	4f 5f       	subi	r20, 0xFF	; 255
     90e:	5f 4f       	sbci	r21, 0xFF	; 255

		if( enemy.getSpawnTimerCounter() % ENEMY_SPAWN_TIME_NEW == 0 ) {
     910:	9a 01       	movw	r18, r20
     912:	36 95       	lsr	r19
     914:	27 95       	ror	r18
     916:	36 95       	lsr	r19
     918:	27 95       	ror	r18
     91a:	36 95       	lsr	r19
     91c:	27 95       	ror	r18
     91e:	a9 ed       	ldi	r26, 0xD9	; 217
     920:	b5 e1       	ldi	r27, 0x15	; 21
     922:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__umulhisi3>
     926:	96 95       	lsr	r25
     928:	87 95       	ror	r24
     92a:	92 95       	swap	r25
     92c:	82 95       	swap	r24
     92e:	8f 70       	andi	r24, 0x0F	; 15
     930:	89 27       	eor	r24, r25
     932:	9f 70       	andi	r25, 0x0F	; 15
     934:	89 27       	eor	r24, r25
     936:	8c 9d       	mul	r24, r12
     938:	90 01       	movw	r18, r0
     93a:	8d 9d       	mul	r24, r13
     93c:	30 0d       	add	r19, r0
     93e:	9c 9d       	mul	r25, r12
     940:	30 0d       	add	r19, r0
     942:	11 24       	eor	r1, r1
     944:	42 17       	cp	r20, r18
     946:	53 07       	cpc	r21, r19
     948:	21 f0       	breq	.+8      	; 0x952 <_Z4loopj+0xb4>
    unsigned int getSpawnTimerCounter() const {
        return spawnTimerCounter;
    }

    void setSpawnTimerCounter(unsigned int spawnTimerCounter) {
        Enemy::spawnTimerCounter = spawnTimerCounter;
     94a:	f7 01       	movw	r30, r14
     94c:	54 8b       	std	Z+20, r21	; 0x14
     94e:	43 8b       	std	Z+19, r20	; 0x13
     950:	20 c0       	rjmp	.+64     	; 0x992 <_Z4loopj+0xf4>
     952:	d7 01       	movw	r26, r14
     954:	54 96       	adiw	r26, 0x14	; 20
     956:	1c 92       	st	X, r1
     958:	1e 92       	st	-X, r1
     95a:	53 97       	sbiw	r26, 0x13	; 19
			enemy.setSpawnTimerCounter(0);

			if ( !enemy.isAlive() ) {
     95c:	52 96       	adiw	r26, 0x12	; 18
     95e:	8c 91       	ld	r24, X
     960:	81 11       	cpse	r24, r1
     962:	17 c0       	rjmp	.+46     	; 0x992 <_Z4loopj+0xf4>
	//Enemy enemy1, enemy2, enemy3;

	Enemy enemyPool[ENEMY_POOL_SIZE];

	 int getRandomBoardXCordinate() {
		 	return rand() % BOARD_WIDTH;
     964:	0e 94 55 0a 	call	0x14aa	; 0x14aa <rand>
     968:	87 70       	andi	r24, 0x07	; 7
     96a:	90 78       	andi	r25, 0x80	; 128
     96c:	99 23       	and	r25, r25
     96e:	24 f4       	brge	.+8      	; 0x978 <_Z4loopj+0xda>
     970:	01 97       	sbiw	r24, 0x01	; 1
     972:	88 6f       	ori	r24, 0xF8	; 248
     974:	9f 6f       	ori	r25, 0xFF	; 255
     976:	01 96       	adiw	r24, 0x01	; 1
    }

    void setX(int x) {
        Position::x = x;
     978:	f8 01       	movw	r30, r16
     97a:	97 87       	std	Z+15, r25	; 0x0f
     97c:	86 87       	std	Z+14, r24	; 0x0e
    int getY() const {
        return y;
    }

    void setY(int y) {
        Position::y = y;
     97e:	11 8a       	std	Z+17, r1	; 0x11
     980:	10 8a       	std	Z+16, r1	; 0x10
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
     982:	52 8a       	std	Z+18, r5	; 0x12
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     984:	88 0f       	add	r24, r24
     986:	99 1f       	adc	r25, r25
     988:	fc 01       	movw	r30, r24
     98a:	e1 56       	subi	r30, 0x61	; 97
     98c:	fe 4f       	sbci	r31, 0xFE	; 254
     98e:	91 82       	std	Z+1, r9	; 0x01
     990:	80 82       	st	Z, r8
				setIndexInBoard(enemy.getX(), enemy.getY(),2);
			}
		}
		
		
		enemy.setMoveTimeCounter(enemy.getMoveTimeCounter() + 1);
     992:	d8 01       	movw	r26, r16
     994:	55 96       	adiw	r26, 0x15	; 21
     996:	8d 91       	ld	r24, X+
     998:	9c 91       	ld	r25, X
     99a:	56 97       	sbiw	r26, 0x16	; 22
     99c:	01 96       	adiw	r24, 0x01	; 1
    unsigned int getMoveTimeCounter() const {
        return moveTimerCounter;
    }

    void setMoveTimeCounter(unsigned int moveTimerCounterarg) {
        Enemy::moveTimerCounter = moveTimerCounterarg;
     99e:	56 96       	adiw	r26, 0x16	; 22
     9a0:	9c 93       	st	X, r25
     9a2:	8e 93       	st	-X, r24
     9a4:	55 97       	sbiw	r26, 0x15	; 21
	

		if (enemy.getMoveTimeCounter() >= ENEMY_MOVE_TIME_NEW && enemy.isAlive()) {
     9a6:	80 39       	cpi	r24, 0x90	; 144
     9a8:	91 40       	sbci	r25, 0x01	; 1
     9aa:	08 f4       	brcc	.+2      	; 0x9ae <_Z4loopj+0x110>
     9ac:	4f c0       	rjmp	.+158    	; 0xa4c <_Z4loopj+0x1ae>
     9ae:	f8 01       	movw	r30, r16
     9b0:	82 89       	ldd	r24, Z+18	; 0x12
     9b2:	88 23       	and	r24, r24
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <_Z4loopj+0x11a>
     9b6:	4a c0       	rjmp	.+148    	; 0xa4c <_Z4loopj+0x1ae>
    int getY() const {
        return enemyPosition.getY();
    }

    const Position getEnemyPosition() const {
        return enemyPosition;
     9b8:	86 85       	ldd	r24, Z+14	; 0x0e
     9ba:	97 85       	ldd	r25, Z+15	; 0x0f
     9bc:	a0 89       	ldd	r26, Z+16	; 0x10
     9be:	b1 89       	ldd	r27, Z+17	; 0x11
     9c0:	9d 01       	movw	r18, r26
    int getX() const {
        return x;
    }

    void setX(int x) {
        Position::x = x;
     9c2:	97 87       	std	Z+15, r25	; 0x0f
     9c4:	86 87       	std	Z+14, r24	; 0x0e
    int getY() const {
        return y;
    }

    void setY(int y) {
        Position::y = y;
     9c6:	ad 01       	movw	r20, r26
     9c8:	4f 5f       	subi	r20, 0xFF	; 255
     9ca:	5f 4f       	sbci	r21, 0xFF	; 255
     9cc:	4f 70       	andi	r20, 0x0F	; 15
     9ce:	50 78       	andi	r21, 0x80	; 128
     9d0:	55 23       	and	r21, r21
     9d2:	34 f4       	brge	.+12     	; 0x9e0 <_Z4loopj+0x142>
     9d4:	41 50       	subi	r20, 0x01	; 1
     9d6:	51 09       	sbc	r21, r1
     9d8:	40 6f       	ori	r20, 0xF0	; 240
     9da:	5f 6f       	ori	r21, 0xFF	; 255
     9dc:	4f 5f       	subi	r20, 0xFF	; 255
     9de:	5f 4f       	sbci	r21, 0xFF	; 255
     9e0:	f8 01       	movw	r30, r16
     9e2:	51 8b       	std	Z+17, r21	; 0x11
     9e4:	40 8b       	std	Z+16, r20	; 0x10
    unsigned int getMoveTimeCounter() const {
        return moveTimerCounter;
    }

    void setMoveTimeCounter(unsigned int moveTimerCounterarg) {
        Enemy::moveTimerCounter = moveTimerCounterarg;
     9e6:	16 8a       	std	Z+22, r1	; 0x16
     9e8:	15 8a       	std	Z+21, r1	; 0x15
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     9ea:	fd 01       	movw	r30, r26
     9ec:	ee 0f       	add	r30, r30
     9ee:	ff 1f       	adc	r31, r31
     9f0:	ee 0f       	add	r30, r30
     9f2:	ff 1f       	adc	r31, r31
     9f4:	ee 0f       	add	r30, r30
     9f6:	ff 1f       	adc	r31, r31
     9f8:	8e 0f       	add	r24, r30
     9fa:	9f 1f       	adc	r25, r31
     9fc:	88 0f       	add	r24, r24
     9fe:	99 1f       	adc	r25, r25
     a00:	fc 01       	movw	r30, r24
     a02:	e1 56       	subi	r30, 0x61	; 97
     a04:	fe 4f       	sbci	r31, 0xFE	; 254
     a06:	11 82       	std	Z+1, r1	; 0x01
     a08:	10 82       	st	Z, r1
			enemy.setEnemyPosition(prevX,(prevY+1)%BOARD_HEIGHT);
			////printStringToConsole("Enemy "+to_string(enemyNo)+"("+to_string(enemy.getX())+","+to_string(enemy.getY())+")");
			enemy.setMoveTimeCounter(0);
			resetIndexInBoard(prevX,prevY);

			if(prevY == BOARD_HEIGHT - 1) {
     a0a:	2f 30       	cpi	r18, 0x0F	; 15
     a0c:	31 05       	cpc	r19, r1
     a0e:	21 f4       	brne	.+8      	; 0xa18 <_Z4loopj+0x17a>
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
     a10:	d8 01       	movw	r26, r16
     a12:	52 96       	adiw	r26, 0x12	; 18
     a14:	1c 92       	st	X, r1
     a16:	1a c0       	rjmp	.+52     	; 0xa4c <_Z4loopj+0x1ae>
				enemy.setIsAlive(false);
			}
		
		if(enemy.isAlive())	setIndexInBoard(enemy.getX(),enemy.getY(), ENEMY_STATUS_IN_BOARD); // no need to display if dead
     a18:	f8 01       	movw	r30, r16
     a1a:	82 89       	ldd	r24, Z+18	; 0x12
     a1c:	88 23       	and	r24, r24
     a1e:	b1 f0       	breq	.+44     	; 0xa4c <_Z4loopj+0x1ae>
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     a20:	00 88       	ldd	r0, Z+16	; 0x10
     a22:	f1 89       	ldd	r31, Z+17	; 0x11
     a24:	e0 2d       	mov	r30, r0
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     a26:	d8 01       	movw	r26, r16
     a28:	1e 96       	adiw	r26, 0x0e	; 14
     a2a:	8d 91       	ld	r24, X+
     a2c:	9c 91       	ld	r25, X
     a2e:	1f 97       	sbiw	r26, 0x0f	; 15
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     a30:	ee 0f       	add	r30, r30
     a32:	ff 1f       	adc	r31, r31
     a34:	ee 0f       	add	r30, r30
     a36:	ff 1f       	adc	r31, r31
     a38:	ee 0f       	add	r30, r30
     a3a:	ff 1f       	adc	r31, r31
     a3c:	e8 0f       	add	r30, r24
     a3e:	f9 1f       	adc	r31, r25
     a40:	ee 0f       	add	r30, r30
     a42:	ff 1f       	adc	r31, r31
     a44:	e1 56       	subi	r30, 0x61	; 97
     a46:	fe 4f       	sbci	r31, 0xFE	; 254
     a48:	91 82       	std	Z+1, r9	; 0x01
     a4a:	80 82       	st	Z, r8
     a4c:	b9 e0       	ldi	r27, 0x09	; 9
     a4e:	eb 0e       	add	r14, r27
     a50:	f1 1c       	adc	r15, r1
	void updateEnemyPositions(){
		// updateEnemy(enemy1,1);
		// updateEnemy(enemy2,2);
		// updateEnemy(enemy3,3);

		for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
     a52:	e9 ed       	ldi	r30, 0xD9	; 217
     a54:	ee 16       	cp	r14, r30
     a56:	e0 e0       	ldi	r30, 0x00	; 0
     a58:	fe 06       	cpc	r15, r30
     a5a:	09 f0       	breq	.+2      	; 0xa5e <_Z4loopj+0x1c0>
     a5c:	51 cf       	rjmp	.-350    	; 0x900 <_Z4loopj+0x62>

	}

	void playerMovementUpdateWithGyro() {

		if(loopNo % PLAYER_MOVE_SPEED_GYRO == 0) {
     a5e:	40 91 e7 00 	lds	r20, 0x00E7	; 0x8000e7 <__data_end+0x29>
     a62:	50 91 e8 00 	lds	r21, 0x00E8	; 0x8000e8 <__data_end+0x2a>
     a66:	9a 01       	movw	r18, r20
     a68:	36 95       	lsr	r19
     a6a:	27 95       	ror	r18
     a6c:	36 95       	lsr	r19
     a6e:	27 95       	ror	r18
     a70:	ab e3       	ldi	r26, 0x3B	; 59
     a72:	bd e6       	ldi	r27, 0x6D	; 109
     a74:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__umulhisi3>
     a78:	96 95       	lsr	r25
     a7a:	87 95       	ror	r24
     a7c:	92 95       	swap	r25
     a7e:	82 95       	swap	r24
     a80:	8f 70       	andi	r24, 0x0F	; 15
     a82:	89 27       	eor	r24, r25
     a84:	9f 70       	andi	r25, 0x0F	; 15
     a86:	89 27       	eor	r24, r25
     a88:	6c e2       	ldi	r22, 0x2C	; 44
     a8a:	71 e0       	ldi	r23, 0x01	; 1
     a8c:	86 9f       	mul	r24, r22
     a8e:	90 01       	movw	r18, r0
     a90:	87 9f       	mul	r24, r23
     a92:	30 0d       	add	r19, r0
     a94:	96 9f       	mul	r25, r22
     a96:	30 0d       	add	r19, r0
     a98:	11 24       	eor	r1, r1
     a9a:	42 17       	cp	r20, r18
     a9c:	53 07       	cpc	r21, r19
     a9e:	21 f4       	brne	.+8      	; 0xaa8 <_Z4loopj+0x20a>
    bool isReadyToMove() const {
        return readyToMove;
    }

    void setIsReadyToMove(bool ready) {
        Player::readyToMove = ready;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <__data_end+0xd>
     aa6:	05 c0       	rjmp	.+10     	; 0xab2 <_Z4loopj+0x214>
			player.setIsReadyToMove(true);
		}


		if(player.isReadyToMove()) {
     aa8:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <__data_end+0xd>
     aac:	88 23       	and	r24, r24
     aae:	09 f4       	brne	.+2      	; 0xab2 <_Z4loopj+0x214>
     ab0:	03 c1       	rjmp	.+518    	; 0xcb8 <_Z4loopj+0x41a>
			_delay_us(10);
		}
	}

	static int getGyroReading() {
		char rawInput = PINA; 
     ab2:	89 b3       	in	r24, 0x19	; 25

		char inputLSB = rawInput & 0b00000011 ;
		

		switch(inputLSB) {
     ab4:	83 70       	andi	r24, 0x03	; 3
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	09 f4       	brne	.+2      	; 0xabc <_Z4loopj+0x21e>
     aba:	88 c0       	rjmp	.+272    	; 0xbcc <_Z4loopj+0x32e>
     abc:	82 30       	cpi	r24, 0x02	; 2
     abe:	09 f0       	breq	.+2      	; 0xac2 <_Z4loopj+0x224>
     ac0:	fb c0       	rjmp	.+502    	; 0xcb8 <_Z4loopj+0x41a>
     ac2:	ee eb       	ldi	r30, 0xBE	; 190
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	21 85       	ldd	r18, Z+9	; 0x09
     ac8:	32 85       	ldd	r19, Z+10	; 0x0a
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     aca:	c3 84       	ldd	r12, Z+11	; 0x0b
     acc:	d4 84       	ldd	r13, Z+12	; 0x0c

	void shiftPlayerLeft (int shiftPositions) {
		int prevX = player.getX();
		int prevY = player.getY();

		int maxLeftMovement = (prevX - 1);
     ace:	b9 01       	movw	r22, r18
     ad0:	61 50       	subi	r22, 0x01	; 1
     ad2:	71 09       	sbc	r23, r1
		if(shiftPositions > maxLeftMovement) shiftPositions = maxLeftMovement;
     ad4:	16 16       	cp	r1, r22
     ad6:	17 06       	cpc	r1, r23
     ad8:	14 f0       	brlt	.+4      	; 0xade <_Z4loopj+0x240>
     ada:	cb 01       	movw	r24, r22
     adc:	02 c0       	rjmp	.+4      	; 0xae2 <_Z4loopj+0x244>
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	90 e0       	ldi	r25, 0x00	; 0

		movePlayer( prevX - shiftPositions, prevY);
     ae2:	d9 01       	movw	r26, r18
     ae4:	a8 1b       	sub	r26, r24
     ae6:	b9 0b       	sbc	r27, r25
     ae8:	cd 01       	movw	r24, r26
    int getX() const {
        return x;
    }

    void setX(int x) {
        Position::x = x;
     aea:	0f 2e       	mov	r0, r31
     aec:	fe eb       	ldi	r31, 0xBE	; 190
     aee:	ef 2e       	mov	r14, r31
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	ff 2e       	mov	r15, r31
     af4:	f0 2d       	mov	r31, r0
     af6:	f7 01       	movw	r30, r14
     af8:	b2 87       	std	Z+10, r27	; 0x0a
     afa:	a1 87       	std	Z+9, r26	; 0x09
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     afc:	d6 01       	movw	r26, r12
     afe:	aa 0f       	add	r26, r26
     b00:	bb 1f       	adc	r27, r27
     b02:	aa 0f       	add	r26, r26
     b04:	bb 1f       	adc	r27, r27
     b06:	aa 0f       	add	r26, r26
     b08:	bb 1f       	adc	r27, r27
     b0a:	8d 01       	movw	r16, r26
     b0c:	02 0f       	add	r16, r18
     b0e:	13 1f       	adc	r17, r19
     b10:	00 0f       	add	r16, r16
     b12:	11 1f       	adc	r17, r17
     b14:	01 56       	subi	r16, 0x61	; 97
     b16:	1e 4f       	sbci	r17, 0xFE	; 254
     b18:	f8 01       	movw	r30, r16
     b1a:	11 82       	std	Z+1, r1	; 0x01
     b1c:	10 82       	st	Z, r1
     b1e:	6a 0f       	add	r22, r26
     b20:	7b 1f       	adc	r23, r27
     b22:	66 0f       	add	r22, r22
     b24:	77 1f       	adc	r23, r23
     b26:	61 56       	subi	r22, 0x61	; 97
     b28:	7e 4f       	sbci	r23, 0xFE	; 254
     b2a:	fb 01       	movw	r30, r22
     b2c:	11 82       	std	Z+1, r1	; 0x01
     b2e:	10 82       	st	Z, r1
     b30:	b9 01       	movw	r22, r18
     b32:	6f 5f       	subi	r22, 0xFF	; 255
     b34:	7f 4f       	sbci	r23, 0xFF	; 255
     b36:	6a 0f       	add	r22, r26
     b38:	7b 1f       	adc	r23, r27
     b3a:	66 0f       	add	r22, r22
     b3c:	77 1f       	adc	r23, r23
     b3e:	61 56       	subi	r22, 0x61	; 97
     b40:	7e 4f       	sbci	r23, 0xFE	; 254
     b42:	fb 01       	movw	r30, r22
     b44:	11 82       	std	Z+1, r1	; 0x01
     b46:	10 82       	st	Z, r1

	void resetPlayerPosition(int x, int y) {
		resetIndexInBoard(x, y);
		resetIndexInBoard(x - 1, y);
		resetIndexInBoard(x + 1, y);
		resetIndexInBoard(x, y - 1);
     b48:	f6 01       	movw	r30, r12
     b4a:	31 97       	sbiw	r30, 0x01	; 1
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     b4c:	8f 01       	movw	r16, r30
     b4e:	00 0f       	add	r16, r16
     b50:	11 1f       	adc	r17, r17
     b52:	00 0f       	add	r16, r16
     b54:	11 1f       	adc	r17, r17
     b56:	00 0f       	add	r16, r16
     b58:	11 1f       	adc	r17, r17
     b5a:	20 0f       	add	r18, r16
     b5c:	31 1f       	adc	r19, r17
     b5e:	22 0f       	add	r18, r18
     b60:	33 1f       	adc	r19, r19
     b62:	21 56       	subi	r18, 0x61	; 97
     b64:	3e 4f       	sbci	r19, 0xFE	; 254
     b66:	f9 01       	movw	r30, r18
     b68:	11 82       	std	Z+1, r1	; 0x01
     b6a:	10 82       	st	Z, r1
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     b6c:	bd 01       	movw	r22, r26
     b6e:	68 0f       	add	r22, r24
     b70:	79 1f       	adc	r23, r25
     b72:	66 0f       	add	r22, r22
     b74:	77 1f       	adc	r23, r23
     b76:	61 56       	subi	r22, 0x61	; 97
     b78:	7e 4f       	sbci	r23, 0xFE	; 254
     b7a:	23 e0       	ldi	r18, 0x03	; 3
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	fb 01       	movw	r30, r22
     b80:	31 83       	std	Z+1, r19	; 0x01
     b82:	20 83       	st	Z, r18
     b84:	bc 01       	movw	r22, r24
     b86:	61 50       	subi	r22, 0x01	; 1
     b88:	71 09       	sbc	r23, r1
     b8a:	6a 0f       	add	r22, r26
     b8c:	7b 1f       	adc	r23, r27
     b8e:	66 0f       	add	r22, r22
     b90:	77 1f       	adc	r23, r23
     b92:	61 56       	subi	r22, 0x61	; 97
     b94:	7e 4f       	sbci	r23, 0xFE	; 254
     b96:	fb 01       	movw	r30, r22
     b98:	31 83       	std	Z+1, r19	; 0x01
     b9a:	20 83       	st	Z, r18
     b9c:	bc 01       	movw	r22, r24
     b9e:	6f 5f       	subi	r22, 0xFF	; 255
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	a6 0f       	add	r26, r22
     ba4:	b7 1f       	adc	r27, r23
     ba6:	aa 0f       	add	r26, r26
     ba8:	bb 1f       	adc	r27, r27
     baa:	a1 56       	subi	r26, 0x61	; 97
     bac:	be 4f       	sbci	r27, 0xFE	; 254
     bae:	2d 93       	st	X+, r18
     bb0:	3c 93       	st	X, r19
     bb2:	f8 01       	movw	r30, r16
     bb4:	e8 0f       	add	r30, r24
     bb6:	f9 1f       	adc	r31, r25
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	e1 56       	subi	r30, 0x61	; 97
     bbe:	fe 4f       	sbci	r31, 0xFE	; 254
     bc0:	31 83       	std	Z+1, r19	; 0x01
     bc2:	20 83       	st	Z, r18
     bc4:	d7 01       	movw	r26, r14
     bc6:	1d 96       	adiw	r26, 0x0d	; 13
     bc8:	1c 92       	st	X, r1
     bca:	76 c0       	rjmp	.+236    	; 0xcb8 <_Z4loopj+0x41a>
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     bcc:	ee eb       	ldi	r30, 0xBE	; 190
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	21 85       	ldd	r18, Z+9	; 0x09
     bd2:	32 85       	ldd	r19, Z+10	; 0x0a
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     bd4:	63 85       	ldd	r22, Z+11	; 0x0b
     bd6:	74 85       	ldd	r23, Z+12	; 0x0c

	void shiftPlayerRight (int shiftPositions) {
		int prevX = player.getX();
		int prevY = player.getY();

		int maxRightMovement = (BOARD_WIDTH - prevX - 2);
     bd8:	86 e0       	ldi	r24, 0x06	; 6
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	82 1b       	sub	r24, r18
     bde:	93 0b       	sbc	r25, r19
		if(shiftPositions > maxRightMovement) shiftPositions = maxRightMovement;
     be0:	18 16       	cp	r1, r24
     be2:	19 06       	cpc	r1, r25
     be4:	14 f4       	brge	.+4      	; 0xbea <_Z4loopj+0x34c>
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	90 e0       	ldi	r25, 0x00	; 0

		movePlayer( prevX + shiftPositions, prevY);
     bea:	82 0f       	add	r24, r18
     bec:	93 1f       	adc	r25, r19
    int getX() const {
        return x;
    }

    void setX(int x) {
        Position::x = x;
     bee:	0e eb       	ldi	r16, 0xBE	; 190
     bf0:	10 e0       	ldi	r17, 0x00	; 0
     bf2:	f8 01       	movw	r30, r16
     bf4:	92 87       	std	Z+10, r25	; 0x0a
     bf6:	81 87       	std	Z+9, r24	; 0x09
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     bf8:	db 01       	movw	r26, r22
     bfa:	aa 0f       	add	r26, r26
     bfc:	bb 1f       	adc	r27, r27
     bfe:	aa 0f       	add	r26, r26
     c00:	bb 1f       	adc	r27, r27
     c02:	aa 0f       	add	r26, r26
     c04:	bb 1f       	adc	r27, r27
     c06:	fd 01       	movw	r30, r26
     c08:	e2 0f       	add	r30, r18
     c0a:	f3 1f       	adc	r31, r19
     c0c:	ee 0f       	add	r30, r30
     c0e:	ff 1f       	adc	r31, r31
     c10:	e1 56       	subi	r30, 0x61	; 97
     c12:	fe 4f       	sbci	r31, 0xFE	; 254
     c14:	11 82       	std	Z+1, r1	; 0x01
     c16:	10 82       	st	Z, r1
     c18:	f9 01       	movw	r30, r18
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	ea 0f       	add	r30, r26
     c1e:	fb 1f       	adc	r31, r27
     c20:	ee 0f       	add	r30, r30
     c22:	ff 1f       	adc	r31, r31
     c24:	e1 56       	subi	r30, 0x61	; 97
     c26:	fe 4f       	sbci	r31, 0xFE	; 254
     c28:	11 82       	std	Z+1, r1	; 0x01
     c2a:	10 82       	st	Z, r1
     c2c:	f9 01       	movw	r30, r18
     c2e:	31 96       	adiw	r30, 0x01	; 1
     c30:	ea 0f       	add	r30, r26
     c32:	fb 1f       	adc	r31, r27
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	e1 56       	subi	r30, 0x61	; 97
     c3a:	fe 4f       	sbci	r31, 0xFE	; 254
     c3c:	11 82       	std	Z+1, r1	; 0x01
     c3e:	10 82       	st	Z, r1

	void resetPlayerPosition(int x, int y) {
		resetIndexInBoard(x, y);
		resetIndexInBoard(x - 1, y);
		resetIndexInBoard(x + 1, y);
		resetIndexInBoard(x, y - 1);
     c40:	61 50       	subi	r22, 0x01	; 1
     c42:	71 09       	sbc	r23, r1
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     c44:	66 0f       	add	r22, r22
     c46:	77 1f       	adc	r23, r23
     c48:	66 0f       	add	r22, r22
     c4a:	77 1f       	adc	r23, r23
     c4c:	66 0f       	add	r22, r22
     c4e:	77 1f       	adc	r23, r23
     c50:	fb 01       	movw	r30, r22
     c52:	e2 0f       	add	r30, r18
     c54:	f3 1f       	adc	r31, r19
     c56:	ee 0f       	add	r30, r30
     c58:	ff 1f       	adc	r31, r31
     c5a:	e1 56       	subi	r30, 0x61	; 97
     c5c:	fe 4f       	sbci	r31, 0xFE	; 254
     c5e:	11 82       	std	Z+1, r1	; 0x01
     c60:	10 82       	st	Z, r1
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     c62:	fd 01       	movw	r30, r26
     c64:	e8 0f       	add	r30, r24
     c66:	f9 1f       	adc	r31, r25
     c68:	ee 0f       	add	r30, r30
     c6a:	ff 1f       	adc	r31, r31
     c6c:	e1 56       	subi	r30, 0x61	; 97
     c6e:	fe 4f       	sbci	r31, 0xFE	; 254
     c70:	23 e0       	ldi	r18, 0x03	; 3
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	31 83       	std	Z+1, r19	; 0x01
     c76:	20 83       	st	Z, r18
     c78:	fc 01       	movw	r30, r24
     c7a:	31 97       	sbiw	r30, 0x01	; 1
     c7c:	ea 0f       	add	r30, r26
     c7e:	fb 1f       	adc	r31, r27
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	e1 56       	subi	r30, 0x61	; 97
     c86:	fe 4f       	sbci	r31, 0xFE	; 254
     c88:	31 83       	std	Z+1, r19	; 0x01
     c8a:	20 83       	st	Z, r18
     c8c:	fc 01       	movw	r30, r24
     c8e:	31 96       	adiw	r30, 0x01	; 1
     c90:	ea 0f       	add	r30, r26
     c92:	fb 1f       	adc	r31, r27
     c94:	ee 0f       	add	r30, r30
     c96:	ff 1f       	adc	r31, r31
     c98:	e1 56       	subi	r30, 0x61	; 97
     c9a:	fe 4f       	sbci	r31, 0xFE	; 254
     c9c:	31 83       	std	Z+1, r19	; 0x01
     c9e:	20 83       	st	Z, r18
     ca0:	fb 01       	movw	r30, r22
     ca2:	e8 0f       	add	r30, r24
     ca4:	f9 1f       	adc	r31, r25
     ca6:	ee 0f       	add	r30, r30
     ca8:	ff 1f       	adc	r31, r31
     caa:	e1 56       	subi	r30, 0x61	; 97
     cac:	fe 4f       	sbci	r31, 0xFE	; 254
     cae:	31 83       	std	Z+1, r19	; 0x01
     cb0:	20 83       	st	Z, r18
     cb2:	d8 01       	movw	r26, r16
     cb4:	1d 96       	adiw	r26, 0x0d	; 13
     cb6:	1c 92       	st	X, r1
	}


	void bulletPoll() {

		if(loopNo % BULLET_SHOOT_DELAY == 0) {
     cb8:	9a 01       	movw	r18, r20
     cba:	36 95       	lsr	r19
     cbc:	27 95       	ror	r18
     cbe:	36 95       	lsr	r19
     cc0:	27 95       	ror	r18
     cc2:	a1 eb       	ldi	r26, 0xB1	; 177
     cc4:	bb e2       	ldi	r27, 0x2B	; 43
     cc6:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__umulhisi3>
     cca:	00 24       	eor	r0, r0
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	00 1c       	adc	r0, r0
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	00 1c       	adc	r0, r0
     cd8:	89 2f       	mov	r24, r25
     cda:	90 2d       	mov	r25, r0
     cdc:	6c ed       	ldi	r22, 0xDC	; 220
     cde:	75 e0       	ldi	r23, 0x05	; 5
     ce0:	86 9f       	mul	r24, r22
     ce2:	90 01       	movw	r18, r0
     ce4:	87 9f       	mul	r24, r23
     ce6:	30 0d       	add	r19, r0
     ce8:	96 9f       	mul	r25, r22
     cea:	30 0d       	add	r19, r0
     cec:	11 24       	eor	r1, r1
     cee:	42 17       	cp	r20, r18
     cf0:	53 07       	cpc	r21, r19
     cf2:	21 f4       	brne	.+8      	; 0xcfc <_Z4loopj+0x45e>
			bulletReadyToShoot = true;
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__data_end+0x8>
     cfa:	05 c0       	rjmp	.+10     	; 0xd06 <_Z4loopj+0x468>
		}

		if(bulletReadyToShoot && HardwareController::isShootButtonPressed()) {
     cfc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__data_end+0x8>
     d00:	88 23       	and	r24, r24
     d02:	09 f4       	brne	.+2      	; 0xd06 <_Z4loopj+0x468>
     d04:	4b c0       	rjmp	.+150    	; 0xd9c <_Z4loopj+0x4fe>
		Lcd4_Set_Cursor(2, 0);
		Lcd4_Write_String(lower);
	}

	static bool isShootButtonPressed() {
		char res = PINA;
     d06:	89 b3       	in	r24, 0x19	; 25
     d08:	ca 99       	sbic	0x19, 2	; 25
     d0a:	0c c2       	rjmp	.+1048   	; 0x1124 <_Z4loopj+0x886>
     d0c:	47 c0       	rjmp	.+142    	; 0xd9c <_Z4loopj+0x4fe>
	void shootNewBullet() {
		

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
			if(bulletPool[i].IsAlive() == false) {
     d0e:	20 81       	ld	r18, Z
     d10:	21 11       	cpse	r18, r1
     d12:	3e c0       	rjmp	.+124    	; 0xd90 <_Z4loopj+0x4f2>
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <_Z4loopj+0x47c>
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
				activeBulletForShooting(bulletPool[i]);
     d1a:	fc 01       	movw	r30, r24
     d1c:	ee 0f       	add	r30, r30
     d1e:	ff 1f       	adc	r31, r31
     d20:	ee 0f       	add	r30, r30
     d22:	ff 1f       	adc	r31, r31
     d24:	ee 0f       	add	r30, r30
     d26:	ff 1f       	adc	r31, r31
     d28:	8e 0f       	add	r24, r30
     d2a:	9f 1f       	adc	r25, r31
     d2c:	9c 01       	movw	r18, r24
     d2e:	25 51       	subi	r18, 0x15	; 21
     d30:	3f 4f       	sbci	r19, 0xFF	; 255
    unsigned int getRespawnTimeCounter() const {
        return respawnTimeCounter;
    }

    void setRespawnTimeCounter(unsigned int respawnTimeCounter) {
        NewBullet::respawnTimeCounter = respawnTimeCounter;
     d32:	ae eb       	ldi	r26, 0xBE	; 190
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	fc 01       	movw	r30, r24
     d38:	e2 54       	subi	r30, 0x42	; 66
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	15 aa       	std	Z+53, r1	; 0x35
     d3e:	14 aa       	std	Z+52, r1	; 0x34
    unsigned int getMoveTimeCounter() const {
        return moveTimeCounter;
    }

    void setMoveTimeCounter(unsigned int spawnTimerCounter) {
        NewBullet::moveTimeCounter = spawnTimerCounter;
     d40:	13 aa       	std	Z+51, r1	; 0x33
     d42:	12 aa       	std	Z+50, r1	; 0x32
    bool IsAlive() const {
        return isActiveOnBoard;
    }

    void setIsAlive(bool isAlive) {
        NewBullet::isActiveOnBoard = isAlive;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	81 ab       	std	Z+49, r24	; 0x31
	void activeBulletForShooting(NewBullet &newBullet) {
		
			newBullet.setRespawnTimeCounter(0);
			newBullet.setMoveTimeCounter(0);
	        newBullet.setIsAlive(true);
	        newBullet.setBulletPosition(player.getX(), player.getY() - 2);
     d48:	1b 96       	adiw	r26, 0x0b	; 11
     d4a:	ed 91       	ld	r30, X+
     d4c:	fc 91       	ld	r31, X
     d4e:	1c 97       	sbiw	r26, 0x0c	; 12
     d50:	af 01       	movw	r20, r30
     d52:	42 50       	subi	r20, 0x02	; 2
     d54:	51 09       	sbc	r21, r1
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     d56:	19 96       	adiw	r26, 0x09	; 9
     d58:	8d 91       	ld	r24, X+
     d5a:	9c 91       	ld	r25, X
     d5c:	1a 97       	sbiw	r26, 0x0a	; 10
    }

    void setX(int x) {
        Position::x = x;
     d5e:	f9 01       	movw	r30, r18
     d60:	91 83       	std	Z+1, r25	; 0x01
     d62:	80 83       	st	Z, r24
    int getY() const {
        return y;
    }

    void setY(int y) {
        Position::y = y;
     d64:	53 83       	std	Z+3, r21	; 0x03
     d66:	42 83       	std	Z+2, r20	; 0x02
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     d68:	fa 01       	movw	r30, r20
     d6a:	ee 0f       	add	r30, r30
     d6c:	ff 1f       	adc	r31, r31
     d6e:	ee 0f       	add	r30, r30
     d70:	ff 1f       	adc	r31, r31
     d72:	ee 0f       	add	r30, r30
     d74:	ff 1f       	adc	r31, r31
     d76:	e8 0f       	add	r30, r24
     d78:	f9 1f       	adc	r31, r25
     d7a:	ee 0f       	add	r30, r30
     d7c:	ff 1f       	adc	r31, r31
     d7e:	e1 56       	subi	r30, 0x61	; 97
     d80:	fe 4f       	sbci	r31, 0xFE	; 254
     d82:	83 e0       	ldi	r24, 0x03	; 3
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	91 83       	std	Z+1, r25	; 0x01
     d88:	80 83       	st	Z, r24

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
			if(bulletPool[i].IsAlive() == false) {
				activeBulletForShooting(bulletPool[i]);
				bulletReadyToShoot = false;
     d8a:	18 96       	adiw	r26, 0x08	; 8
     d8c:	1c 92       	st	X, r1
     d8e:	06 c0       	rjmp	.+12     	; 0xd9c <_Z4loopj+0x4fe>

	void shootNewBullet() {
		

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	39 96       	adiw	r30, 0x09	; 9
     d94:	84 31       	cpi	r24, 0x14	; 20
     d96:	91 05       	cpc	r25, r1
     d98:	09 f0       	breq	.+2      	; 0xd9c <_Z4loopj+0x4fe>
     d9a:	b9 cf       	rjmp	.-142    	; 0xd0e <_Z4loopj+0x470>
     d9c:	0f 2e       	mov	r0, r31
     d9e:	fb ee       	ldi	r31, 0xEB	; 235
     da0:	8f 2e       	mov	r8, r31
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	9f 2e       	mov	r9, r31
     da6:	f0 2d       	mov	r31, r0
     da8:	0f e9       	ldi	r16, 0x9F	; 159
     daa:	11 e0       	ldi	r17, 0x01	; 1
			if(bulletPool[i].IsAlive() == false) {
     dac:	f4 01       	movw	r30, r8
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     dae:	0f 2e       	mov	r0, r31
     db0:	f3 e0       	ldi	r31, 0x03	; 3
     db2:	cf 2e       	mov	r12, r31
     db4:	d1 2c       	mov	r13, r1
     db6:	f0 2d       	mov	r31, r0
            int newY = p.getY() - 1;

            if(newY == -1) {
				if(newBullet.IsAlive()) resetIndexInBoard(prevX, prevY);
                newBullet.setIsAlive(false);
                newY = BOARD_HEIGHT - 1;
     db8:	0f 2e       	mov	r0, r31
     dba:	ff e0       	ldi	r31, 0x0F	; 15
     dbc:	ef 2e       	mov	r14, r31
     dbe:	f0 2d       	mov	r31, r0
     dc0:	f1 2c       	mov	r15, r1
     dc2:	9f 01       	movw	r18, r30
		//newBullet.setRespawnTimeCounter( newBullet.getRespawnTimeCounter() + 1);


        unsigned int moveTime= BULLET_MOVE_TIME;
        unsigned int currentTime = newBullet.getMoveTimeCounter();
        newBullet.setMoveTimeCounter(currentTime + 1);
     dc4:	85 81       	ldd	r24, Z+5	; 0x05
     dc6:	96 81       	ldd	r25, Z+6	; 0x06
     dc8:	01 96       	adiw	r24, 0x01	; 1
    unsigned int getMoveTimeCounter() const {
        return moveTimeCounter;
    }

    void setMoveTimeCounter(unsigned int spawnTimerCounter) {
        NewBullet::moveTimeCounter = spawnTimerCounter;
     dca:	96 83       	std	Z+6, r25	; 0x06
     dcc:	85 83       	std	Z+5, r24	; 0x05

        if (newBullet.getMoveTimeCounter() >= moveTime) {
     dce:	86 39       	cpi	r24, 0x96	; 150
     dd0:	91 05       	cpc	r25, r1
     dd2:	08 f4       	brcc	.+2      	; 0xdd6 <_Z4loopj+0x538>
     dd4:	57 c0       	rjmp	.+174    	; 0xe84 <_Z4loopj+0x5e6>
    int getY() const {
        return bulletPosition.getY();
    }

    const Position getBulletPosition() const {
        return bulletPosition;
     dd6:	40 80       	ld	r4, Z
     dd8:	51 80       	ldd	r5, Z+1	; 0x01
     dda:	62 80       	ldd	r6, Z+2	; 0x02
     ddc:	73 80       	ldd	r7, Z+3	; 0x03
            Position p = newBullet.getBulletPosition();
            int prevX = p.getX(),prevY = p.getY();

            int newX = p.getX();
            int newY = p.getY() - 1;
     dde:	a3 01       	movw	r20, r6
     de0:	41 50       	subi	r20, 0x01	; 1
     de2:	51 09       	sbc	r21, r1
     de4:	c0 f4       	brcc	.+48     	; 0xe16 <_Z4loopj+0x578>

            if(newY == -1) {
				if(newBullet.IsAlive()) resetIndexInBoard(prevX, prevY);
     de6:	44 81       	ldd	r20, Z+4	; 0x04
     de8:	44 23       	and	r20, r20
     dea:	81 f0       	breq	.+32     	; 0xe0c <_Z4loopj+0x56e>
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     dec:	a3 01       	movw	r20, r6
     dee:	44 0f       	add	r20, r20
     df0:	55 1f       	adc	r21, r21
     df2:	44 0f       	add	r20, r20
     df4:	55 1f       	adc	r21, r21
     df6:	44 0f       	add	r20, r20
     df8:	55 1f       	adc	r21, r21
     dfa:	44 0d       	add	r20, r4
     dfc:	55 1d       	adc	r21, r5
     dfe:	44 0f       	add	r20, r20
     e00:	55 1f       	adc	r21, r21
     e02:	41 56       	subi	r20, 0x61	; 97
     e04:	5e 4f       	sbci	r21, 0xFE	; 254
     e06:	da 01       	movw	r26, r20
     e08:	1d 92       	st	X+, r1
     e0a:	1c 92       	st	X, r1
    bool IsAlive() const {
        return isActiveOnBoard;
    }

    void setIsAlive(bool isAlive) {
        NewBullet::isActiveOnBoard = isAlive;
     e0c:	d9 01       	movw	r26, r18
     e0e:	14 96       	adiw	r26, 0x04	; 4
     e10:	1c 92       	st	X, r1
            int newY = p.getY() - 1;

            if(newY == -1) {
				if(newBullet.IsAlive()) resetIndexInBoard(prevX, prevY);
                newBullet.setIsAlive(false);
                newY = BOARD_HEIGHT - 1;
     e12:	4e 2d       	mov	r20, r14
     e14:	5f 2d       	mov	r21, r15
    int getX() const {
        return x;
    }

    void setX(int x) {
        Position::x = x;
     e16:	d9 01       	movw	r26, r18
     e18:	11 96       	adiw	r26, 0x01	; 1
     e1a:	5c 92       	st	X, r5
     e1c:	4e 92       	st	-X, r4
    int getY() const {
        return y;
    }

    void setY(int y) {
        Position::y = y;
     e1e:	13 96       	adiw	r26, 0x03	; 3
     e20:	5c 93       	st	X, r21
     e22:	4e 93       	st	-X, r20
     e24:	12 97       	sbiw	r26, 0x02	; 2
    unsigned int getMoveTimeCounter() const {
        return moveTimeCounter;
    }

    void setMoveTimeCounter(unsigned int spawnTimerCounter) {
        NewBullet::moveTimeCounter = spawnTimerCounter;
     e26:	16 96       	adiw	r26, 0x06	; 6
     e28:	1c 92       	st	X, r1
     e2a:	1e 92       	st	-X, r1
     e2c:	15 97       	sbiw	r26, 0x05	; 5
            newBullet.setBulletPosition(newX, newY);

            ////printStringToConsole("Enemy "+to_string(enemyNo)+"("+to_string(enemy.getX())+","+to_string(enemy.getY())+")");
            newBullet.setMoveTimeCounter(0);

            if(newBullet.IsAlive()) resetIndexInBoard(prevX, prevY);
     e2e:	14 96       	adiw	r26, 0x04	; 4
     e30:	4c 91       	ld	r20, X
     e32:	44 23       	and	r20, r20
     e34:	39 f1       	breq	.+78     	; 0xe84 <_Z4loopj+0x5e6>
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     e36:	a3 01       	movw	r20, r6
     e38:	44 0f       	add	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	44 0f       	add	r20, r20
     e3e:	55 1f       	adc	r21, r21
     e40:	44 0f       	add	r20, r20
     e42:	55 1f       	adc	r21, r21
     e44:	c2 01       	movw	r24, r4
     e46:	84 0f       	add	r24, r20
     e48:	95 1f       	adc	r25, r21
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	dc 01       	movw	r26, r24
     e50:	a1 56       	subi	r26, 0x61	; 97
     e52:	be 4f       	sbci	r27, 0xFE	; 254
     e54:	1d 92       	st	X+, r1
     e56:	1c 92       	st	X, r1
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     e58:	d9 01       	movw	r26, r18
     e5a:	12 96       	adiw	r26, 0x02	; 2
     e5c:	4d 91       	ld	r20, X+
     e5e:	5c 91       	ld	r21, X
     e60:	13 97       	sbiw	r26, 0x03	; 3
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     e62:	8d 91       	ld	r24, X+
     e64:	9c 91       	ld	r25, X
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     e66:	da 01       	movw	r26, r20
     e68:	aa 0f       	add	r26, r26
     e6a:	bb 1f       	adc	r27, r27
     e6c:	aa 0f       	add	r26, r26
     e6e:	bb 1f       	adc	r27, r27
     e70:	aa 0f       	add	r26, r26
     e72:	bb 1f       	adc	r27, r27
     e74:	a8 0f       	add	r26, r24
     e76:	b9 1f       	adc	r27, r25
     e78:	aa 0f       	add	r26, r26
     e7a:	bb 1f       	adc	r27, r27
     e7c:	a1 56       	subi	r26, 0x61	; 97
     e7e:	be 4f       	sbci	r27, 0xFE	; 254
     e80:	cd 92       	st	X+, r12
     e82:	dc 92       	st	X, r13
     e84:	39 96       	adiw	r30, 0x09	; 9
			// updateNewBullet(newBullet1);
			// updateNewBullet(newBullet2);
			// updateNewBullet(newBullet3);
			// updateNewBullet(newBullet4);

		for(int i = 0; i < BULLET_POOL_SIZE; i++) {
     e86:	e0 17       	cp	r30, r16
     e88:	f1 07       	cpc	r31, r17
     e8a:	09 f0       	breq	.+2      	; 0xe8e <_Z4loopj+0x5f0>
     e8c:	9a cf       	rjmp	.-204    	; 0xdc2 <_Z4loopj+0x524>
	}

	// for all objects, check for collision, update collision count and reset boards
	void updateBasedOnCollisions() {

		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
     e8e:	ee eb       	ldi	r30, 0xBE	; 190
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	20 81       	ld	r18, Z
     e94:	31 81       	ldd	r19, Z+1	; 0x01
     e96:	3c 8f       	std	Y+28, r19	; 0x1c
     e98:	2b 8f       	std	Y+27, r18	; 0x1b
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
     e9a:	42 81       	ldd	r20, Z+2	; 0x02
     e9c:	53 81       	ldd	r21, Z+3	; 0x03
     e9e:	5a 8f       	std	Y+26, r21	; 0x1a
     ea0:	49 8f       	std	Y+25, r20	; 0x19
     ea2:	9f 01       	movw	r18, r30
	
		// checking for bullet and enemy collisions		
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
			for (unsigned int bulletCounter = 0; bulletCounter < BULLET_POOL_SIZE; bulletCounter++) {
				if (doesCollide(enemyPool[enemyCounter], bulletPool[bulletCounter])) {
					enemyBulletCollisionCounter++;
     ea4:	af 01       	movw	r20, r30

	// for all objects, check for collision, update collision count and reset boards
	void updateBasedOnCollisions() {

		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
     ea6:	f4 01       	movw	r30, r8
     ea8:	19 01       	movw	r2, r18
	}

	
	bool doesCollide(const Enemy &enemy, const NewBullet &bullet) {
		
		if (!enemy.isAlive() || !bullet.IsAlive())
     eaa:	d9 01       	movw	r26, r18
     eac:	52 96       	adiw	r26, 0x12	; 18
     eae:	8c 91       	ld	r24, X
     eb0:	88 23       	and	r24, r24
     eb2:	b9 f1       	breq	.+110    	; 0xf22 <_Z4loopj+0x684>
     eb4:	84 81       	ldd	r24, Z+4	; 0x04
     eb6:	88 23       	and	r24, r24
     eb8:	a1 f1       	breq	.+104    	; 0xf22 <_Z4loopj+0x684>
    int getY() const {
        return bulletPosition.getY();
    }

    const Position getBulletPosition() const {
        return bulletPosition;
     eba:	c0 80       	ld	r12, Z
     ebc:	d1 80       	ldd	r13, Z+1	; 0x01
     ebe:	e2 80       	ldd	r14, Z+2	; 0x02
     ec0:	f3 80       	ldd	r15, Z+3	; 0x03
    int getY() const {
        return enemyPosition.getY();
    }

    const Position getEnemyPosition() const {
        return enemyPosition;
     ec2:	d1 01       	movw	r26, r2
     ec4:	1e 96       	adiw	r26, 0x0e	; 14
     ec6:	4d 90       	ld	r4, X+
     ec8:	5d 90       	ld	r5, X+
     eca:	6d 90       	ld	r6, X+
     ecc:	7c 90       	ld	r7, X
     ece:	51 97       	sbiw	r26, 0x11	; 17
    void setY(int y) {
        Position::y = y;
    }

    bool operator==(const Position other) const {
        return x == other.x && y == other.y;
     ed0:	c4 14       	cp	r12, r4
     ed2:	d5 04       	cpc	r13, r5
     ed4:	31 f5       	brne	.+76     	; 0xf22 <_Z4loopj+0x684>
     ed6:	e6 14       	cp	r14, r6
     ed8:	f7 04       	cpc	r15, r7
     eda:	19 f5       	brne	.+70     	; 0xf22 <_Z4loopj+0x684>
	
		// checking for bullet and enemy collisions		
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
			for (unsigned int bulletCounter = 0; bulletCounter < BULLET_POOL_SIZE; bulletCounter++) {
				if (doesCollide(enemyPool[enemyCounter], bulletPool[bulletCounter])) {
					enemyBulletCollisionCounter++;
     edc:	da 01       	movw	r26, r20
     ede:	8d 91       	ld	r24, X+
     ee0:	9c 91       	ld	r25, X
     ee2:	11 97       	sbiw	r26, 0x01	; 1
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	8d 93       	st	X+, r24
     ee8:	9c 93       	st	X, r25
     eea:	d1 01       	movw	r26, r2
     eec:	1e 96       	adiw	r26, 0x0e	; 14
     eee:	cd 90       	ld	r12, X+
     ef0:	dd 90       	ld	r13, X+
     ef2:	ed 90       	ld	r14, X+
     ef4:	fc 90       	ld	r15, X
     ef6:	51 97       	sbiw	r26, 0x11	; 17
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     ef8:	c7 01       	movw	r24, r14
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	c8 0e       	add	r12, r24
     f08:	d9 1e       	adc	r13, r25
     f0a:	c6 01       	movw	r24, r12
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	81 56       	subi	r24, 0x61	; 97
     f12:	9e 4f       	sbci	r25, 0xFE	; 254
     f14:	dc 01       	movw	r26, r24
     f16:	1d 92       	st	X+, r1
     f18:	1c 92       	st	X, r1
    bool IsAlive() const {
        return isActiveOnBoard;
    }

    void setIsAlive(bool isAlive) {
        NewBullet::isActiveOnBoard = isAlive;
     f1a:	14 82       	std	Z+4, r1	; 0x04
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
     f1c:	d1 01       	movw	r26, r2
     f1e:	52 96       	adiw	r26, 0x12	; 18
     f20:	1c 92       	st	X, r1
     f22:	39 96       	adiw	r30, 0x09	; 9
		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
	
		// checking for bullet and enemy collisions		
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
			for (unsigned int bulletCounter = 0; bulletCounter < BULLET_POOL_SIZE; bulletCounter++) {
     f24:	e0 17       	cp	r30, r16
     f26:	f1 07       	cpc	r31, r17
     f28:	09 f0       	breq	.+2      	; 0xf2c <_Z4loopj+0x68e>
     f2a:	bf cf       	rjmp	.-130    	; 0xeaa <_Z4loopj+0x60c>
     f2c:	27 5f       	subi	r18, 0xF7	; 247
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255

		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
	
		// checking for bullet and enemy collisions		
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	29 3d       	cpi	r18, 0xD9	; 217
     f34:	3b 07       	cpc	r19, r27
     f36:	09 f0       	breq	.+2      	; 0xf3a <_Z4loopj+0x69c>
     f38:	b6 cf       	rjmp	.-148    	; 0xea6 <_Z4loopj+0x608>
		if (!enemy.isAlive()) return false;
		
		// dx and dy contains the change in x and y co-ordinate from origin of player position to get all the 
		// points needed by player.
		const int dx[] = {0, 0, -1, 1};
		const int dy[] = {0, -1, 0, 0};
     f3a:	22 24       	eor	r2, r2
     f3c:	2a 94       	dec	r2
     f3e:	32 2c       	mov	r3, r2
    int getY() const {
        return playerPosition.getY();
    }

    const Position getPlayerPosition() const {
        return playerPosition;
     f40:	0f 2e       	mov	r0, r31
     f42:	fe eb       	ldi	r31, 0xBE	; 190
     f44:	4f 2e       	mov	r4, r31
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	5f 2e       	mov	r5, r31
     f4a:	f0 2d       	mov	r31, r0
     f4c:	4e 01       	movw	r8, r28
     f4e:	e9 e1       	ldi	r30, 0x19	; 25
     f50:	8e 0e       	add	r8, r30
     f52:	91 1c       	adc	r9, r1
     f54:	65 01       	movw	r12, r10
		return false;
	}


	bool doesCollide(const Enemy &enemy) {
		if (!enemy.isAlive()) return false;
     f56:	d5 01       	movw	r26, r10
     f58:	52 96       	adiw	r26, 0x12	; 18
     f5a:	8c 91       	ld	r24, X
     f5c:	88 23       	and	r24, r24
     f5e:	b9 f1       	breq	.+110    	; 0xfce <_Z4loopj+0x730>
		
		// dx and dy contains the change in x and y co-ordinate from origin of player position to get all the 
		// points needed by player.
		const int dx[] = {0, 0, -1, 1};
     f60:	88 e0       	ldi	r24, 0x08	; 8
     f62:	ea e6       	ldi	r30, 0x6A	; 106
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	de 01       	movw	r26, r28
     f68:	51 96       	adiw	r26, 0x11	; 17
     f6a:	01 90       	ld	r0, Z+
     f6c:	0d 92       	st	X+, r0
     f6e:	8a 95       	dec	r24
     f70:	e1 f7       	brne	.-8      	; 0xf6a <_Z4loopj+0x6cc>
		const int dy[] = {0, -1, 0, 0};
     f72:	1a 82       	std	Y+2, r1	; 0x02
     f74:	19 82       	std	Y+1, r1	; 0x01
     f76:	3c 82       	std	Y+4, r3	; 0x04
     f78:	2b 82       	std	Y+3, r2	; 0x03
     f7a:	1e 82       	std	Y+6, r1	; 0x06
     f7c:	1d 82       	std	Y+5, r1	; 0x05
     f7e:	18 86       	std	Y+8, r1	; 0x08
     f80:	1f 82       	std	Y+7, r1	; 0x07
     f82:	f2 01       	movw	r30, r4
     f84:	81 85       	ldd	r24, Z+9	; 0x09
     f86:	92 85       	ldd	r25, Z+10	; 0x0a
     f88:	a3 85       	ldd	r26, Z+11	; 0x0b
     f8a:	b4 85       	ldd	r27, Z+12	; 0x0c
     f8c:	ac 01       	movw	r20, r24
     f8e:	bd 01       	movw	r22, r26
    int getY() const {
        return enemyPosition.getY();
    }

    const Position getEnemyPosition() const {
        return enemyPosition;
     f90:	f5 01       	movw	r30, r10
     f92:	86 85       	ldd	r24, Z+14	; 0x0e
     f94:	97 85       	ldd	r25, Z+15	; 0x0f
     f96:	a0 89       	ldd	r26, Z+16	; 0x10
     f98:	b1 89       	ldd	r27, Z+17	; 0x11
     f9a:	9c 01       	movw	r18, r24
     f9c:	7d 01       	movw	r14, r26
     f9e:	fe 01       	movw	r30, r28
     fa0:	71 96       	adiw	r30, 0x11	; 17
     fa2:	de 01       	movw	r26, r28
     fa4:	11 96       	adiw	r26, 0x01	; 1
			
		const Position player_pos = player.getPlayerPosition();
		const Position enemy_pos = enemy.getEnemyPosition();
			
		for (int i = 0; i < 4; i++) {
			if (enemy_pos.getX() == player_pos.getX()+dx[i] && enemy_pos.getY() == player_pos.getY()+dy[i]) {
     fa6:	81 91       	ld	r24, Z+
     fa8:	91 91       	ld	r25, Z+
     faa:	84 0f       	add	r24, r20
     fac:	95 1f       	adc	r25, r21
     fae:	82 17       	cp	r24, r18
     fb0:	93 07       	cpc	r25, r19
     fb2:	49 f4       	brne	.+18     	; 0xfc6 <_Z4loopj+0x728>
     fb4:	8d 91       	ld	r24, X+
     fb6:	9c 91       	ld	r25, X
     fb8:	11 97       	sbiw	r26, 0x01	; 1
     fba:	86 0f       	add	r24, r22
     fbc:	97 1f       	adc	r25, r23
     fbe:	8e 15       	cp	r24, r14
     fc0:	9f 05       	cpc	r25, r15
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <_Z4loopj+0x728>
     fc4:	b9 c0       	rjmp	.+370    	; 0x1138 <_Z4loopj+0x89a>
     fc6:	12 96       	adiw	r26, 0x02	; 2
		const int dy[] = {0, -1, 0, 0};
			
		const Position player_pos = player.getPlayerPosition();
		const Position enemy_pos = enemy.getEnemyPosition();
			
		for (int i = 0; i < 4; i++) {
     fc8:	e8 15       	cp	r30, r8
     fca:	f9 05       	cpc	r31, r9
     fcc:	61 f7       	brne	.-40     	; 0xfa6 <_Z4loopj+0x708>
     fce:	f9 e0       	ldi	r31, 0x09	; 9
     fd0:	af 0e       	add	r10, r31
     fd2:	b1 1c       	adc	r11, r1
				}
			}
		}

		// checking for collision of enemy with the player
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
     fd4:	29 ed       	ldi	r18, 0xD9	; 217
     fd6:	a2 16       	cp	r10, r18
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	b2 06       	cpc	r11, r18
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <_Z4loopj+0x742>
     fde:	ba cf       	rjmp	.-140    	; 0xf54 <_Z4loopj+0x6b6>
				enemyPlayerCollisionCounter++;
				enemyPool[enemyCounter].setIsAlive(false);
			}
		}
		
		if (lastEnemyPlayerCollisionCounter != enemyPlayerCollisionCounter 
     fe0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_end+0x2>
     fe4:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__data_end+0x3>
     fe8:	49 8d       	ldd	r20, Y+25	; 0x19
     fea:	5a 8d       	ldd	r21, Y+26	; 0x1a
     fec:	48 17       	cp	r20, r24
     fee:	59 07       	cpc	r21, r25
     ff0:	51 f4       	brne	.+20     	; 0x1006 <_Z4loopj+0x768>
			|| lastEnemyBulletCollisionCounter != enemyBulletCollisionCounter) {
     ff2:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <__data_end>
     ff6:	30 91 bf 00 	lds	r19, 0x00BF	; 0x8000bf <__data_end+0x1>
     ffa:	4b 8d       	ldd	r20, Y+27	; 0x1b
     ffc:	5c 8d       	ldd	r21, Y+28	; 0x1c
     ffe:	42 17       	cp	r20, r18
    1000:	53 07       	cpc	r21, r19
    1002:	09 f4       	brne	.+2      	; 0x1006 <_Z4loopj+0x768>
    1004:	a6 c0       	rjmp	.+332    	; 0x1152 <_Z4loopj+0x8b4>
	// updates the values showed in the LCD display.
	// should be called after updatBased on collisions has been called.
	void updateLcdDisplay() {
		
		char healthStatus[16];
		if (enemyPlayerCollisionCounter < 5) {
    1006:	85 30       	cpi	r24, 0x05	; 5
    1008:	91 05       	cpc	r25, r1
    100a:	50 f4       	brcc	.+20     	; 0x1020 <_Z4loopj+0x782>
			strcpy(healthStatus, "Great health!");
    100c:	8e e0       	ldi	r24, 0x0E	; 14
    100e:	e7 e8       	ldi	r30, 0x87	; 135
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	de 01       	movw	r26, r28
    1014:	11 96       	adiw	r26, 0x01	; 1
    1016:	01 90       	ld	r0, Z+
    1018:	0d 92       	st	X+, r0
    101a:	8a 95       	dec	r24
    101c:	e1 f7       	brne	.-8      	; 0x1016 <_Z4loopj+0x778>
    101e:	22 c0       	rjmp	.+68     	; 0x1064 <_Z4loopj+0x7c6>
			} else if (enemyPlayerCollisionCounter < 10) {
    1020:	8a 30       	cpi	r24, 0x0A	; 10
    1022:	91 05       	cpc	r25, r1
    1024:	50 f4       	brcc	.+20     	; 0x103a <_Z4loopj+0x79c>
			strcpy(healthStatus, "Good health!");
    1026:	8d e0       	ldi	r24, 0x0D	; 13
    1028:	e5 e9       	ldi	r30, 0x95	; 149
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	de 01       	movw	r26, r28
    102e:	11 96       	adiw	r26, 0x01	; 1
    1030:	01 90       	ld	r0, Z+
    1032:	0d 92       	st	X+, r0
    1034:	8a 95       	dec	r24
    1036:	e1 f7       	brne	.-8      	; 0x1030 <_Z4loopj+0x792>
    1038:	15 c0       	rjmp	.+42     	; 0x1064 <_Z4loopj+0x7c6>
			} else if (enemyPlayerCollisionCounter < 15) {
    103a:	0f 97       	sbiw	r24, 0x0f	; 15
    103c:	50 f4       	brcc	.+20     	; 0x1052 <_Z4loopj+0x7b4>
			strcpy(healthStatus, "Critical health :(");
    103e:	83 e1       	ldi	r24, 0x13	; 19
    1040:	e2 ea       	ldi	r30, 0xA2	; 162
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	de 01       	movw	r26, r28
    1046:	11 96       	adiw	r26, 0x01	; 1
    1048:	01 90       	ld	r0, Z+
    104a:	0d 92       	st	X+, r0
    104c:	8a 95       	dec	r24
    104e:	e1 f7       	brne	.-8      	; 0x1048 <_Z4loopj+0x7aa>
    1050:	09 c0       	rjmp	.+18     	; 0x1064 <_Z4loopj+0x7c6>
			} else {
			strcpy(healthStatus, "Dead :'(");
    1052:	89 e0       	ldi	r24, 0x09	; 9
    1054:	e5 eb       	ldi	r30, 0xB5	; 181
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	de 01       	movw	r26, r28
    105a:	11 96       	adiw	r26, 0x01	; 1
    105c:	01 90       	ld	r0, Z+
    105e:	0d 92       	st	X+, r0
    1060:	8a 95       	dec	r24
    1062:	e1 f7       	brne	.-8      	; 0x105c <_Z4loopj+0x7be>
	}
	
	
	char* getScoreString(){
		//todo: score logic needs to be updated
		itoa (enemyBulletCollisionCounter,score1,10);
    1064:	0f 2e       	mov	r0, r31
    1066:	fe eb       	ldi	r31, 0xBE	; 190
    1068:	ef 2e       	mov	r14, r31
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	ff 2e       	mov	r15, r31
    106e:	f0 2d       	mov	r31, r0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1070:	d7 01       	movw	r26, r14
    1072:	14 96       	adiw	r26, 0x04	; 4
    1074:	6d 91       	ld	r22, X+
    1076:	7c 91       	ld	r23, X
    1078:	15 97       	sbiw	r26, 0x05	; 5
    107a:	4a e0       	ldi	r20, 0x0A	; 10
    107c:	8d 91       	ld	r24, X+
    107e:	9c 91       	ld	r25, X
    1080:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__itoa_ncheck>
    1084:	f7 01       	movw	r30, r14
    1086:	66 81       	ldd	r22, Z+6	; 0x06
    1088:	77 81       	ldd	r23, Z+7	; 0x07
    108a:	4a e0       	ldi	r20, 0x0A	; 10
    108c:	82 81       	ldd	r24, Z+2	; 0x02
    108e:	93 81       	ldd	r25, Z+3	; 0x03
    1090:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__itoa_ncheck>
		itoa (enemyPlayerCollisionCounter,score2,10);
		strcat(score1, ", ");
    1094:	d7 01       	movw	r26, r14
    1096:	14 96       	adiw	r26, 0x04	; 4
    1098:	ed 91       	ld	r30, X+
    109a:	fc 91       	ld	r31, X
    109c:	15 97       	sbiw	r26, 0x05	; 5
    109e:	01 90       	ld	r0, Z+
    10a0:	00 20       	and	r0, r0
    10a2:	e9 f7       	brne	.-6      	; 0x109e <_Z4loopj+0x800>
    10a4:	31 97       	sbiw	r30, 0x01	; 1
    10a6:	8c e2       	ldi	r24, 0x2C	; 44
    10a8:	90 e2       	ldi	r25, 0x20	; 32
    10aa:	91 83       	std	Z+1, r25	; 0x01
    10ac:	80 83       	st	Z, r24
    10ae:	12 82       	std	Z+2, r1	; 0x02
		strcat(score1,score2);
    10b0:	16 96       	adiw	r26, 0x06	; 6
    10b2:	6d 91       	ld	r22, X+
    10b4:	7c 91       	ld	r23, X
    10b6:	17 97       	sbiw	r26, 0x07	; 7
    10b8:	14 96       	adiw	r26, 0x04	; 4
    10ba:	8d 91       	ld	r24, X+
    10bc:	9c 91       	ld	r25, X
    10be:	15 97       	sbiw	r26, 0x05	; 5
    10c0:	0e 94 65 0a 	call	0x14ca	; 0x14ca <strcat>
		
		return score1;
    10c4:	f7 01       	movw	r30, r14
    10c6:	e4 80       	ldd	r14, Z+4	; 0x04
    10c8:	f5 80       	ldd	r15, Z+5	; 0x05
		}
	}

	static void displayLcd(char * upper,char * lower)
	{
		Lcd4_Clear();
    10ca:	0e 94 07 02 	call	0x40e	; 0x40e <_Z10Lcd4_Clearv>
		Lcd4_Set_Cursor(1, 0);
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	0e 94 0e 02 	call	0x41c	; 0x41c <_Z15Lcd4_Set_Cursorcc>
		Lcd4_Write_String(upper);
    10d6:	c7 01       	movw	r24, r14
    10d8:	0e 94 a2 02 	call	0x544	; 0x544 <_Z17Lcd4_Write_StringPc>
		Lcd4_Set_Cursor(2, 0);
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	82 e0       	ldi	r24, 0x02	; 2
    10e0:	0e 94 0e 02 	call	0x41c	; 0x41c <_Z15Lcd4_Set_Cursorcc>
		Lcd4_Write_String(lower);
    10e4:	ce 01       	movw	r24, r28
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	0e 94 a2 02 	call	0x544	; 0x544 <_Z17Lcd4_Write_StringPc>
    10ec:	32 c0       	rjmp	.+100    	; 0x1152 <_Z4loopj+0x8b4>

	// for all objects, check for collision, update collision count and reset boards
	void updateBasedOnCollisions() {

		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
    10ee:	65 01       	movw	r12, r10
    10f0:	10 e0       	ldi	r17, 0x00	; 0

		for (int i = 0; i < rows; i++)
		{
			for (int j = 0; j < cols; j++)
			{
				if (board[i][j])
    10f2:	d6 01       	movw	r26, r12
    10f4:	8d 91       	ld	r24, X+
    10f6:	9d 91       	ld	r25, X+
    10f8:	6d 01       	movw	r12, r26
    10fa:	89 2b       	or	r24, r25
    10fc:	41 f0       	breq	.+16     	; 0x110e <_Z4loopj+0x870>
					// ledPrintUsingTwoDecoder(j, i, 'A','R');
					// } else {
					// 	ledPrintUsingTwoDecoder(j, i, 'A','G');
					// }

					voidLedPrintUsingOneDecoder(j,i);
    10fe:	6e 2d       	mov	r22, r14
    1100:	81 2f       	mov	r24, r17
    1102:	0e 94 55 00 	call	0xaa	; 0xaa <_Z27voidLedPrintUsingOneDecodercc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1106:	b1 e2       	ldi	r27, 0x21	; 33
    1108:	ba 95       	dec	r27
    110a:	f1 f7       	brne	.-4      	; 0x1108 <_Z4loopj+0x86a>
    110c:	00 00       	nop
    110e:	1f 5f       	subi	r17, 0xFF	; 255
	{
		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++)
		{
			for (int j = 0; j < cols; j++)
    1110:	18 30       	cpi	r17, 0x08	; 8
    1112:	79 f7       	brne	.-34     	; 0x10f2 <_Z4loopj+0x854>
    1114:	e0 e1       	ldi	r30, 0x10	; 16
    1116:	ae 0e       	add	r10, r30
    1118:	b1 1c       	adc	r11, r1
    111a:	e3 94       	inc	r14
	//point by point scan
	static void displayBoardMatrixBackup(int board[BOARD_HEIGHT][BOARD_WIDTH])
	{
		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++)
    111c:	f0 e1       	ldi	r31, 0x10	; 16
    111e:	ef 12       	cpse	r14, r31
    1120:	e6 cf       	rjmp	.-52     	; 0x10ee <_Z4loopj+0x850>
    1122:	1a c0       	rjmp	.+52     	; 0x1158 <_Z4loopj+0x8ba>
	void shootNewBullet() {
		

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
			if(bulletPool[i].IsAlive() == false) {
    1124:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__data_end+0x31>
    1128:	88 23       	and	r24, r24
    112a:	09 f4       	brne	.+2      	; 0x112e <_Z4loopj+0x890>
    112c:	f4 cd       	rjmp	.-1048   	; 0xd16 <_Z4loopj+0x478>
    112e:	e8 ef       	ldi	r30, 0xF8	; 248
    1130:	f0 e0       	ldi	r31, 0x00	; 0

	void shootNewBullet() {
		

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	eb cd       	rjmp	.-1066   	; 0xd0e <_Z4loopj+0x470>
		}

		// checking for collision of enemy with the player
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
			if (doesCollide(enemyPool[enemyCounter])) {
				enemyPlayerCollisionCounter++;
    1138:	d2 01       	movw	r26, r4
    113a:	12 96       	adiw	r26, 0x02	; 2
    113c:	8d 91       	ld	r24, X+
    113e:	9c 91       	ld	r25, X
    1140:	13 97       	sbiw	r26, 0x03	; 3
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	9c 93       	st	X, r25
    1148:	8e 93       	st	-X, r24
    114a:	12 97       	sbiw	r26, 0x02	; 2
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
    114c:	f6 01       	movw	r30, r12
    114e:	12 8a       	std	Z+18, r1	; 0x12
    1150:	3e cf       	rjmp	.-388    	; 0xfce <_Z4loopj+0x730>

	// for all objects, check for collision, update collision count and reset boards
	void updateBasedOnCollisions() {

		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
    1152:	e1 2c       	mov	r14, r1
    1154:	58 01       	movw	r10, r16
    1156:	cb cf       	rjmp	.-106    	; 0x10ee <_Z4loopj+0x850>
	gameController.updateNewBulletPositions();
	gameController.updateBasedOnCollisions();
	//gameController.updateLcdDisplay();
	
	HardwareController::displayBoardMatrixBackup(gameController.displayBoard);
}
    1158:	6c 96       	adiw	r28, 0x1c	; 28
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	df 90       	pop	r13
    1172:	cf 90       	pop	r12
    1174:	bf 90       	pop	r11
    1176:	af 90       	pop	r10
    1178:	9f 90       	pop	r9
    117a:	8f 90       	pop	r8
    117c:	7f 90       	pop	r7
    117e:	6f 90       	pop	r6
    1180:	5f 90       	pop	r5
    1182:	4f 90       	pop	r4
    1184:	3f 90       	pop	r3
    1186:	2f 90       	pop	r2
    1188:	08 95       	ret

0000118a <main>:

int main() {
	setup();
    118a:	0e 94 32 04 	call	0x864	; 0x864 <_Z5setupv>
	unsigned int loopCount = 0;
    118e:	c0 e0       	ldi	r28, 0x00	; 0
    1190:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (true) {
		loopCount++;
    1192:	21 96       	adiw	r28, 0x01	; 1
	    loop(loopCount);
    1194:	ce 01       	movw	r24, r28
    1196:	0e 94 4f 04 	call	0x89e	; 0x89e <_Z4loopj>
    119a:	fb cf       	rjmp	.-10     	; 0x1192 <main+0x8>

0000119c <_GLOBAL__sub_I__Z8ledPrintcccc>:
#include "headers/game/GameController.h"
#include "headers/utils/HardwareController.h"

GameController gameController;
    119c:	8e eb       	ldi	r24, 0xBE	; 190
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 b1 02 	call	0x562	; 0x562 <_ZN14GameControllerC1Ev>
    11a4:	08 95       	ret

000011a6 <__umulhisi3>:
    11a6:	a2 9f       	mul	r26, r18
    11a8:	b0 01       	movw	r22, r0
    11aa:	b3 9f       	mul	r27, r19
    11ac:	c0 01       	movw	r24, r0
    11ae:	a3 9f       	mul	r26, r19
    11b0:	70 0d       	add	r23, r0
    11b2:	81 1d       	adc	r24, r1
    11b4:	11 24       	eor	r1, r1
    11b6:	91 1d       	adc	r25, r1
    11b8:	b2 9f       	mul	r27, r18
    11ba:	70 0d       	add	r23, r0
    11bc:	81 1d       	adc	r24, r1
    11be:	11 24       	eor	r1, r1
    11c0:	91 1d       	adc	r25, r1
    11c2:	08 95       	ret

000011c4 <__tablejump2__>:
    11c4:	ee 0f       	add	r30, r30
    11c6:	ff 1f       	adc	r31, r31
    11c8:	05 90       	lpm	r0, Z+
    11ca:	f4 91       	lpm	r31, Z
    11cc:	e0 2d       	mov	r30, r0
    11ce:	09 94       	ijmp

000011d0 <malloc>:
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	82 30       	cpi	r24, 0x02	; 2
    11da:	91 05       	cpc	r25, r1
    11dc:	10 f4       	brcc	.+4      	; 0x11e2 <malloc+0x12>
    11de:	82 e0       	ldi	r24, 0x02	; 2
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <__flp>
    11e6:	f0 91 a2 02 	lds	r31, 0x02A2	; 0x8002a2 <__flp+0x1>
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	a0 e0       	ldi	r26, 0x00	; 0
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	30 97       	sbiw	r30, 0x00	; 0
    11f4:	19 f1       	breq	.+70     	; 0x123c <malloc+0x6c>
    11f6:	40 81       	ld	r20, Z
    11f8:	51 81       	ldd	r21, Z+1	; 0x01
    11fa:	02 81       	ldd	r16, Z+2	; 0x02
    11fc:	13 81       	ldd	r17, Z+3	; 0x03
    11fe:	48 17       	cp	r20, r24
    1200:	59 07       	cpc	r21, r25
    1202:	c8 f0       	brcs	.+50     	; 0x1236 <malloc+0x66>
    1204:	84 17       	cp	r24, r20
    1206:	95 07       	cpc	r25, r21
    1208:	69 f4       	brne	.+26     	; 0x1224 <malloc+0x54>
    120a:	10 97       	sbiw	r26, 0x00	; 0
    120c:	31 f0       	breq	.+12     	; 0x121a <malloc+0x4a>
    120e:	12 96       	adiw	r26, 0x02	; 2
    1210:	0c 93       	st	X, r16
    1212:	12 97       	sbiw	r26, 0x02	; 2
    1214:	13 96       	adiw	r26, 0x03	; 3
    1216:	1c 93       	st	X, r17
    1218:	27 c0       	rjmp	.+78     	; 0x1268 <malloc+0x98>
    121a:	00 93 a1 02 	sts	0x02A1, r16	; 0x8002a1 <__flp>
    121e:	10 93 a2 02 	sts	0x02A2, r17	; 0x8002a2 <__flp+0x1>
    1222:	22 c0       	rjmp	.+68     	; 0x1268 <malloc+0x98>
    1224:	21 15       	cp	r18, r1
    1226:	31 05       	cpc	r19, r1
    1228:	19 f0       	breq	.+6      	; 0x1230 <malloc+0x60>
    122a:	42 17       	cp	r20, r18
    122c:	53 07       	cpc	r21, r19
    122e:	18 f4       	brcc	.+6      	; 0x1236 <malloc+0x66>
    1230:	9a 01       	movw	r18, r20
    1232:	bd 01       	movw	r22, r26
    1234:	ef 01       	movw	r28, r30
    1236:	df 01       	movw	r26, r30
    1238:	f8 01       	movw	r30, r16
    123a:	db cf       	rjmp	.-74     	; 0x11f2 <malloc+0x22>
    123c:	21 15       	cp	r18, r1
    123e:	31 05       	cpc	r19, r1
    1240:	f9 f0       	breq	.+62     	; 0x1280 <malloc+0xb0>
    1242:	28 1b       	sub	r18, r24
    1244:	39 0b       	sbc	r19, r25
    1246:	24 30       	cpi	r18, 0x04	; 4
    1248:	31 05       	cpc	r19, r1
    124a:	80 f4       	brcc	.+32     	; 0x126c <malloc+0x9c>
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	9b 81       	ldd	r25, Y+3	; 0x03
    1250:	61 15       	cp	r22, r1
    1252:	71 05       	cpc	r23, r1
    1254:	21 f0       	breq	.+8      	; 0x125e <malloc+0x8e>
    1256:	fb 01       	movw	r30, r22
    1258:	93 83       	std	Z+3, r25	; 0x03
    125a:	82 83       	std	Z+2, r24	; 0x02
    125c:	04 c0       	rjmp	.+8      	; 0x1266 <malloc+0x96>
    125e:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <__flp+0x1>
    1262:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <__flp>
    1266:	fe 01       	movw	r30, r28
    1268:	32 96       	adiw	r30, 0x02	; 2
    126a:	44 c0       	rjmp	.+136    	; 0x12f4 <malloc+0x124>
    126c:	fe 01       	movw	r30, r28
    126e:	e2 0f       	add	r30, r18
    1270:	f3 1f       	adc	r31, r19
    1272:	81 93       	st	Z+, r24
    1274:	91 93       	st	Z+, r25
    1276:	22 50       	subi	r18, 0x02	; 2
    1278:	31 09       	sbc	r19, r1
    127a:	39 83       	std	Y+1, r19	; 0x01
    127c:	28 83       	st	Y, r18
    127e:	3a c0       	rjmp	.+116    	; 0x12f4 <malloc+0x124>
    1280:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__brkval>
    1284:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__brkval+0x1>
    1288:	23 2b       	or	r18, r19
    128a:	41 f4       	brne	.+16     	; 0x129c <malloc+0xcc>
    128c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1290:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    1294:	30 93 a0 02 	sts	0x02A0, r19	; 0x8002a0 <__brkval+0x1>
    1298:	20 93 9f 02 	sts	0x029F, r18	; 0x80029f <__brkval>
    129c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    12a0:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    12a4:	21 15       	cp	r18, r1
    12a6:	31 05       	cpc	r19, r1
    12a8:	41 f4       	brne	.+16     	; 0x12ba <malloc+0xea>
    12aa:	2d b7       	in	r18, 0x3d	; 61
    12ac:	3e b7       	in	r19, 0x3e	; 62
    12ae:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    12b2:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    12b6:	24 1b       	sub	r18, r20
    12b8:	35 0b       	sbc	r19, r21
    12ba:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <__brkval>
    12be:	f0 91 a0 02 	lds	r31, 0x02A0	; 0x8002a0 <__brkval+0x1>
    12c2:	e2 17       	cp	r30, r18
    12c4:	f3 07       	cpc	r31, r19
    12c6:	a0 f4       	brcc	.+40     	; 0x12f0 <malloc+0x120>
    12c8:	2e 1b       	sub	r18, r30
    12ca:	3f 0b       	sbc	r19, r31
    12cc:	28 17       	cp	r18, r24
    12ce:	39 07       	cpc	r19, r25
    12d0:	78 f0       	brcs	.+30     	; 0x12f0 <malloc+0x120>
    12d2:	ac 01       	movw	r20, r24
    12d4:	4e 5f       	subi	r20, 0xFE	; 254
    12d6:	5f 4f       	sbci	r21, 0xFF	; 255
    12d8:	24 17       	cp	r18, r20
    12da:	35 07       	cpc	r19, r21
    12dc:	48 f0       	brcs	.+18     	; 0x12f0 <malloc+0x120>
    12de:	4e 0f       	add	r20, r30
    12e0:	5f 1f       	adc	r21, r31
    12e2:	50 93 a0 02 	sts	0x02A0, r21	; 0x8002a0 <__brkval+0x1>
    12e6:	40 93 9f 02 	sts	0x029F, r20	; 0x80029f <__brkval>
    12ea:	81 93       	st	Z+, r24
    12ec:	91 93       	st	Z+, r25
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <malloc+0x124>
    12f0:	e0 e0       	ldi	r30, 0x00	; 0
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	cf 01       	movw	r24, r30
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	08 95       	ret

00001300 <free>:
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	09 f4       	brne	.+2      	; 0x130a <free+0xa>
    1308:	81 c0       	rjmp	.+258    	; 0x140c <free+0x10c>
    130a:	fc 01       	movw	r30, r24
    130c:	32 97       	sbiw	r30, 0x02	; 2
    130e:	13 82       	std	Z+3, r1	; 0x03
    1310:	12 82       	std	Z+2, r1	; 0x02
    1312:	a0 91 a1 02 	lds	r26, 0x02A1	; 0x8002a1 <__flp>
    1316:	b0 91 a2 02 	lds	r27, 0x02A2	; 0x8002a2 <__flp+0x1>
    131a:	10 97       	sbiw	r26, 0x00	; 0
    131c:	81 f4       	brne	.+32     	; 0x133e <free+0x3e>
    131e:	20 81       	ld	r18, Z
    1320:	31 81       	ldd	r19, Z+1	; 0x01
    1322:	82 0f       	add	r24, r18
    1324:	93 1f       	adc	r25, r19
    1326:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__brkval>
    132a:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__brkval+0x1>
    132e:	28 17       	cp	r18, r24
    1330:	39 07       	cpc	r19, r25
    1332:	51 f5       	brne	.+84     	; 0x1388 <free+0x88>
    1334:	f0 93 a0 02 	sts	0x02A0, r31	; 0x8002a0 <__brkval+0x1>
    1338:	e0 93 9f 02 	sts	0x029F, r30	; 0x80029f <__brkval>
    133c:	67 c0       	rjmp	.+206    	; 0x140c <free+0x10c>
    133e:	ed 01       	movw	r28, r26
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	ce 17       	cp	r28, r30
    1346:	df 07       	cpc	r29, r31
    1348:	40 f4       	brcc	.+16     	; 0x135a <free+0x5a>
    134a:	4a 81       	ldd	r20, Y+2	; 0x02
    134c:	5b 81       	ldd	r21, Y+3	; 0x03
    134e:	9e 01       	movw	r18, r28
    1350:	41 15       	cp	r20, r1
    1352:	51 05       	cpc	r21, r1
    1354:	f1 f0       	breq	.+60     	; 0x1392 <free+0x92>
    1356:	ea 01       	movw	r28, r20
    1358:	f5 cf       	rjmp	.-22     	; 0x1344 <free+0x44>
    135a:	d3 83       	std	Z+3, r29	; 0x03
    135c:	c2 83       	std	Z+2, r28	; 0x02
    135e:	40 81       	ld	r20, Z
    1360:	51 81       	ldd	r21, Z+1	; 0x01
    1362:	84 0f       	add	r24, r20
    1364:	95 1f       	adc	r25, r21
    1366:	c8 17       	cp	r28, r24
    1368:	d9 07       	cpc	r29, r25
    136a:	59 f4       	brne	.+22     	; 0x1382 <free+0x82>
    136c:	88 81       	ld	r24, Y
    136e:	99 81       	ldd	r25, Y+1	; 0x01
    1370:	84 0f       	add	r24, r20
    1372:	95 1f       	adc	r25, r21
    1374:	02 96       	adiw	r24, 0x02	; 2
    1376:	91 83       	std	Z+1, r25	; 0x01
    1378:	80 83       	st	Z, r24
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	9b 81       	ldd	r25, Y+3	; 0x03
    137e:	93 83       	std	Z+3, r25	; 0x03
    1380:	82 83       	std	Z+2, r24	; 0x02
    1382:	21 15       	cp	r18, r1
    1384:	31 05       	cpc	r19, r1
    1386:	29 f4       	brne	.+10     	; 0x1392 <free+0x92>
    1388:	f0 93 a2 02 	sts	0x02A2, r31	; 0x8002a2 <__flp+0x1>
    138c:	e0 93 a1 02 	sts	0x02A1, r30	; 0x8002a1 <__flp>
    1390:	3d c0       	rjmp	.+122    	; 0x140c <free+0x10c>
    1392:	e9 01       	movw	r28, r18
    1394:	fb 83       	std	Y+3, r31	; 0x03
    1396:	ea 83       	std	Y+2, r30	; 0x02
    1398:	49 91       	ld	r20, Y+
    139a:	59 91       	ld	r21, Y+
    139c:	c4 0f       	add	r28, r20
    139e:	d5 1f       	adc	r29, r21
    13a0:	ec 17       	cp	r30, r28
    13a2:	fd 07       	cpc	r31, r29
    13a4:	61 f4       	brne	.+24     	; 0x13be <free+0xbe>
    13a6:	80 81       	ld	r24, Z
    13a8:	91 81       	ldd	r25, Z+1	; 0x01
    13aa:	84 0f       	add	r24, r20
    13ac:	95 1f       	adc	r25, r21
    13ae:	02 96       	adiw	r24, 0x02	; 2
    13b0:	e9 01       	movw	r28, r18
    13b2:	99 83       	std	Y+1, r25	; 0x01
    13b4:	88 83       	st	Y, r24
    13b6:	82 81       	ldd	r24, Z+2	; 0x02
    13b8:	93 81       	ldd	r25, Z+3	; 0x03
    13ba:	9b 83       	std	Y+3, r25	; 0x03
    13bc:	8a 83       	std	Y+2, r24	; 0x02
    13be:	e0 e0       	ldi	r30, 0x00	; 0
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	12 96       	adiw	r26, 0x02	; 2
    13c4:	8d 91       	ld	r24, X+
    13c6:	9c 91       	ld	r25, X
    13c8:	13 97       	sbiw	r26, 0x03	; 3
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	19 f0       	breq	.+6      	; 0x13d4 <free+0xd4>
    13ce:	fd 01       	movw	r30, r26
    13d0:	dc 01       	movw	r26, r24
    13d2:	f7 cf       	rjmp	.-18     	; 0x13c2 <free+0xc2>
    13d4:	8d 91       	ld	r24, X+
    13d6:	9c 91       	ld	r25, X
    13d8:	11 97       	sbiw	r26, 0x01	; 1
    13da:	9d 01       	movw	r18, r26
    13dc:	2e 5f       	subi	r18, 0xFE	; 254
    13de:	3f 4f       	sbci	r19, 0xFF	; 255
    13e0:	82 0f       	add	r24, r18
    13e2:	93 1f       	adc	r25, r19
    13e4:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__brkval>
    13e8:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__brkval+0x1>
    13ec:	28 17       	cp	r18, r24
    13ee:	39 07       	cpc	r19, r25
    13f0:	69 f4       	brne	.+26     	; 0x140c <free+0x10c>
    13f2:	30 97       	sbiw	r30, 0x00	; 0
    13f4:	29 f4       	brne	.+10     	; 0x1400 <free+0x100>
    13f6:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <__flp+0x1>
    13fa:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <__flp>
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <free+0x104>
    1400:	13 82       	std	Z+3, r1	; 0x03
    1402:	12 82       	std	Z+2, r1	; 0x02
    1404:	b0 93 a0 02 	sts	0x02A0, r27	; 0x8002a0 <__brkval+0x1>
    1408:	a0 93 9f 02 	sts	0x029F, r26	; 0x80029f <__brkval>
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	08 95       	ret

00001412 <do_rand>:
    1412:	8f 92       	push	r8
    1414:	9f 92       	push	r9
    1416:	af 92       	push	r10
    1418:	bf 92       	push	r11
    141a:	cf 92       	push	r12
    141c:	df 92       	push	r13
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	ec 01       	movw	r28, r24
    1428:	68 81       	ld	r22, Y
    142a:	79 81       	ldd	r23, Y+1	; 0x01
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	9b 81       	ldd	r25, Y+3	; 0x03
    1430:	61 15       	cp	r22, r1
    1432:	71 05       	cpc	r23, r1
    1434:	81 05       	cpc	r24, r1
    1436:	91 05       	cpc	r25, r1
    1438:	21 f4       	brne	.+8      	; 0x1442 <do_rand+0x30>
    143a:	64 e2       	ldi	r22, 0x24	; 36
    143c:	79 ed       	ldi	r23, 0xD9	; 217
    143e:	8b e5       	ldi	r24, 0x5B	; 91
    1440:	97 e0       	ldi	r25, 0x07	; 7
    1442:	2d e1       	ldi	r18, 0x1D	; 29
    1444:	33 ef       	ldi	r19, 0xF3	; 243
    1446:	41 e0       	ldi	r20, 0x01	; 1
    1448:	50 e0       	ldi	r21, 0x00	; 0
    144a:	0e 94 a5 0a 	call	0x154a	; 0x154a <__divmodsi4>
    144e:	49 01       	movw	r8, r18
    1450:	5a 01       	movw	r10, r20
    1452:	9b 01       	movw	r18, r22
    1454:	ac 01       	movw	r20, r24
    1456:	a7 ea       	ldi	r26, 0xA7	; 167
    1458:	b1 e4       	ldi	r27, 0x41	; 65
    145a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__muluhisi3>
    145e:	6b 01       	movw	r12, r22
    1460:	7c 01       	movw	r14, r24
    1462:	ac ee       	ldi	r26, 0xEC	; 236
    1464:	b4 ef       	ldi	r27, 0xF4	; 244
    1466:	a5 01       	movw	r20, r10
    1468:	94 01       	movw	r18, r8
    146a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__mulohisi3>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	8c 0d       	add	r24, r12
    1474:	9d 1d       	adc	r25, r13
    1476:	ae 1d       	adc	r26, r14
    1478:	bf 1d       	adc	r27, r15
    147a:	b7 ff       	sbrs	r27, 7
    147c:	03 c0       	rjmp	.+6      	; 0x1484 <do_rand+0x72>
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	a1 09       	sbc	r26, r1
    1482:	b0 48       	sbci	r27, 0x80	; 128
    1484:	88 83       	st	Y, r24
    1486:	99 83       	std	Y+1, r25	; 0x01
    1488:	aa 83       	std	Y+2, r26	; 0x02
    148a:	bb 83       	std	Y+3, r27	; 0x03
    148c:	9f 77       	andi	r25, 0x7F	; 127
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	ff 90       	pop	r15
    1494:	ef 90       	pop	r14
    1496:	df 90       	pop	r13
    1498:	cf 90       	pop	r12
    149a:	bf 90       	pop	r11
    149c:	af 90       	pop	r10
    149e:	9f 90       	pop	r9
    14a0:	8f 90       	pop	r8
    14a2:	08 95       	ret

000014a4 <rand_r>:
    14a4:	0e 94 09 0a 	call	0x1412	; 0x1412 <do_rand>
    14a8:	08 95       	ret

000014aa <rand>:
    14aa:	86 e6       	ldi	r24, 0x66	; 102
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	0e 94 09 0a 	call	0x1412	; 0x1412 <do_rand>
    14b2:	08 95       	ret

000014b4 <srand>:
    14b4:	a0 e0       	ldi	r26, 0x00	; 0
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <next>
    14bc:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <next+0x1>
    14c0:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <next+0x2>
    14c4:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <next+0x3>
    14c8:	08 95       	ret

000014ca <strcat>:
    14ca:	fb 01       	movw	r30, r22
    14cc:	dc 01       	movw	r26, r24
    14ce:	0d 90       	ld	r0, X+
    14d0:	00 20       	and	r0, r0
    14d2:	e9 f7       	brne	.-6      	; 0x14ce <strcat+0x4>
    14d4:	11 97       	sbiw	r26, 0x01	; 1
    14d6:	01 90       	ld	r0, Z+
    14d8:	0d 92       	st	X+, r0
    14da:	00 20       	and	r0, r0
    14dc:	e1 f7       	brne	.-8      	; 0x14d6 <strcat+0xc>
    14de:	08 95       	ret

000014e0 <__itoa_ncheck>:
    14e0:	bb 27       	eor	r27, r27
    14e2:	4a 30       	cpi	r20, 0x0A	; 10
    14e4:	31 f4       	brne	.+12     	; 0x14f2 <__itoa_ncheck+0x12>
    14e6:	99 23       	and	r25, r25
    14e8:	22 f4       	brpl	.+8      	; 0x14f2 <__itoa_ncheck+0x12>
    14ea:	bd e2       	ldi	r27, 0x2D	; 45
    14ec:	90 95       	com	r25
    14ee:	81 95       	neg	r24
    14f0:	9f 4f       	sbci	r25, 0xFF	; 255
    14f2:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__utoa_common>

000014f6 <__utoa_ncheck>:
    14f6:	bb 27       	eor	r27, r27

000014f8 <__utoa_common>:
    14f8:	fb 01       	movw	r30, r22
    14fa:	55 27       	eor	r21, r21
    14fc:	aa 27       	eor	r26, r26
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	aa 1f       	adc	r26, r26
    1504:	a4 17       	cp	r26, r20
    1506:	10 f0       	brcs	.+4      	; 0x150c <__utoa_common+0x14>
    1508:	a4 1b       	sub	r26, r20
    150a:	83 95       	inc	r24
    150c:	50 51       	subi	r21, 0x10	; 16
    150e:	b9 f7       	brne	.-18     	; 0x14fe <__utoa_common+0x6>
    1510:	a0 5d       	subi	r26, 0xD0	; 208
    1512:	aa 33       	cpi	r26, 0x3A	; 58
    1514:	08 f0       	brcs	.+2      	; 0x1518 <__utoa_common+0x20>
    1516:	a9 5d       	subi	r26, 0xD9	; 217
    1518:	a1 93       	st	Z+, r26
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	79 f7       	brne	.-34     	; 0x14fc <__utoa_common+0x4>
    151e:	b1 11       	cpse	r27, r1
    1520:	b1 93       	st	Z+, r27
    1522:	11 92       	st	Z+, r1
    1524:	cb 01       	movw	r24, r22
    1526:	0c 94 95 0a 	jmp	0x152a	; 0x152a <strrev>

0000152a <strrev>:
    152a:	dc 01       	movw	r26, r24
    152c:	fc 01       	movw	r30, r24
    152e:	67 2f       	mov	r22, r23
    1530:	71 91       	ld	r23, Z+
    1532:	77 23       	and	r23, r23
    1534:	e1 f7       	brne	.-8      	; 0x152e <strrev+0x4>
    1536:	32 97       	sbiw	r30, 0x02	; 2
    1538:	04 c0       	rjmp	.+8      	; 0x1542 <strrev+0x18>
    153a:	7c 91       	ld	r23, X
    153c:	6d 93       	st	X+, r22
    153e:	70 83       	st	Z, r23
    1540:	62 91       	ld	r22, -Z
    1542:	ae 17       	cp	r26, r30
    1544:	bf 07       	cpc	r27, r31
    1546:	c8 f3       	brcs	.-14     	; 0x153a <strrev+0x10>
    1548:	08 95       	ret

0000154a <__divmodsi4>:
    154a:	05 2e       	mov	r0, r21
    154c:	97 fb       	bst	r25, 7
    154e:	1e f4       	brtc	.+6      	; 0x1556 <__divmodsi4+0xc>
    1550:	00 94       	com	r0
    1552:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__negsi2>
    1556:	57 fd       	sbrc	r21, 7
    1558:	07 d0       	rcall	.+14     	; 0x1568 <__divmodsi4_neg2>
    155a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__udivmodsi4>
    155e:	07 fc       	sbrc	r0, 7
    1560:	03 d0       	rcall	.+6      	; 0x1568 <__divmodsi4_neg2>
    1562:	4e f4       	brtc	.+18     	; 0x1576 <__divmodsi4_exit>
    1564:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__negsi2>

00001568 <__divmodsi4_neg2>:
    1568:	50 95       	com	r21
    156a:	40 95       	com	r20
    156c:	30 95       	com	r19
    156e:	21 95       	neg	r18
    1570:	3f 4f       	sbci	r19, 0xFF	; 255
    1572:	4f 4f       	sbci	r20, 0xFF	; 255
    1574:	5f 4f       	sbci	r21, 0xFF	; 255

00001576 <__divmodsi4_exit>:
    1576:	08 95       	ret

00001578 <__negsi2>:
    1578:	90 95       	com	r25
    157a:	80 95       	com	r24
    157c:	70 95       	com	r23
    157e:	61 95       	neg	r22
    1580:	7f 4f       	sbci	r23, 0xFF	; 255
    1582:	8f 4f       	sbci	r24, 0xFF	; 255
    1584:	9f 4f       	sbci	r25, 0xFF	; 255
    1586:	08 95       	ret

00001588 <__muluhisi3>:
    1588:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__umulhisi3>
    158c:	a5 9f       	mul	r26, r21
    158e:	90 0d       	add	r25, r0
    1590:	b4 9f       	mul	r27, r20
    1592:	90 0d       	add	r25, r0
    1594:	a4 9f       	mul	r26, r20
    1596:	80 0d       	add	r24, r0
    1598:	91 1d       	adc	r25, r1
    159a:	11 24       	eor	r1, r1
    159c:	08 95       	ret

0000159e <__mulshisi3>:
    159e:	b7 ff       	sbrs	r27, 7
    15a0:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <__muluhisi3>

000015a4 <__mulohisi3>:
    15a4:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__muluhisi3>
    15a8:	82 1b       	sub	r24, r18
    15aa:	93 0b       	sbc	r25, r19
    15ac:	08 95       	ret

000015ae <__udivmodsi4>:
    15ae:	a1 e2       	ldi	r26, 0x21	; 33
    15b0:	1a 2e       	mov	r1, r26
    15b2:	aa 1b       	sub	r26, r26
    15b4:	bb 1b       	sub	r27, r27
    15b6:	fd 01       	movw	r30, r26
    15b8:	0d c0       	rjmp	.+26     	; 0x15d4 <__udivmodsi4_ep>

000015ba <__udivmodsi4_loop>:
    15ba:	aa 1f       	adc	r26, r26
    15bc:	bb 1f       	adc	r27, r27
    15be:	ee 1f       	adc	r30, r30
    15c0:	ff 1f       	adc	r31, r31
    15c2:	a2 17       	cp	r26, r18
    15c4:	b3 07       	cpc	r27, r19
    15c6:	e4 07       	cpc	r30, r20
    15c8:	f5 07       	cpc	r31, r21
    15ca:	20 f0       	brcs	.+8      	; 0x15d4 <__udivmodsi4_ep>
    15cc:	a2 1b       	sub	r26, r18
    15ce:	b3 0b       	sbc	r27, r19
    15d0:	e4 0b       	sbc	r30, r20
    15d2:	f5 0b       	sbc	r31, r21

000015d4 <__udivmodsi4_ep>:
    15d4:	66 1f       	adc	r22, r22
    15d6:	77 1f       	adc	r23, r23
    15d8:	88 1f       	adc	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	1a 94       	dec	r1
    15de:	69 f7       	brne	.-38     	; 0x15ba <__udivmodsi4_loop>
    15e0:	60 95       	com	r22
    15e2:	70 95       	com	r23
    15e4:	80 95       	com	r24
    15e6:	90 95       	com	r25
    15e8:	9b 01       	movw	r18, r22
    15ea:	ac 01       	movw	r20, r24
    15ec:	bd 01       	movw	r22, r26
    15ee:	cf 01       	movw	r24, r30
    15f0:	08 95       	ret

000015f2 <_exit>:
    15f2:	f8 94       	cli

000015f4 <__stop_program>:
    15f4:	ff cf       	rjmp	.-2      	; 0x15f4 <__stop_program>
