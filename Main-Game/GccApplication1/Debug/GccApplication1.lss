
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000160e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  0000160e  000016a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001e5  008000be  008000be  00001700  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001730  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004710  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a15  00000000  00000000  00005f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000126d  00000000  00000000  00006989  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00007bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001901  00000000  00000000  00007ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ef9  00000000  00000000  000097d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000b6d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	da 08       	sbc	r13, r10

00000056 <__ctors_end>:
      56:	11 24       	eor	r1, r1
      58:	1f be       	out	0x3f, r1	; 63
      5a:	cf e5       	ldi	r28, 0x5F	; 95
      5c:	d8 e0       	ldi	r29, 0x08	; 8
      5e:	de bf       	out	0x3e, r29	; 62
      60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
      62:	10 e0       	ldi	r17, 0x00	; 0
      64:	a0 e6       	ldi	r26, 0x60	; 96
      66:	b0 e0       	ldi	r27, 0x00	; 0
      68:	ee e0       	ldi	r30, 0x0E	; 14
      6a:	f6 e1       	ldi	r31, 0x16	; 22
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
      6e:	05 90       	lpm	r0, Z+
      70:	0d 92       	st	X+, r0
      72:	ae 3b       	cpi	r26, 0xBE	; 190
      74:	b1 07       	cpc	r27, r17
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
      78:	22 e0       	ldi	r18, 0x02	; 2
      7a:	ae eb       	ldi	r26, 0xBE	; 190
      7c:	b0 e0       	ldi	r27, 0x00	; 0
      7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
      80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
      82:	a3 3a       	cpi	r26, 0xA3	; 163
      84:	b2 07       	cpc	r27, r18
      86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
      88:	10 e0       	ldi	r17, 0x00	; 0
      8a:	cb e2       	ldi	r28, 0x2B	; 43
      8c:	d0 e0       	ldi	r29, 0x00	; 0
      8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
      90:	21 97       	sbiw	r28, 0x01	; 1
      92:	fe 01       	movw	r30, r28
      94:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__tablejump2__>
      98:	ca 32       	cpi	r28, 0x2A	; 42
      9a:	d1 07       	cpc	r29, r17
      9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
      9e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <main>
      a2:	0c 94 05 0b 	jmp	0x160a	; 0x160a <_exit>

000000a6 <__bad_interrupt>:
      a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z23ledPrintUsingTwoDecoderccc>:
}

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
	Lcd4_Cmd(0x08);
      aa:	9f e0       	ldi	r25, 0x0F	; 15
      ac:	96 1b       	sub	r25, r22
      ae:	42 35       	cpi	r20, 0x52	; 82
      b0:	21 f4       	brne	.+8      	; 0xba <_Z23ledPrintUsingTwoDecoderccc+0x10>
      b2:	88 60       	ori	r24, 0x08	; 8
      b4:	82 95       	swap	r24
      b6:	80 7f       	andi	r24, 0xF0	; 240
      b8:	03 c0       	rjmp	.+6      	; 0xc0 <_Z23ledPrintUsingTwoDecoderccc+0x16>
      ba:	87 7f       	andi	r24, 0xF7	; 247
      bc:	82 95       	swap	r24
      be:	80 7f       	andi	r24, 0xF0	; 240
      c0:	89 2b       	or	r24, r25
      c2:	88 bb       	out	0x18, r24	; 24
      c4:	08 95       	ret

000000c6 <_Z9pinChangeii>:
      c6:	67 2b       	or	r22, r23
      c8:	09 f0       	breq	.+2      	; 0xcc <_Z9pinChangeii+0x6>
      ca:	9f c0       	rjmp	.+318    	; 0x20a <_Z9pinChangeii+0x144>
      cc:	00 97       	sbiw	r24, 0x00	; 0
      ce:	11 f4       	brne	.+4      	; 0xd4 <_Z9pinChangeii+0xe>
      d0:	d8 98       	cbi	0x1b, 0	; 27
      d2:	08 95       	ret
      d4:	81 30       	cpi	r24, 0x01	; 1
      d6:	91 05       	cpc	r25, r1
      d8:	11 f4       	brne	.+4      	; 0xde <_Z9pinChangeii+0x18>
      da:	d9 98       	cbi	0x1b, 1	; 27
      dc:	08 95       	ret
      de:	82 30       	cpi	r24, 0x02	; 2
      e0:	91 05       	cpc	r25, r1
      e2:	11 f4       	brne	.+4      	; 0xe8 <_Z9pinChangeii+0x22>
      e4:	da 98       	cbi	0x1b, 2	; 27
      e6:	08 95       	ret
      e8:	83 30       	cpi	r24, 0x03	; 3
      ea:	91 05       	cpc	r25, r1
      ec:	11 f4       	brne	.+4      	; 0xf2 <_Z9pinChangeii+0x2c>
      ee:	db 98       	cbi	0x1b, 3	; 27
      f0:	08 95       	ret
      f2:	84 30       	cpi	r24, 0x04	; 4
      f4:	91 05       	cpc	r25, r1
      f6:	11 f4       	brne	.+4      	; 0xfc <_Z9pinChangeii+0x36>
      f8:	dc 98       	cbi	0x1b, 4	; 27
      fa:	08 95       	ret
      fc:	85 30       	cpi	r24, 0x05	; 5
      fe:	91 05       	cpc	r25, r1
     100:	11 f4       	brne	.+4      	; 0x106 <_Z9pinChangeii+0x40>
     102:	dd 98       	cbi	0x1b, 5	; 27
     104:	08 95       	ret
     106:	86 30       	cpi	r24, 0x06	; 6
     108:	91 05       	cpc	r25, r1
     10a:	11 f4       	brne	.+4      	; 0x110 <_Z9pinChangeii+0x4a>
     10c:	de 98       	cbi	0x1b, 6	; 27
     10e:	08 95       	ret
     110:	87 30       	cpi	r24, 0x07	; 7
     112:	91 05       	cpc	r25, r1
     114:	11 f4       	brne	.+4      	; 0x11a <_Z9pinChangeii+0x54>
     116:	df 98       	cbi	0x1b, 7	; 27
     118:	08 95       	ret
     11a:	8a 30       	cpi	r24, 0x0A	; 10
     11c:	91 05       	cpc	r25, r1
     11e:	11 f4       	brne	.+4      	; 0x124 <_Z9pinChangeii+0x5e>
     120:	c0 98       	cbi	0x18, 0	; 24
     122:	08 95       	ret
     124:	8b 30       	cpi	r24, 0x0B	; 11
     126:	91 05       	cpc	r25, r1
     128:	11 f4       	brne	.+4      	; 0x12e <_Z9pinChangeii+0x68>
     12a:	c1 98       	cbi	0x18, 1	; 24
     12c:	08 95       	ret
     12e:	8c 30       	cpi	r24, 0x0C	; 12
     130:	91 05       	cpc	r25, r1
     132:	11 f4       	brne	.+4      	; 0x138 <_Z9pinChangeii+0x72>
     134:	c2 98       	cbi	0x18, 2	; 24
     136:	08 95       	ret
     138:	8d 30       	cpi	r24, 0x0D	; 13
     13a:	91 05       	cpc	r25, r1
     13c:	11 f4       	brne	.+4      	; 0x142 <_Z9pinChangeii+0x7c>
     13e:	c3 98       	cbi	0x18, 3	; 24
     140:	08 95       	ret
     142:	8e 30       	cpi	r24, 0x0E	; 14
     144:	91 05       	cpc	r25, r1
     146:	11 f4       	brne	.+4      	; 0x14c <_Z9pinChangeii+0x86>
     148:	c4 98       	cbi	0x18, 4	; 24
     14a:	08 95       	ret
     14c:	8f 30       	cpi	r24, 0x0F	; 15
     14e:	91 05       	cpc	r25, r1
     150:	11 f4       	brne	.+4      	; 0x156 <_Z9pinChangeii+0x90>
     152:	c5 98       	cbi	0x18, 5	; 24
     154:	08 95       	ret
     156:	80 31       	cpi	r24, 0x10	; 16
     158:	91 05       	cpc	r25, r1
     15a:	11 f4       	brne	.+4      	; 0x160 <_Z9pinChangeii+0x9a>
     15c:	c6 98       	cbi	0x18, 6	; 24
     15e:	08 95       	ret
     160:	81 31       	cpi	r24, 0x11	; 17
     162:	91 05       	cpc	r25, r1
     164:	11 f4       	brne	.+4      	; 0x16a <_Z9pinChangeii+0xa4>
     166:	c7 98       	cbi	0x18, 7	; 24
     168:	08 95       	ret
     16a:	84 31       	cpi	r24, 0x14	; 20
     16c:	91 05       	cpc	r25, r1
     16e:	11 f4       	brne	.+4      	; 0x174 <_Z9pinChangeii+0xae>
     170:	a8 98       	cbi	0x15, 0	; 21
     172:	08 95       	ret
     174:	85 31       	cpi	r24, 0x15	; 21
     176:	91 05       	cpc	r25, r1
     178:	11 f4       	brne	.+4      	; 0x17e <_Z9pinChangeii+0xb8>
     17a:	a9 98       	cbi	0x15, 1	; 21
     17c:	08 95       	ret
     17e:	86 31       	cpi	r24, 0x16	; 22
     180:	91 05       	cpc	r25, r1
     182:	11 f4       	brne	.+4      	; 0x188 <_Z9pinChangeii+0xc2>
     184:	aa 98       	cbi	0x15, 2	; 21
     186:	08 95       	ret
     188:	87 31       	cpi	r24, 0x17	; 23
     18a:	91 05       	cpc	r25, r1
     18c:	11 f4       	brne	.+4      	; 0x192 <_Z9pinChangeii+0xcc>
     18e:	ab 98       	cbi	0x15, 3	; 21
     190:	08 95       	ret
     192:	88 31       	cpi	r24, 0x18	; 24
     194:	91 05       	cpc	r25, r1
     196:	11 f4       	brne	.+4      	; 0x19c <_Z9pinChangeii+0xd6>
     198:	ac 98       	cbi	0x15, 4	; 21
     19a:	08 95       	ret
     19c:	89 31       	cpi	r24, 0x19	; 25
     19e:	91 05       	cpc	r25, r1
     1a0:	11 f4       	brne	.+4      	; 0x1a6 <_Z9pinChangeii+0xe0>
     1a2:	ad 98       	cbi	0x15, 5	; 21
     1a4:	08 95       	ret
     1a6:	8a 31       	cpi	r24, 0x1A	; 26
     1a8:	91 05       	cpc	r25, r1
     1aa:	11 f4       	brne	.+4      	; 0x1b0 <_Z9pinChangeii+0xea>
     1ac:	ae 98       	cbi	0x15, 6	; 21
     1ae:	08 95       	ret
     1b0:	8b 31       	cpi	r24, 0x1B	; 27
     1b2:	91 05       	cpc	r25, r1
     1b4:	11 f4       	brne	.+4      	; 0x1ba <_Z9pinChangeii+0xf4>
     1b6:	af 98       	cbi	0x15, 7	; 21
     1b8:	08 95       	ret
     1ba:	8e 31       	cpi	r24, 0x1E	; 30
     1bc:	91 05       	cpc	r25, r1
     1be:	11 f4       	brne	.+4      	; 0x1c4 <_Z9pinChangeii+0xfe>
     1c0:	90 98       	cbi	0x12, 0	; 18
     1c2:	08 95       	ret
     1c4:	8f 31       	cpi	r24, 0x1F	; 31
     1c6:	91 05       	cpc	r25, r1
     1c8:	11 f4       	brne	.+4      	; 0x1ce <_Z9pinChangeii+0x108>
     1ca:	91 98       	cbi	0x12, 1	; 18
     1cc:	08 95       	ret
     1ce:	80 32       	cpi	r24, 0x20	; 32
     1d0:	91 05       	cpc	r25, r1
     1d2:	11 f4       	brne	.+4      	; 0x1d8 <_Z9pinChangeii+0x112>
     1d4:	92 98       	cbi	0x12, 2	; 18
     1d6:	08 95       	ret
     1d8:	81 32       	cpi	r24, 0x21	; 33
     1da:	91 05       	cpc	r25, r1
     1dc:	11 f4       	brne	.+4      	; 0x1e2 <_Z9pinChangeii+0x11c>
     1de:	93 98       	cbi	0x12, 3	; 18
     1e0:	08 95       	ret
     1e2:	82 32       	cpi	r24, 0x22	; 34
     1e4:	91 05       	cpc	r25, r1
     1e6:	11 f4       	brne	.+4      	; 0x1ec <_Z9pinChangeii+0x126>
     1e8:	94 98       	cbi	0x12, 4	; 18
     1ea:	08 95       	ret
     1ec:	83 32       	cpi	r24, 0x23	; 35
     1ee:	91 05       	cpc	r25, r1
     1f0:	11 f4       	brne	.+4      	; 0x1f6 <_Z9pinChangeii+0x130>
     1f2:	95 98       	cbi	0x12, 5	; 18
     1f4:	08 95       	ret
     1f6:	84 32       	cpi	r24, 0x24	; 36
     1f8:	91 05       	cpc	r25, r1
     1fa:	11 f4       	brne	.+4      	; 0x200 <_Z9pinChangeii+0x13a>
     1fc:	96 98       	cbi	0x12, 6	; 18
     1fe:	08 95       	ret
     200:	85 97       	sbiw	r24, 0x25	; 37
     202:	09 f0       	breq	.+2      	; 0x206 <_Z9pinChangeii+0x140>
     204:	9f c0       	rjmp	.+318    	; 0x344 <_Z9pinChangeii+0x27e>
     206:	97 98       	cbi	0x12, 7	; 18
     208:	08 95       	ret
     20a:	00 97       	sbiw	r24, 0x00	; 0
     20c:	11 f4       	brne	.+4      	; 0x212 <_Z9pinChangeii+0x14c>
     20e:	d8 9a       	sbi	0x1b, 0	; 27
     210:	08 95       	ret
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	91 05       	cpc	r25, r1
     216:	11 f4       	brne	.+4      	; 0x21c <_Z9pinChangeii+0x156>
     218:	d9 9a       	sbi	0x1b, 1	; 27
     21a:	08 95       	ret
     21c:	82 30       	cpi	r24, 0x02	; 2
     21e:	91 05       	cpc	r25, r1
     220:	11 f4       	brne	.+4      	; 0x226 <_Z9pinChangeii+0x160>
     222:	da 9a       	sbi	0x1b, 2	; 27
     224:	08 95       	ret
     226:	83 30       	cpi	r24, 0x03	; 3
     228:	91 05       	cpc	r25, r1
     22a:	11 f4       	brne	.+4      	; 0x230 <_Z9pinChangeii+0x16a>
     22c:	db 9a       	sbi	0x1b, 3	; 27
     22e:	08 95       	ret
     230:	84 30       	cpi	r24, 0x04	; 4
     232:	91 05       	cpc	r25, r1
     234:	11 f4       	brne	.+4      	; 0x23a <_Z9pinChangeii+0x174>
     236:	dc 9a       	sbi	0x1b, 4	; 27
     238:	08 95       	ret
     23a:	85 30       	cpi	r24, 0x05	; 5
     23c:	91 05       	cpc	r25, r1
     23e:	11 f4       	brne	.+4      	; 0x244 <_Z9pinChangeii+0x17e>
     240:	dd 9a       	sbi	0x1b, 5	; 27
     242:	08 95       	ret
     244:	86 30       	cpi	r24, 0x06	; 6
     246:	91 05       	cpc	r25, r1
     248:	11 f4       	brne	.+4      	; 0x24e <_Z9pinChangeii+0x188>
     24a:	de 9a       	sbi	0x1b, 6	; 27
     24c:	08 95       	ret
     24e:	87 30       	cpi	r24, 0x07	; 7
     250:	91 05       	cpc	r25, r1
     252:	11 f4       	brne	.+4      	; 0x258 <_Z9pinChangeii+0x192>
     254:	df 9a       	sbi	0x1b, 7	; 27
     256:	08 95       	ret
     258:	8a 30       	cpi	r24, 0x0A	; 10
     25a:	91 05       	cpc	r25, r1
     25c:	11 f4       	brne	.+4      	; 0x262 <_Z9pinChangeii+0x19c>
     25e:	c0 9a       	sbi	0x18, 0	; 24
     260:	08 95       	ret
     262:	8b 30       	cpi	r24, 0x0B	; 11
     264:	91 05       	cpc	r25, r1
     266:	11 f4       	brne	.+4      	; 0x26c <_Z9pinChangeii+0x1a6>
     268:	c1 9a       	sbi	0x18, 1	; 24
     26a:	08 95       	ret
     26c:	8c 30       	cpi	r24, 0x0C	; 12
     26e:	91 05       	cpc	r25, r1
     270:	11 f4       	brne	.+4      	; 0x276 <_Z9pinChangeii+0x1b0>
     272:	c2 9a       	sbi	0x18, 2	; 24
     274:	08 95       	ret
     276:	8d 30       	cpi	r24, 0x0D	; 13
     278:	91 05       	cpc	r25, r1
     27a:	11 f4       	brne	.+4      	; 0x280 <_Z9pinChangeii+0x1ba>
     27c:	c3 9a       	sbi	0x18, 3	; 24
     27e:	08 95       	ret
     280:	8e 30       	cpi	r24, 0x0E	; 14
     282:	91 05       	cpc	r25, r1
     284:	11 f4       	brne	.+4      	; 0x28a <_Z9pinChangeii+0x1c4>
     286:	c4 9a       	sbi	0x18, 4	; 24
     288:	08 95       	ret
     28a:	8f 30       	cpi	r24, 0x0F	; 15
     28c:	91 05       	cpc	r25, r1
     28e:	11 f4       	brne	.+4      	; 0x294 <_Z9pinChangeii+0x1ce>
     290:	c5 9a       	sbi	0x18, 5	; 24
     292:	08 95       	ret
     294:	80 31       	cpi	r24, 0x10	; 16
     296:	91 05       	cpc	r25, r1
     298:	11 f4       	brne	.+4      	; 0x29e <_Z9pinChangeii+0x1d8>
     29a:	c6 9a       	sbi	0x18, 6	; 24
     29c:	08 95       	ret
     29e:	81 31       	cpi	r24, 0x11	; 17
     2a0:	91 05       	cpc	r25, r1
     2a2:	11 f4       	brne	.+4      	; 0x2a8 <_Z9pinChangeii+0x1e2>
     2a4:	c7 9a       	sbi	0x18, 7	; 24
     2a6:	08 95       	ret
     2a8:	84 31       	cpi	r24, 0x14	; 20
     2aa:	91 05       	cpc	r25, r1
     2ac:	11 f4       	brne	.+4      	; 0x2b2 <_Z9pinChangeii+0x1ec>
     2ae:	a8 9a       	sbi	0x15, 0	; 21
     2b0:	08 95       	ret
     2b2:	85 31       	cpi	r24, 0x15	; 21
     2b4:	91 05       	cpc	r25, r1
     2b6:	11 f4       	brne	.+4      	; 0x2bc <_Z9pinChangeii+0x1f6>
     2b8:	a9 9a       	sbi	0x15, 1	; 21
     2ba:	08 95       	ret
     2bc:	86 31       	cpi	r24, 0x16	; 22
     2be:	91 05       	cpc	r25, r1
     2c0:	11 f4       	brne	.+4      	; 0x2c6 <_Z9pinChangeii+0x200>
     2c2:	aa 9a       	sbi	0x15, 2	; 21
     2c4:	08 95       	ret
     2c6:	87 31       	cpi	r24, 0x17	; 23
     2c8:	91 05       	cpc	r25, r1
     2ca:	11 f4       	brne	.+4      	; 0x2d0 <_Z9pinChangeii+0x20a>
     2cc:	ab 9a       	sbi	0x15, 3	; 21
     2ce:	08 95       	ret
     2d0:	88 31       	cpi	r24, 0x18	; 24
     2d2:	91 05       	cpc	r25, r1
     2d4:	11 f4       	brne	.+4      	; 0x2da <_Z9pinChangeii+0x214>
     2d6:	ac 9a       	sbi	0x15, 4	; 21
     2d8:	08 95       	ret
     2da:	89 31       	cpi	r24, 0x19	; 25
     2dc:	91 05       	cpc	r25, r1
     2de:	11 f4       	brne	.+4      	; 0x2e4 <_Z9pinChangeii+0x21e>
     2e0:	ad 9a       	sbi	0x15, 5	; 21
     2e2:	08 95       	ret
     2e4:	8a 31       	cpi	r24, 0x1A	; 26
     2e6:	91 05       	cpc	r25, r1
     2e8:	11 f4       	brne	.+4      	; 0x2ee <_Z9pinChangeii+0x228>
     2ea:	ae 9a       	sbi	0x15, 6	; 21
     2ec:	08 95       	ret
     2ee:	8b 31       	cpi	r24, 0x1B	; 27
     2f0:	91 05       	cpc	r25, r1
     2f2:	11 f4       	brne	.+4      	; 0x2f8 <_Z9pinChangeii+0x232>
     2f4:	af 9a       	sbi	0x15, 7	; 21
     2f6:	08 95       	ret
     2f8:	8e 31       	cpi	r24, 0x1E	; 30
     2fa:	91 05       	cpc	r25, r1
     2fc:	11 f4       	brne	.+4      	; 0x302 <_Z9pinChangeii+0x23c>
     2fe:	90 9a       	sbi	0x12, 0	; 18
     300:	08 95       	ret
     302:	8f 31       	cpi	r24, 0x1F	; 31
     304:	91 05       	cpc	r25, r1
     306:	11 f4       	brne	.+4      	; 0x30c <_Z9pinChangeii+0x246>
     308:	91 9a       	sbi	0x12, 1	; 18
     30a:	08 95       	ret
     30c:	80 32       	cpi	r24, 0x20	; 32
     30e:	91 05       	cpc	r25, r1
     310:	11 f4       	brne	.+4      	; 0x316 <_Z9pinChangeii+0x250>
     312:	92 9a       	sbi	0x12, 2	; 18
     314:	08 95       	ret
     316:	81 32       	cpi	r24, 0x21	; 33
     318:	91 05       	cpc	r25, r1
     31a:	11 f4       	brne	.+4      	; 0x320 <_Z9pinChangeii+0x25a>
     31c:	93 9a       	sbi	0x12, 3	; 18
     31e:	08 95       	ret
     320:	82 32       	cpi	r24, 0x22	; 34
     322:	91 05       	cpc	r25, r1
     324:	11 f4       	brne	.+4      	; 0x32a <_Z9pinChangeii+0x264>
     326:	94 9a       	sbi	0x12, 4	; 18
     328:	08 95       	ret
     32a:	83 32       	cpi	r24, 0x23	; 35
     32c:	91 05       	cpc	r25, r1
     32e:	11 f4       	brne	.+4      	; 0x334 <_Z9pinChangeii+0x26e>
     330:	95 9a       	sbi	0x12, 5	; 18
     332:	08 95       	ret
     334:	84 32       	cpi	r24, 0x24	; 36
     336:	91 05       	cpc	r25, r1
     338:	11 f4       	brne	.+4      	; 0x33e <_Z9pinChangeii+0x278>
     33a:	96 9a       	sbi	0x12, 6	; 18
     33c:	08 95       	ret
     33e:	85 97       	sbiw	r24, 0x25	; 37
     340:	09 f4       	brne	.+2      	; 0x344 <_Z9pinChangeii+0x27e>
     342:	97 9a       	sbi	0x12, 7	; 18
     344:	08 95       	ret

00000346 <_Z9Lcd4_Portc>:
     346:	cf 93       	push	r28
     348:	c8 2f       	mov	r28, r24
     34a:	80 ff       	sbrs	r24, 0
     34c:	07 c0       	rjmp	.+14     	; 0x35c <_Z9Lcd4_Portc+0x16>
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	82 e2       	ldi	r24, 0x22	; 34
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     35a:	06 c0       	rjmp	.+12     	; 0x368 <_Z9Lcd4_Portc+0x22>
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	82 e2       	ldi	r24, 0x22	; 34
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     368:	c1 ff       	sbrs	r28, 1
     36a:	07 c0       	rjmp	.+14     	; 0x37a <_Z9Lcd4_Portc+0x34>
     36c:	61 e0       	ldi	r22, 0x01	; 1
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	83 e2       	ldi	r24, 0x23	; 35
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     378:	06 c0       	rjmp	.+12     	; 0x386 <_Z9Lcd4_Portc+0x40>
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	70 e0       	ldi	r23, 0x00	; 0
     37e:	83 e2       	ldi	r24, 0x23	; 35
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     386:	c2 ff       	sbrs	r28, 2
     388:	07 c0       	rjmp	.+14     	; 0x398 <_Z9Lcd4_Portc+0x52>
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	84 e2       	ldi	r24, 0x24	; 36
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_Z9Lcd4_Portc+0x5e>
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	84 e2       	ldi	r24, 0x24	; 36
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     3a4:	c3 ff       	sbrs	r28, 3
     3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <_Z9Lcd4_Portc+0x70>
     3a8:	61 e0       	ldi	r22, 0x01	; 1
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	85 e2       	ldi	r24, 0x25	; 37
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <_Z9Lcd4_Portc+0x7c>
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	85 e2       	ldi	r24, 0x25	; 37
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <_Z8Lcd4_Cmdc>:
     3c6:	cf 93       	push	r28
     3c8:	c8 2f       	mov	r28, r24
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	8a e1       	ldi	r24, 0x1A	; 26
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     3d6:	8c 2f       	mov	r24, r28
     3d8:	0e 94 a3 01 	call	0x346	; 0x346 <_Z9Lcd4_Portc>
     3dc:	61 e0       	ldi	r22, 0x01	; 1
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	8b e1       	ldi	r24, 0x1B	; 27
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     3e8:	89 ef       	ldi	r24, 0xF9	; 249
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <_Z8Lcd4_Cmdc+0x26>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <_Z8Lcd4_Cmdc+0x2c>
     3f2:	00 00       	nop
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	8b e1       	ldi	r24, 0x1B	; 27
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     400:	89 ef       	ldi	r24, 0xF9	; 249
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     40a:	00 00       	nop
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <_Z10Lcd4_Clearv>:
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     41c:	08 95       	ret

0000041e <_Z15Lcd4_Set_Cursorcc>:
     41e:	cf 93       	push	r28
     420:	c6 2f       	mov	r28, r22
     422:	81 30       	cpi	r24, 0x01	; 1
     424:	59 f4       	brne	.+22     	; 0x43c <_Z15Lcd4_Set_Cursorcc+0x1e>
     426:	80 e8       	ldi	r24, 0x80	; 128
     428:	86 0f       	add	r24, r22
     42a:	82 95       	swap	r24
     42c:	8f 70       	andi	r24, 0x0F	; 15
     42e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     432:	8c 2f       	mov	r24, r28
     434:	8f 70       	andi	r24, 0x0F	; 15
     436:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     43a:	0c c0       	rjmp	.+24     	; 0x454 <_Z15Lcd4_Set_Cursorcc+0x36>
     43c:	82 30       	cpi	r24, 0x02	; 2
     43e:	51 f4       	brne	.+20     	; 0x454 <_Z15Lcd4_Set_Cursorcc+0x36>
     440:	80 ec       	ldi	r24, 0xC0	; 192
     442:	86 0f       	add	r24, r22
     444:	82 95       	swap	r24
     446:	8f 70       	andi	r24, 0x0F	; 15
     448:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     44c:	8c 2f       	mov	r24, r28
     44e:	8f 70       	andi	r24, 0x0F	; 15
     450:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <_Z9Lcd4_Initv>:
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	0e 94 a3 01 	call	0x346	; 0x346 <_Z9Lcd4_Portc>
     45e:	87 e8       	ldi	r24, 0x87	; 135
     460:	93 e1       	ldi	r25, 0x13	; 19
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <_Z9Lcd4_Initv+0xa>
     466:	00 c0       	rjmp	.+0      	; 0x468 <_Z9Lcd4_Initv+0x10>
     468:	00 00       	nop
     46a:	83 e0       	ldi	r24, 0x03	; 3
     46c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     470:	81 ee       	ldi	r24, 0xE1	; 225
     472:	94 e0       	ldi	r25, 0x04	; 4
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <_Z9Lcd4_Initv+0x1c>
     478:	00 c0       	rjmp	.+0      	; 0x47a <_Z9Lcd4_Initv+0x22>
     47a:	00 00       	nop
     47c:	83 e0       	ldi	r24, 0x03	; 3
     47e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     482:	8d eb       	ldi	r24, 0xBD	; 189
     484:	9a e0       	ldi	r25, 0x0A	; 10
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <_Z9Lcd4_Initv+0x2e>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <_Z9Lcd4_Initv+0x34>
     48c:	00 00       	nop
     48e:	83 e0       	ldi	r24, 0x03	; 3
     490:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     49a:	82 e0       	ldi	r24, 0x02	; 2
     49c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     4a0:	88 e0       	ldi	r24, 0x08	; 8
     4a2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     4ac:	8c e0       	ldi	r24, 0x0C	; 12
     4ae:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     4b8:	86 e0       	ldi	r24, 0x06	; 6
     4ba:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     4be:	08 95       	ret

000004c0 <_Z15Lcd4_Write_Charc>:
     4c0:	cf 93       	push	r28
     4c2:	c8 2f       	mov	r28, r24
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	8a e1       	ldi	r24, 0x1A	; 26
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     4d0:	8c 2f       	mov	r24, r28
     4d2:	82 95       	swap	r24
     4d4:	8f 70       	andi	r24, 0x0F	; 15
     4d6:	0e 94 a3 01 	call	0x346	; 0x346 <_Z9Lcd4_Portc>
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	8b e1       	ldi	r24, 0x1B	; 27
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     4e6:	89 ef       	ldi	r24, 0xF9	; 249
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <_Z15Lcd4_Write_Charc+0x2a>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <_Z15Lcd4_Write_Charc+0x30>
     4f0:	00 00       	nop
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	8b e1       	ldi	r24, 0x1B	; 27
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     4fe:	89 ef       	ldi	r24, 0xF9	; 249
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	f1 f7       	brne	.-4      	; 0x502 <_Z15Lcd4_Write_Charc+0x42>
     506:	00 c0       	rjmp	.+0      	; 0x508 <_Z15Lcd4_Write_Charc+0x48>
     508:	00 00       	nop
     50a:	8c 2f       	mov	r24, r28
     50c:	8f 70       	andi	r24, 0x0F	; 15
     50e:	0e 94 a3 01 	call	0x346	; 0x346 <_Z9Lcd4_Portc>
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	8b e1       	ldi	r24, 0x1B	; 27
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     51e:	89 ef       	ldi	r24, 0xF9	; 249
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <_Z15Lcd4_Write_Charc+0x62>
     526:	00 c0       	rjmp	.+0      	; 0x528 <_Z15Lcd4_Write_Charc+0x68>
     528:	00 00       	nop
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	8b e1       	ldi	r24, 0x1B	; 27
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     536:	89 ef       	ldi	r24, 0xF9	; 249
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	f1 f7       	brne	.-4      	; 0x53a <_Z15Lcd4_Write_Charc+0x7a>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <_Z15Lcd4_Write_Charc+0x80>
     540:	00 00       	nop
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <_Z17Lcd4_Write_StringPc>:
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	ec 01       	movw	r28, r24
     54c:	88 81       	ld	r24, Y
     54e:	88 23       	and	r24, r24
     550:	31 f0       	breq	.+12     	; 0x55e <_Z17Lcd4_Write_StringPc+0x18>
     552:	21 96       	adiw	r28, 0x01	; 1
     554:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z15Lcd4_Write_Charc>
     558:	89 91       	ld	r24, Y+
     55a:	81 11       	cpse	r24, r1
     55c:	fb cf       	rjmp	.-10     	; 0x554 <_Z17Lcd4_Write_StringPc+0xe>
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	08 95       	ret

00000564 <_ZN14GameControllerC1Ev>:
	public:
	int displayBoard[BOARD_HEIGHT][BOARD_WIDTH];



	GameController() {
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	ec 01       	movw	r28, r24
    


public:
    Player() {
        playerPosition = Position(4,BOARD_HEIGHT-1);
     572:	84 e0       	ldi	r24, 0x04	; 4
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	9a 87       	std	Y+10, r25	; 0x0a
     578:	89 87       	std	Y+9, r24	; 0x09
     57a:	8f e0       	ldi	r24, 0x0F	; 15
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	9c 87       	std	Y+12, r25	; 0x0c
     580:	8b 87       	std	Y+11, r24	; 0x0b
        readyToMove = true;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	8d 87       	std	Y+13, r24	; 0x0d
     586:	fe 01       	movw	r30, r28
     588:	3e 96       	adiw	r30, 0x0e	; 14
     58a:	9e 01       	movw	r18, r28
     58c:	27 5d       	subi	r18, 0xD7	; 215
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     590:	11 82       	std	Z+1, r1	; 0x01
     592:	10 82       	st	Z, r1
        y = 0;
     594:	13 82       	std	Z+3, r1	; 0x03
     596:	12 82       	std	Z+2, r1	; 0x02
    unsigned int moveTimerCounter;

public:

    Enemy() {
        alive = true;
     598:	84 83       	std	Z+4, r24	; 0x04
     59a:	39 96       	adiw	r30, 0x09	; 9
     59c:	2e 17       	cp	r18, r30
     59e:	3f 07       	cpc	r19, r31
     5a0:	b9 f7       	brne	.-18     	; 0x590 <_ZN14GameControllerC1Ev+0x2c>
     5a2:	fe 01       	movw	r30, r28
     5a4:	bd 96       	adiw	r30, 0x2d	; 45
     5a6:	ce 01       	movw	r24, r28
     5a8:	8f 51       	subi	r24, 0x1F	; 31
     5aa:	9f 4f       	sbci	r25, 0xFF	; 255
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     5ac:	11 82       	std	Z+1, r1	; 0x01
     5ae:	10 82       	st	Z, r1
        y = 0;
     5b0:	13 82       	std	Z+3, r1	; 0x03
     5b2:	12 82       	std	Z+2, r1	; 0x02

public:

    NewBullet() {

        isActiveOnBoard = false;
     5b4:	14 82       	std	Z+4, r1	; 0x04
        bulletPosition = Position(0, 0);
        moveTimeCounter = 0;
     5b6:	16 82       	std	Z+6, r1	; 0x06
     5b8:	15 82       	std	Z+5, r1	; 0x05
     5ba:	39 96       	adiw	r30, 0x09	; 9
     5bc:	e8 17       	cp	r30, r24
     5be:	f9 07       	cpc	r31, r25
     5c0:	a9 f7       	brne	.-22     	; 0x5ac <_ZN14GameControllerC1Ev+0x48>
    //    newBullet1 = NewBullet(0, 0,0);
    //    newBullet2 = NewBullet(2000, 0,0);
    //    newBullet3 = NewBullet(4000, 0,0);
    //    newBullet4 = NewBullet(6000, 0,0);

	enemyBulletCollisionCounter = 0;
     5c2:	19 82       	std	Y+1, r1	; 0x01
     5c4:	18 82       	st	Y, r1
	enemyPlayerCollisionCounter = 0;
     5c6:	1b 82       	std	Y+3, r1	; 0x03
     5c8:	1a 82       	std	Y+2, r1	; 0x02
	bulletReadyToShoot = true;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	88 87       	std	Y+8, r24	; 0x08
	
	score1 = (char *)malloc(4*sizeof(char));
     5ce:	84 e0       	ldi	r24, 0x04	; 4
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <malloc>
     5d6:	9d 83       	std	Y+5, r25	; 0x05
     5d8:	8c 83       	std	Y+4, r24	; 0x04
	score2 = (char *)malloc(4*sizeof(char));
     5da:	84 e0       	ldi	r24, 0x04	; 4
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <malloc>
     5e2:	9f 83       	std	Y+7, r25	; 0x07
     5e4:	8e 83       	std	Y+6, r24	; 0x06
     5e6:	7e 01       	movw	r14, r28
     5e8:	00 e0       	ldi	r16, 0x00	; 0
     5ea:	10 e0       	ldi	r17, 0x00	; 0
	//Enemy enemy1, enemy2, enemy3;

	Enemy enemyPool[ENEMY_POOL_SIZE];

	 int getRandomBoardXCordinate() {
		 	return rand() % BOARD_WIDTH;
     5ec:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <rand>
     5f0:	f7 01       	movw	r30, r14
	score1 = (char *)malloc(4*sizeof(char));
	score2 = (char *)malloc(4*sizeof(char));
	
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {

		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
     5f2:	87 70       	andi	r24, 0x07	; 7
     5f4:	90 78       	andi	r25, 0x80	; 128
     5f6:	99 23       	and	r25, r25
     5f8:	24 f4       	brge	.+8      	; 0x602 <_ZN14GameControllerC1Ev+0x9e>
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	88 6f       	ori	r24, 0xF8	; 248
     5fe:	9f 6f       	ori	r25, 0xFF	; 255
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	97 87       	std	Z+15, r25	; 0x0f
     604:	86 87       	std	Z+14, r24	; 0x0e
     606:	11 8a       	std	Z+17, r1	; 0x11
     608:	10 8a       	std	Z+16, r1	; 0x10
     60a:	12 8a       	std	Z+18, r1	; 0x12
     60c:	14 8b       	std	Z+20, r17	; 0x14
     60e:	03 8b       	std	Z+19, r16	; 0x13
     610:	16 8a       	std	Z+22, r1	; 0x16
     612:	15 8a       	std	Z+21, r1	; 0x15
     614:	89 e0       	ldi	r24, 0x09	; 9
     616:	e8 0e       	add	r14, r24
     618:	f1 1c       	adc	r15, r1
     61a:	0c 50       	subi	r16, 0x0C	; 12
     61c:	1e 4f       	sbci	r17, 0xFE	; 254
	bulletReadyToShoot = true;
	
	score1 = (char *)malloc(4*sizeof(char));
	score2 = (char *)malloc(4*sizeof(char));
	
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
     61e:	0c 3d       	cpi	r16, 0xDC	; 220
     620:	85 e0       	ldi	r24, 0x05	; 5
     622:	18 07       	cpc	r17, r24
     624:	19 f7       	brne	.-58     	; 0x5ec <_ZN14GameControllerC1Ev+0x88>
     626:	de 01       	movw	r26, r28
     628:	9d 96       	adiw	r26, 0x2d	; 45
     62a:	fe 01       	movw	r30, r28
     62c:	ef 51       	subi	r30, 0x1F	; 31
     62e:	ff 4f       	sbci	r31, 0xFF	; 255
		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
	}


	    for(int i = 0; i < BULLET_POOL_SIZE; i++) {
		    bulletPool[i] = NewBullet(0,0,0);
     630:	11 96       	adiw	r26, 0x01	; 1
     632:	1c 92       	st	X, r1
     634:	1e 92       	st	-X, r1
     636:	13 96       	adiw	r26, 0x03	; 3
     638:	1c 92       	st	X, r1
     63a:	1e 92       	st	-X, r1
     63c:	12 97       	sbiw	r26, 0x02	; 2
     63e:	14 96       	adiw	r26, 0x04	; 4
     640:	1c 92       	st	X, r1
     642:	14 97       	sbiw	r26, 0x04	; 4
     644:	16 96       	adiw	r26, 0x06	; 6
     646:	1c 92       	st	X, r1
     648:	1e 92       	st	-X, r1
     64a:	15 97       	sbiw	r26, 0x05	; 5
     64c:	18 96       	adiw	r26, 0x08	; 8
     64e:	1c 92       	st	X, r1
     650:	1e 92       	st	-X, r1
     652:	17 97       	sbiw	r26, 0x07	; 7
     654:	19 96       	adiw	r26, 0x09	; 9

		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
	}


	    for(int i = 0; i < BULLET_POOL_SIZE; i++) {
     656:	ae 17       	cp	r26, r30
     658:	bf 07       	cpc	r27, r31
     65a:	51 f7       	brne	.-44     	; 0x630 <_ZN14GameControllerC1Ev+0xcc>
     65c:	9e 01       	movw	r18, r28
     65e:	2f 51       	subi	r18, 0x1F	; 31
     660:	3e 4f       	sbci	r19, 0xFE	; 254
     662:	cf 01       	movw	r24, r30
     664:	40 96       	adiw	r24, 0x10	; 16

		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				displayBoard[i][j] = 0;
     666:	11 92       	st	Z+, r1
     668:	11 92       	st	Z+, r1


		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
     66a:	e8 17       	cp	r30, r24
     66c:	f9 07       	cpc	r31, r25
     66e:	d9 f7       	brne	.-10     	; 0x666 <_ZN14GameControllerC1Ev+0x102>
     670:	fc 01       	movw	r30, r24



		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++) {
     672:	28 17       	cp	r18, r24
     674:	39 07       	cpc	r19, r25
     676:	a9 f7       	brne	.-22     	; 0x662 <_ZN14GameControllerC1Ev+0xfe>
			for (int j = 0; j < cols; j++) {
				displayBoard[i][j] = 0;
			}
		}
	}
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	ff 90       	pop	r15
     682:	ef 90       	pop	r14
     684:	08 95       	ret

00000686 <_Z13softwareSetupv>:
#include "headers/game/GameController.h"
#include "headers/utils/HardwareController.h"

GameController gameController;

void softwareSetup() {
     686:	af 92       	push	r10
     688:	bf 92       	push	r11
     68a:	cf 92       	push	r12
     68c:	df 92       	push	r13
     68e:	ef 92       	push	r14
     690:	ff 92       	push	r15
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	c1 5e       	subi	r28, 0xE1	; 225
     6a0:	d1 40       	sbci	r29, 0x01	; 1
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
    


public:
    Player() {
        playerPosition = Position(4,BOARD_HEIGHT-1);
     6ac:	84 e0       	ldi	r24, 0x04	; 4
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	9b 87       	std	Y+11, r25	; 0x0b
     6b2:	8a 87       	std	Y+10, r24	; 0x0a
     6b4:	8f e0       	ldi	r24, 0x0F	; 15
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	9d 87       	std	Y+13, r25	; 0x0d
     6ba:	8c 87       	std	Y+12, r24	; 0x0c
        readyToMove = true;
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	8e 87       	std	Y+14, r24	; 0x0e
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     6c0:	18 8a       	std	Y+16, r1	; 0x10
     6c2:	1f 86       	std	Y+15, r1	; 0x0f
        y = 0;
     6c4:	1a 8a       	std	Y+18, r1	; 0x12
     6c6:	19 8a       	std	Y+17, r1	; 0x11
     6c8:	8b 8b       	std	Y+19, r24	; 0x13
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     6ca:	19 8e       	std	Y+25, r1	; 0x19
     6cc:	18 8e       	std	Y+24, r1	; 0x18
        y = 0;
     6ce:	1b 8e       	std	Y+27, r1	; 0x1b
     6d0:	1a 8e       	std	Y+26, r1	; 0x1a
     6d2:	8c 8f       	std	Y+28, r24	; 0x1c
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     6d4:	1a a2       	std	Y+34, r1	; 0x22
     6d6:	19 a2       	std	Y+33, r1	; 0x21
        y = 0;
     6d8:	1c a2       	std	Y+36, r1	; 0x24
     6da:	1b a2       	std	Y+35, r1	; 0x23
     6dc:	8d a3       	std	Y+37, r24	; 0x25
     6de:	7e 01       	movw	r14, r28
     6e0:	8e e2       	ldi	r24, 0x2E	; 46
     6e2:	e8 0e       	add	r14, r24
     6e4:	f1 1c       	adc	r15, r1
     6e6:	8e 01       	movw	r16, r28
     6e8:	0e 51       	subi	r16, 0x1E	; 30
     6ea:	1f 4f       	sbci	r17, 0xFF	; 255
     6ec:	f7 01       	movw	r30, r14
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     6ee:	11 82       	std	Z+1, r1	; 0x01
     6f0:	10 82       	st	Z, r1
        y = 0;
     6f2:	13 82       	std	Z+3, r1	; 0x03
     6f4:	12 82       	std	Z+2, r1	; 0x02

public:

    NewBullet() {

        isActiveOnBoard = false;
     6f6:	14 82       	std	Z+4, r1	; 0x04
        bulletPosition = Position(0, 0);
        moveTimeCounter = 0;
     6f8:	16 82       	std	Z+6, r1	; 0x06
     6fa:	15 82       	std	Z+5, r1	; 0x05
     6fc:	39 96       	adiw	r30, 0x09	; 9
	public:
	int displayBoard[BOARD_HEIGHT][BOARD_WIDTH];



	GameController() {
     6fe:	0e 17       	cp	r16, r30
     700:	1f 07       	cpc	r17, r31
     702:	a9 f7       	brne	.-22     	; 0x6ee <_Z13softwareSetupv+0x68>
     704:	88 c0       	rjmp	.+272    	; 0x816 <_Z13softwareSetupv+0x190>
	//Enemy enemy1, enemy2, enemy3;

	Enemy enemyPool[ENEMY_POOL_SIZE];

	 int getRandomBoardXCordinate() {
		 	return rand() % BOARD_WIDTH;
     706:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <rand>
     70a:	f5 01       	movw	r30, r10
	score1 = (char *)malloc(4*sizeof(char));
	score2 = (char *)malloc(4*sizeof(char));
	
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {

		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
     70c:	87 70       	andi	r24, 0x07	; 7
     70e:	90 78       	andi	r25, 0x80	; 128
     710:	99 23       	and	r25, r25
     712:	24 f4       	brge	.+8      	; 0x71c <_Z13softwareSetupv+0x96>
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	88 6f       	ori	r24, 0xF8	; 248
     718:	9f 6f       	ori	r25, 0xFF	; 255
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	97 87       	std	Z+15, r25	; 0x0f
     71e:	86 87       	std	Z+14, r24	; 0x0e
     720:	11 8a       	std	Z+17, r1	; 0x11
     722:	10 8a       	std	Z+16, r1	; 0x10
     724:	12 8a       	std	Z+18, r1	; 0x12
     726:	d4 8a       	std	Z+20, r13	; 0x14
     728:	c3 8a       	std	Z+19, r12	; 0x13
     72a:	16 8a       	std	Z+22, r1	; 0x16
     72c:	15 8a       	std	Z+21, r1	; 0x15
     72e:	99 e0       	ldi	r25, 0x09	; 9
     730:	a9 0e       	add	r10, r25
     732:	b1 1c       	adc	r11, r1
     734:	ec e0       	ldi	r30, 0x0C	; 12
     736:	ce 1a       	sub	r12, r30
     738:	ee ef       	ldi	r30, 0xFE	; 254
     73a:	de 0a       	sbc	r13, r30
	bulletReadyToShoot = true;
	
	score1 = (char *)malloc(4*sizeof(char));
	score2 = (char *)malloc(4*sizeof(char));
	
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
     73c:	fc ed       	ldi	r31, 0xDC	; 220
     73e:	cf 16       	cp	r12, r31
     740:	f5 e0       	ldi	r31, 0x05	; 5
     742:	df 06       	cpc	r13, r31
     744:	01 f7       	brne	.-64     	; 0x706 <_Z13softwareSetupv+0x80>
		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
	}


	    for(int i = 0; i < BULLET_POOL_SIZE; i++) {
		    bulletPool[i] = NewBullet(0,0,0);
     746:	f7 01       	movw	r30, r14
     748:	11 82       	std	Z+1, r1	; 0x01
     74a:	10 82       	st	Z, r1
     74c:	13 82       	std	Z+3, r1	; 0x03
     74e:	12 82       	std	Z+2, r1	; 0x02
     750:	14 82       	std	Z+4, r1	; 0x04
     752:	16 82       	std	Z+6, r1	; 0x06
     754:	15 82       	std	Z+5, r1	; 0x05
     756:	10 86       	std	Z+8, r1	; 0x08
     758:	17 82       	std	Z+7, r1	; 0x07
     75a:	f9 e0       	ldi	r31, 0x09	; 9
     75c:	ef 0e       	add	r14, r31
     75e:	f1 1c       	adc	r15, r1

		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
	}


	    for(int i = 0; i < BULLET_POOL_SIZE; i++) {
     760:	0e 15       	cp	r16, r14
     762:	1f 05       	cpc	r17, r15
     764:	81 f7       	brne	.-32     	; 0x746 <_Z13softwareSetupv+0xc0>
     766:	9e 01       	movw	r18, r28
     768:	2e 51       	subi	r18, 0x1E	; 30
     76a:	3e 4f       	sbci	r19, 0xFE	; 254
     76c:	c8 01       	movw	r24, r16
     76e:	40 96       	adiw	r24, 0x10	; 16

		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				displayBoard[i][j] = 0;
     770:	f8 01       	movw	r30, r16
     772:	11 92       	st	Z+, r1
     774:	11 92       	st	Z+, r1
     776:	8f 01       	movw	r16, r30


		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
     778:	8e 17       	cp	r24, r30
     77a:	9f 07       	cpc	r25, r31
     77c:	c9 f7       	brne	.-14     	; 0x770 <_Z13softwareSetupv+0xea>
     77e:	8c 01       	movw	r16, r24



		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++) {
     780:	28 17       	cp	r18, r24
     782:	39 07       	cpc	r19, r25
     784:	99 f7       	brne	.-26     	; 0x76c <_Z13softwareSetupv+0xe6>
    gameController = GameController();
     786:	81 ee       	ldi	r24, 0xE1	; 225
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	fe 01       	movw	r30, r28
     78c:	31 96       	adiw	r30, 0x01	; 1
     78e:	ae eb       	ldi	r26, 0xBE	; 190
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	01 90       	ld	r0, Z+
     794:	0d 92       	st	X+, r0
     796:	01 97       	sbiw	r24, 0x01	; 1
     798:	e1 f7       	brne	.-8      	; 0x792 <_Z13softwareSetupv+0x10c>
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     79a:	ee eb       	ldi	r30, 0xBE	; 190
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	63 85       	ldd	r22, Z+11	; 0x0b
     7a0:	74 85       	ldd	r23, Z+12	; 0x0c
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     7a2:	81 85       	ldd	r24, Z+9	; 0x09
     7a4:	92 85       	ldd	r25, Z+10	; 0x0a
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     7a6:	fb 01       	movw	r30, r22
     7a8:	ee 0f       	add	r30, r30
     7aa:	ff 1f       	adc	r31, r31
     7ac:	ee 0f       	add	r30, r30
     7ae:	ff 1f       	adc	r31, r31
     7b0:	ee 0f       	add	r30, r30
     7b2:	ff 1f       	adc	r31, r31
     7b4:	df 01       	movw	r26, r30
     7b6:	a8 0f       	add	r26, r24
     7b8:	b9 1f       	adc	r27, r25
     7ba:	aa 0f       	add	r26, r26
     7bc:	bb 1f       	adc	r27, r27
     7be:	a1 56       	subi	r26, 0x61	; 97
     7c0:	be 4f       	sbci	r27, 0xFE	; 254
     7c2:	43 e0       	ldi	r20, 0x03	; 3
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	4d 93       	st	X+, r20
     7c8:	5c 93       	st	X, r21
     7ca:	dc 01       	movw	r26, r24
     7cc:	11 97       	sbiw	r26, 0x01	; 1
     7ce:	ae 0f       	add	r26, r30
     7d0:	bf 1f       	adc	r27, r31
     7d2:	aa 0f       	add	r26, r26
     7d4:	bb 1f       	adc	r27, r27
     7d6:	a1 56       	subi	r26, 0x61	; 97
     7d8:	be 4f       	sbci	r27, 0xFE	; 254
     7da:	4d 93       	st	X+, r20
     7dc:	5c 93       	st	X, r21
     7de:	9c 01       	movw	r18, r24
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	e2 0f       	add	r30, r18
     7e6:	f3 1f       	adc	r31, r19
     7e8:	ee 0f       	add	r30, r30
     7ea:	ff 1f       	adc	r31, r31
     7ec:	e1 56       	subi	r30, 0x61	; 97
     7ee:	fe 4f       	sbci	r31, 0xFE	; 254
     7f0:	51 83       	std	Z+1, r21	; 0x01
     7f2:	40 83       	st	Z, r20
     7f4:	fb 01       	movw	r30, r22
     7f6:	31 97       	sbiw	r30, 0x01	; 1
     7f8:	ee 0f       	add	r30, r30
     7fa:	ff 1f       	adc	r31, r31
     7fc:	ee 0f       	add	r30, r30
     7fe:	ff 1f       	adc	r31, r31
     800:	ee 0f       	add	r30, r30
     802:	ff 1f       	adc	r31, r31
     804:	e8 0f       	add	r30, r24
     806:	f9 1f       	adc	r31, r25
     808:	ee 0f       	add	r30, r30
     80a:	ff 1f       	adc	r31, r31
     80c:	e1 56       	subi	r30, 0x61	; 97
     80e:	fe 4f       	sbci	r31, 0xFE	; 254
     810:	51 83       	std	Z+1, r21	; 0x01
     812:	40 83       	st	Z, r20
    gameController.initializePlayerPosition();
   // gameController.initEnemyPositions();
}
     814:	18 c0       	rjmp	.+48     	; 0x846 <_Z13softwareSetupv+0x1c0>
    //    newBullet1 = NewBullet(0, 0,0);
    //    newBullet2 = NewBullet(2000, 0,0);
    //    newBullet3 = NewBullet(4000, 0,0);
    //    newBullet4 = NewBullet(6000, 0,0);

	enemyBulletCollisionCounter = 0;
     816:	1a 82       	std	Y+2, r1	; 0x02
     818:	19 82       	std	Y+1, r1	; 0x01
	enemyPlayerCollisionCounter = 0;
     81a:	1c 82       	std	Y+4, r1	; 0x04
     81c:	1b 82       	std	Y+3, r1	; 0x03
	bulletReadyToShoot = true;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	89 87       	std	Y+9, r24	; 0x09
	
	score1 = (char *)malloc(4*sizeof(char));
     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <malloc>
     82a:	9e 83       	std	Y+6, r25	; 0x06
     82c:	8d 83       	std	Y+5, r24	; 0x05
	score2 = (char *)malloc(4*sizeof(char));
     82e:	84 e0       	ldi	r24, 0x04	; 4
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <malloc>
     836:	98 87       	std	Y+8, r25	; 0x08
     838:	8f 83       	std	Y+7, r24	; 0x07
     83a:	ce 01       	movw	r24, r28
     83c:	01 96       	adiw	r24, 0x01	; 1
     83e:	5c 01       	movw	r10, r24
     840:	c1 2c       	mov	r12, r1
     842:	d1 2c       	mov	r13, r1
     844:	60 cf       	rjmp	.-320    	; 0x706 <_Z13softwareSetupv+0x80>
     846:	cf 51       	subi	r28, 0x1F	; 31
     848:	de 4f       	sbci	r29, 0xFE	; 254
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	df 90       	pop	r13
     862:	cf 90       	pop	r12
     864:	bf 90       	pop	r11
     866:	af 90       	pop	r10
     868:	08 95       	ret

0000086a <_Z5setupv>:


void setup() {
    softwareSetup();
     86a:	0e 94 43 03 	call	0x686	; 0x686 <_Z13softwareSetupv>
	}

	static void hardWareSetup()
	{
		//LED MATRIX OUTPUT
		DDRA = 0b11111000;
     86e:	88 ef       	ldi	r24, 0xF8	; 248
     870:	8a bb       	out	0x1a, r24	; 26
		DDRB = 255;
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	87 bb       	out	0x17, r24	; 23
		//LCD DISPLAY
		DDRD = 0xFF;
     876:	81 bb       	out	0x11, r24	; 17
		DDRC = 0xFF;
     878:	84 bb       	out	0x14, r24	; 20
		Lcd4_Init();
     87a:	0e 94 2c 02 	call	0x458	; 0x458 <_Z9Lcd4_Initv>
		}
	}

	static void displayLcd(char * upper,char * lower)
	{
		Lcd4_Clear();
     87e:	0e 94 08 02 	call	0x410	; 0x410 <_Z10Lcd4_Clearv>
		Lcd4_Set_Cursor(1, 0);
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z15Lcd4_Set_Cursorcc>
		Lcd4_Write_String(upper);
     88a:	82 e7       	ldi	r24, 0x72	; 114
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17Lcd4_Write_StringPc>
		Lcd4_Set_Cursor(2, 0);
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	82 e0       	ldi	r24, 0x02	; 2
     896:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z15Lcd4_Set_Cursorcc>
		Lcd4_Write_String(lower);
     89a:	8b e7       	ldi	r24, 0x7B	; 123
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17Lcd4_Write_StringPc>
     8a2:	08 95       	ret

000008a4 <_Z4loopj>:
	HardwareController::hardWareSetup();
	
}


void loop(unsigned loopNo) {
     8a4:	2f 92       	push	r2
     8a6:	3f 92       	push	r3
     8a8:	4f 92       	push	r4
     8aa:	5f 92       	push	r5
     8ac:	6f 92       	push	r6
     8ae:	7f 92       	push	r7
     8b0:	8f 92       	push	r8
     8b2:	9f 92       	push	r9
     8b4:	af 92       	push	r10
     8b6:	bf 92       	push	r11
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
     8cc:	6c 97       	sbiw	r28, 0x1c	; 28
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
	int getLoopNo() const {
		return loopNo;
	}

	void setLoopNo(int loopNo) {
		GameController::loopNo = loopNo;
     8d8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__data_end+0x2a>
     8dc:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__data_end+0x29>
     8e0:	0f 2e       	mov	r0, r31
     8e2:	fe eb       	ldi	r31, 0xBE	; 190
     8e4:	af 2e       	mov	r10, r31
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	bf 2e       	mov	r11, r31
     8ea:	f0 2d       	mov	r31, r0
     8ec:	75 01       	movw	r14, r10
		// else if(enemyNo == 3)moveTime = ENEMY3_MOVE_TIME;

		unsigned int currentTime = enemy.getSpawnTimerCounter();
		enemy.setSpawnTimerCounter(currentTime + 1);

		if( enemy.getSpawnTimerCounter() % ENEMY_SPAWN_TIME_NEW == 0 ) {
     8ee:	0f 2e       	mov	r0, r31
     8f0:	f8 eb       	ldi	r31, 0xB8	; 184
     8f2:	cf 2e       	mov	r12, r31
     8f4:	fb e0       	ldi	r31, 0x0B	; 11
     8f6:	df 2e       	mov	r13, r31
     8f8:	f0 2d       	mov	r31, r0
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
     8fa:	55 24       	eor	r5, r5
     8fc:	53 94       	inc	r5
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     8fe:	68 94       	set
     900:	88 24       	eor	r8, r8
     902:	81 f8       	bld	r8, 1
     904:	91 2c       	mov	r9, r1
     906:	87 01       	movw	r16, r14
		// else if(enemyNo == 2)
		// moveTime = ENEMY2_MOVE_TIME;
		// else if(enemyNo == 3)moveTime = ENEMY3_MOVE_TIME;

		unsigned int currentTime = enemy.getSpawnTimerCounter();
		enemy.setSpawnTimerCounter(currentTime + 1);
     908:	d7 01       	movw	r26, r14
     90a:	53 96       	adiw	r26, 0x13	; 19
     90c:	4d 91       	ld	r20, X+
     90e:	5c 91       	ld	r21, X
     910:	54 97       	sbiw	r26, 0x14	; 20
     912:	4f 5f       	subi	r20, 0xFF	; 255
     914:	5f 4f       	sbci	r21, 0xFF	; 255

		if( enemy.getSpawnTimerCounter() % ENEMY_SPAWN_TIME_NEW == 0 ) {
     916:	9a 01       	movw	r18, r20
     918:	36 95       	lsr	r19
     91a:	27 95       	ror	r18
     91c:	36 95       	lsr	r19
     91e:	27 95       	ror	r18
     920:	36 95       	lsr	r19
     922:	27 95       	ror	r18
     924:	a9 ed       	ldi	r26, 0xD9	; 217
     926:	b5 e1       	ldi	r27, 0x15	; 21
     928:	0e 94 df 08 	call	0x11be	; 0x11be <__umulhisi3>
     92c:	96 95       	lsr	r25
     92e:	87 95       	ror	r24
     930:	92 95       	swap	r25
     932:	82 95       	swap	r24
     934:	8f 70       	andi	r24, 0x0F	; 15
     936:	89 27       	eor	r24, r25
     938:	9f 70       	andi	r25, 0x0F	; 15
     93a:	89 27       	eor	r24, r25
     93c:	8c 9d       	mul	r24, r12
     93e:	90 01       	movw	r18, r0
     940:	8d 9d       	mul	r24, r13
     942:	30 0d       	add	r19, r0
     944:	9c 9d       	mul	r25, r12
     946:	30 0d       	add	r19, r0
     948:	11 24       	eor	r1, r1
     94a:	42 17       	cp	r20, r18
     94c:	53 07       	cpc	r21, r19
     94e:	21 f0       	breq	.+8      	; 0x958 <_Z4loopj+0xb4>
    unsigned int getSpawnTimerCounter() const {
        return spawnTimerCounter;
    }

    void setSpawnTimerCounter(unsigned int spawnTimerCounter) {
        Enemy::spawnTimerCounter = spawnTimerCounter;
     950:	f7 01       	movw	r30, r14
     952:	54 8b       	std	Z+20, r21	; 0x14
     954:	43 8b       	std	Z+19, r20	; 0x13
     956:	20 c0       	rjmp	.+64     	; 0x998 <_Z4loopj+0xf4>
     958:	d7 01       	movw	r26, r14
     95a:	54 96       	adiw	r26, 0x14	; 20
     95c:	1c 92       	st	X, r1
     95e:	1e 92       	st	-X, r1
     960:	53 97       	sbiw	r26, 0x13	; 19
			enemy.setSpawnTimerCounter(0);

			if ( !enemy.isAlive() ) {
     962:	52 96       	adiw	r26, 0x12	; 18
     964:	8c 91       	ld	r24, X
     966:	81 11       	cpse	r24, r1
     968:	17 c0       	rjmp	.+46     	; 0x998 <_Z4loopj+0xf4>
	//Enemy enemy1, enemy2, enemy3;

	Enemy enemyPool[ENEMY_POOL_SIZE];

	 int getRandomBoardXCordinate() {
		 	return rand() % BOARD_WIDTH;
     96a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <rand>
     96e:	87 70       	andi	r24, 0x07	; 7
     970:	90 78       	andi	r25, 0x80	; 128
     972:	99 23       	and	r25, r25
     974:	24 f4       	brge	.+8      	; 0x97e <_Z4loopj+0xda>
     976:	01 97       	sbiw	r24, 0x01	; 1
     978:	88 6f       	ori	r24, 0xF8	; 248
     97a:	9f 6f       	ori	r25, 0xFF	; 255
     97c:	01 96       	adiw	r24, 0x01	; 1
    }

    void setX(int x) {
        Position::x = x;
     97e:	f8 01       	movw	r30, r16
     980:	97 87       	std	Z+15, r25	; 0x0f
     982:	86 87       	std	Z+14, r24	; 0x0e
    int getY() const {
        return y;
    }

    void setY(int y) {
        Position::y = y;
     984:	11 8a       	std	Z+17, r1	; 0x11
     986:	10 8a       	std	Z+16, r1	; 0x10
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
     988:	52 8a       	std	Z+18, r5	; 0x12
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	fc 01       	movw	r30, r24
     990:	e1 56       	subi	r30, 0x61	; 97
     992:	fe 4f       	sbci	r31, 0xFE	; 254
     994:	91 82       	std	Z+1, r9	; 0x01
     996:	80 82       	st	Z, r8
				setIndexInBoard(enemy.getX(), enemy.getY(),2);
			}
		}
		
		
		enemy.setMoveTimeCounter(enemy.getMoveTimeCounter() + 1);
     998:	d8 01       	movw	r26, r16
     99a:	55 96       	adiw	r26, 0x15	; 21
     99c:	8d 91       	ld	r24, X+
     99e:	9c 91       	ld	r25, X
     9a0:	56 97       	sbiw	r26, 0x16	; 22
     9a2:	01 96       	adiw	r24, 0x01	; 1
    unsigned int getMoveTimeCounter() const {
        return moveTimerCounter;
    }

    void setMoveTimeCounter(unsigned int moveTimerCounterarg) {
        Enemy::moveTimerCounter = moveTimerCounterarg;
     9a4:	56 96       	adiw	r26, 0x16	; 22
     9a6:	9c 93       	st	X, r25
     9a8:	8e 93       	st	-X, r24
     9aa:	55 97       	sbiw	r26, 0x15	; 21
	

		if (enemy.getMoveTimeCounter() >= ENEMY_MOVE_TIME_NEW && enemy.isAlive()) {
     9ac:	80 39       	cpi	r24, 0x90	; 144
     9ae:	91 40       	sbci	r25, 0x01	; 1
     9b0:	08 f4       	brcc	.+2      	; 0x9b4 <_Z4loopj+0x110>
     9b2:	4f c0       	rjmp	.+158    	; 0xa52 <_Z4loopj+0x1ae>
     9b4:	f8 01       	movw	r30, r16
     9b6:	82 89       	ldd	r24, Z+18	; 0x12
     9b8:	88 23       	and	r24, r24
     9ba:	09 f4       	brne	.+2      	; 0x9be <_Z4loopj+0x11a>
     9bc:	4a c0       	rjmp	.+148    	; 0xa52 <_Z4loopj+0x1ae>
    int getY() const {
        return enemyPosition.getY();
    }

    const Position getEnemyPosition() const {
        return enemyPosition;
     9be:	86 85       	ldd	r24, Z+14	; 0x0e
     9c0:	97 85       	ldd	r25, Z+15	; 0x0f
     9c2:	a0 89       	ldd	r26, Z+16	; 0x10
     9c4:	b1 89       	ldd	r27, Z+17	; 0x11
     9c6:	9d 01       	movw	r18, r26
    int getX() const {
        return x;
    }

    void setX(int x) {
        Position::x = x;
     9c8:	97 87       	std	Z+15, r25	; 0x0f
     9ca:	86 87       	std	Z+14, r24	; 0x0e
    int getY() const {
        return y;
    }

    void setY(int y) {
        Position::y = y;
     9cc:	ad 01       	movw	r20, r26
     9ce:	4f 5f       	subi	r20, 0xFF	; 255
     9d0:	5f 4f       	sbci	r21, 0xFF	; 255
     9d2:	4f 70       	andi	r20, 0x0F	; 15
     9d4:	50 78       	andi	r21, 0x80	; 128
     9d6:	55 23       	and	r21, r21
     9d8:	34 f4       	brge	.+12     	; 0x9e6 <_Z4loopj+0x142>
     9da:	41 50       	subi	r20, 0x01	; 1
     9dc:	51 09       	sbc	r21, r1
     9de:	40 6f       	ori	r20, 0xF0	; 240
     9e0:	5f 6f       	ori	r21, 0xFF	; 255
     9e2:	4f 5f       	subi	r20, 0xFF	; 255
     9e4:	5f 4f       	sbci	r21, 0xFF	; 255
     9e6:	f8 01       	movw	r30, r16
     9e8:	51 8b       	std	Z+17, r21	; 0x11
     9ea:	40 8b       	std	Z+16, r20	; 0x10
    unsigned int getMoveTimeCounter() const {
        return moveTimerCounter;
    }

    void setMoveTimeCounter(unsigned int moveTimerCounterarg) {
        Enemy::moveTimerCounter = moveTimerCounterarg;
     9ec:	16 8a       	std	Z+22, r1	; 0x16
     9ee:	15 8a       	std	Z+21, r1	; 0x15
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     9f0:	fd 01       	movw	r30, r26
     9f2:	ee 0f       	add	r30, r30
     9f4:	ff 1f       	adc	r31, r31
     9f6:	ee 0f       	add	r30, r30
     9f8:	ff 1f       	adc	r31, r31
     9fa:	ee 0f       	add	r30, r30
     9fc:	ff 1f       	adc	r31, r31
     9fe:	8e 0f       	add	r24, r30
     a00:	9f 1f       	adc	r25, r31
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	fc 01       	movw	r30, r24
     a08:	e1 56       	subi	r30, 0x61	; 97
     a0a:	fe 4f       	sbci	r31, 0xFE	; 254
     a0c:	11 82       	std	Z+1, r1	; 0x01
     a0e:	10 82       	st	Z, r1
			enemy.setEnemyPosition(prevX,(prevY+1)%BOARD_HEIGHT);
			////printStringToConsole("Enemy "+to_string(enemyNo)+"("+to_string(enemy.getX())+","+to_string(enemy.getY())+")");
			enemy.setMoveTimeCounter(0);
			resetIndexInBoard(prevX,prevY);

			if(prevY == BOARD_HEIGHT - 1) {
     a10:	2f 30       	cpi	r18, 0x0F	; 15
     a12:	31 05       	cpc	r19, r1
     a14:	21 f4       	brne	.+8      	; 0xa1e <_Z4loopj+0x17a>
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
     a16:	d8 01       	movw	r26, r16
     a18:	52 96       	adiw	r26, 0x12	; 18
     a1a:	1c 92       	st	X, r1
     a1c:	1a c0       	rjmp	.+52     	; 0xa52 <_Z4loopj+0x1ae>
				enemy.setIsAlive(false);
			}
		
		if(enemy.isAlive())	setIndexInBoard(enemy.getX(),enemy.getY(), ENEMY_STATUS_IN_BOARD); // no need to display if dead
     a1e:	f8 01       	movw	r30, r16
     a20:	82 89       	ldd	r24, Z+18	; 0x12
     a22:	88 23       	and	r24, r24
     a24:	b1 f0       	breq	.+44     	; 0xa52 <_Z4loopj+0x1ae>
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     a26:	00 88       	ldd	r0, Z+16	; 0x10
     a28:	f1 89       	ldd	r31, Z+17	; 0x11
     a2a:	e0 2d       	mov	r30, r0
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     a2c:	d8 01       	movw	r26, r16
     a2e:	1e 96       	adiw	r26, 0x0e	; 14
     a30:	8d 91       	ld	r24, X+
     a32:	9c 91       	ld	r25, X
     a34:	1f 97       	sbiw	r26, 0x0f	; 15
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     a36:	ee 0f       	add	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	ee 0f       	add	r30, r30
     a3c:	ff 1f       	adc	r31, r31
     a3e:	ee 0f       	add	r30, r30
     a40:	ff 1f       	adc	r31, r31
     a42:	e8 0f       	add	r30, r24
     a44:	f9 1f       	adc	r31, r25
     a46:	ee 0f       	add	r30, r30
     a48:	ff 1f       	adc	r31, r31
     a4a:	e1 56       	subi	r30, 0x61	; 97
     a4c:	fe 4f       	sbci	r31, 0xFE	; 254
     a4e:	91 82       	std	Z+1, r9	; 0x01
     a50:	80 82       	st	Z, r8
     a52:	b9 e0       	ldi	r27, 0x09	; 9
     a54:	eb 0e       	add	r14, r27
     a56:	f1 1c       	adc	r15, r1
	void updateEnemyPositions(){
		// updateEnemy(enemy1,1);
		// updateEnemy(enemy2,2);
		// updateEnemy(enemy3,3);

		for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
     a58:	e9 ed       	ldi	r30, 0xD9	; 217
     a5a:	ee 16       	cp	r14, r30
     a5c:	e0 e0       	ldi	r30, 0x00	; 0
     a5e:	fe 06       	cpc	r15, r30
     a60:	09 f0       	breq	.+2      	; 0xa64 <_Z4loopj+0x1c0>
     a62:	51 cf       	rjmp	.-350    	; 0x906 <_Z4loopj+0x62>

	}

	void playerMovementUpdateWithGyro() {

		if(loopNo % PLAYER_MOVE_SPEED_GYRO == 0) {
     a64:	40 91 e7 00 	lds	r20, 0x00E7	; 0x8000e7 <__data_end+0x29>
     a68:	50 91 e8 00 	lds	r21, 0x00E8	; 0x8000e8 <__data_end+0x2a>
     a6c:	9a 01       	movw	r18, r20
     a6e:	36 95       	lsr	r19
     a70:	27 95       	ror	r18
     a72:	36 95       	lsr	r19
     a74:	27 95       	ror	r18
     a76:	ab e3       	ldi	r26, 0x3B	; 59
     a78:	bd e6       	ldi	r27, 0x6D	; 109
     a7a:	0e 94 df 08 	call	0x11be	; 0x11be <__umulhisi3>
     a7e:	96 95       	lsr	r25
     a80:	87 95       	ror	r24
     a82:	92 95       	swap	r25
     a84:	82 95       	swap	r24
     a86:	8f 70       	andi	r24, 0x0F	; 15
     a88:	89 27       	eor	r24, r25
     a8a:	9f 70       	andi	r25, 0x0F	; 15
     a8c:	89 27       	eor	r24, r25
     a8e:	6c e2       	ldi	r22, 0x2C	; 44
     a90:	71 e0       	ldi	r23, 0x01	; 1
     a92:	86 9f       	mul	r24, r22
     a94:	90 01       	movw	r18, r0
     a96:	87 9f       	mul	r24, r23
     a98:	30 0d       	add	r19, r0
     a9a:	96 9f       	mul	r25, r22
     a9c:	30 0d       	add	r19, r0
     a9e:	11 24       	eor	r1, r1
     aa0:	42 17       	cp	r20, r18
     aa2:	53 07       	cpc	r21, r19
     aa4:	21 f4       	brne	.+8      	; 0xaae <_Z4loopj+0x20a>
    bool isReadyToMove() const {
        return readyToMove;
    }

    void setIsReadyToMove(bool ready) {
        Player::readyToMove = ready;
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <__data_end+0xd>
     aac:	05 c0       	rjmp	.+10     	; 0xab8 <_Z4loopj+0x214>
			player.setIsReadyToMove(true);
		}


		if(player.isReadyToMove()) {
     aae:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <__data_end+0xd>
     ab2:	88 23       	and	r24, r24
     ab4:	09 f4       	brne	.+2      	; 0xab8 <_Z4loopj+0x214>
     ab6:	03 c1       	rjmp	.+518    	; 0xcbe <_Z4loopj+0x41a>
			_delay_us(10);
		}
	}

	static int getGyroReading() {
		char rawInput = PINA; 
     ab8:	89 b3       	in	r24, 0x19	; 25

		char inputLSB = rawInput & 0b00000011 ;
		

		switch(inputLSB) {
     aba:	83 70       	andi	r24, 0x03	; 3
     abc:	81 30       	cpi	r24, 0x01	; 1
     abe:	09 f4       	brne	.+2      	; 0xac2 <_Z4loopj+0x21e>
     ac0:	88 c0       	rjmp	.+272    	; 0xbd2 <_Z4loopj+0x32e>
     ac2:	82 30       	cpi	r24, 0x02	; 2
     ac4:	09 f0       	breq	.+2      	; 0xac8 <_Z4loopj+0x224>
     ac6:	fb c0       	rjmp	.+502    	; 0xcbe <_Z4loopj+0x41a>
     ac8:	ee eb       	ldi	r30, 0xBE	; 190
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	21 85       	ldd	r18, Z+9	; 0x09
     ace:	32 85       	ldd	r19, Z+10	; 0x0a
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     ad0:	c3 84       	ldd	r12, Z+11	; 0x0b
     ad2:	d4 84       	ldd	r13, Z+12	; 0x0c

	void shiftPlayerLeft (int shiftPositions) {
		int prevX = player.getX();
		int prevY = player.getY();

		int maxLeftMovement = (prevX - 1);
     ad4:	b9 01       	movw	r22, r18
     ad6:	61 50       	subi	r22, 0x01	; 1
     ad8:	71 09       	sbc	r23, r1
		if(shiftPositions > maxLeftMovement) shiftPositions = maxLeftMovement;
     ada:	16 16       	cp	r1, r22
     adc:	17 06       	cpc	r1, r23
     ade:	14 f0       	brlt	.+4      	; 0xae4 <_Z4loopj+0x240>
     ae0:	cb 01       	movw	r24, r22
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <_Z4loopj+0x244>
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	90 e0       	ldi	r25, 0x00	; 0

		movePlayer( prevX - shiftPositions, prevY);
     ae8:	d9 01       	movw	r26, r18
     aea:	a8 1b       	sub	r26, r24
     aec:	b9 0b       	sbc	r27, r25
     aee:	cd 01       	movw	r24, r26
    int getX() const {
        return x;
    }

    void setX(int x) {
        Position::x = x;
     af0:	0f 2e       	mov	r0, r31
     af2:	fe eb       	ldi	r31, 0xBE	; 190
     af4:	ef 2e       	mov	r14, r31
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	ff 2e       	mov	r15, r31
     afa:	f0 2d       	mov	r31, r0
     afc:	f7 01       	movw	r30, r14
     afe:	b2 87       	std	Z+10, r27	; 0x0a
     b00:	a1 87       	std	Z+9, r26	; 0x09
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     b02:	d6 01       	movw	r26, r12
     b04:	aa 0f       	add	r26, r26
     b06:	bb 1f       	adc	r27, r27
     b08:	aa 0f       	add	r26, r26
     b0a:	bb 1f       	adc	r27, r27
     b0c:	aa 0f       	add	r26, r26
     b0e:	bb 1f       	adc	r27, r27
     b10:	8d 01       	movw	r16, r26
     b12:	02 0f       	add	r16, r18
     b14:	13 1f       	adc	r17, r19
     b16:	00 0f       	add	r16, r16
     b18:	11 1f       	adc	r17, r17
     b1a:	01 56       	subi	r16, 0x61	; 97
     b1c:	1e 4f       	sbci	r17, 0xFE	; 254
     b1e:	f8 01       	movw	r30, r16
     b20:	11 82       	std	Z+1, r1	; 0x01
     b22:	10 82       	st	Z, r1
     b24:	6a 0f       	add	r22, r26
     b26:	7b 1f       	adc	r23, r27
     b28:	66 0f       	add	r22, r22
     b2a:	77 1f       	adc	r23, r23
     b2c:	61 56       	subi	r22, 0x61	; 97
     b2e:	7e 4f       	sbci	r23, 0xFE	; 254
     b30:	fb 01       	movw	r30, r22
     b32:	11 82       	std	Z+1, r1	; 0x01
     b34:	10 82       	st	Z, r1
     b36:	b9 01       	movw	r22, r18
     b38:	6f 5f       	subi	r22, 0xFF	; 255
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	6a 0f       	add	r22, r26
     b3e:	7b 1f       	adc	r23, r27
     b40:	66 0f       	add	r22, r22
     b42:	77 1f       	adc	r23, r23
     b44:	61 56       	subi	r22, 0x61	; 97
     b46:	7e 4f       	sbci	r23, 0xFE	; 254
     b48:	fb 01       	movw	r30, r22
     b4a:	11 82       	std	Z+1, r1	; 0x01
     b4c:	10 82       	st	Z, r1

	void resetPlayerPosition(int x, int y) {
		resetIndexInBoard(x, y);
		resetIndexInBoard(x - 1, y);
		resetIndexInBoard(x + 1, y);
		resetIndexInBoard(x, y - 1);
     b4e:	f6 01       	movw	r30, r12
     b50:	31 97       	sbiw	r30, 0x01	; 1
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     b52:	8f 01       	movw	r16, r30
     b54:	00 0f       	add	r16, r16
     b56:	11 1f       	adc	r17, r17
     b58:	00 0f       	add	r16, r16
     b5a:	11 1f       	adc	r17, r17
     b5c:	00 0f       	add	r16, r16
     b5e:	11 1f       	adc	r17, r17
     b60:	20 0f       	add	r18, r16
     b62:	31 1f       	adc	r19, r17
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	21 56       	subi	r18, 0x61	; 97
     b6a:	3e 4f       	sbci	r19, 0xFE	; 254
     b6c:	f9 01       	movw	r30, r18
     b6e:	11 82       	std	Z+1, r1	; 0x01
     b70:	10 82       	st	Z, r1
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     b72:	bd 01       	movw	r22, r26
     b74:	68 0f       	add	r22, r24
     b76:	79 1f       	adc	r23, r25
     b78:	66 0f       	add	r22, r22
     b7a:	77 1f       	adc	r23, r23
     b7c:	61 56       	subi	r22, 0x61	; 97
     b7e:	7e 4f       	sbci	r23, 0xFE	; 254
     b80:	23 e0       	ldi	r18, 0x03	; 3
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	fb 01       	movw	r30, r22
     b86:	31 83       	std	Z+1, r19	; 0x01
     b88:	20 83       	st	Z, r18
     b8a:	bc 01       	movw	r22, r24
     b8c:	61 50       	subi	r22, 0x01	; 1
     b8e:	71 09       	sbc	r23, r1
     b90:	6a 0f       	add	r22, r26
     b92:	7b 1f       	adc	r23, r27
     b94:	66 0f       	add	r22, r22
     b96:	77 1f       	adc	r23, r23
     b98:	61 56       	subi	r22, 0x61	; 97
     b9a:	7e 4f       	sbci	r23, 0xFE	; 254
     b9c:	fb 01       	movw	r30, r22
     b9e:	31 83       	std	Z+1, r19	; 0x01
     ba0:	20 83       	st	Z, r18
     ba2:	bc 01       	movw	r22, r24
     ba4:	6f 5f       	subi	r22, 0xFF	; 255
     ba6:	7f 4f       	sbci	r23, 0xFF	; 255
     ba8:	a6 0f       	add	r26, r22
     baa:	b7 1f       	adc	r27, r23
     bac:	aa 0f       	add	r26, r26
     bae:	bb 1f       	adc	r27, r27
     bb0:	a1 56       	subi	r26, 0x61	; 97
     bb2:	be 4f       	sbci	r27, 0xFE	; 254
     bb4:	2d 93       	st	X+, r18
     bb6:	3c 93       	st	X, r19
     bb8:	f8 01       	movw	r30, r16
     bba:	e8 0f       	add	r30, r24
     bbc:	f9 1f       	adc	r31, r25
     bbe:	ee 0f       	add	r30, r30
     bc0:	ff 1f       	adc	r31, r31
     bc2:	e1 56       	subi	r30, 0x61	; 97
     bc4:	fe 4f       	sbci	r31, 0xFE	; 254
     bc6:	31 83       	std	Z+1, r19	; 0x01
     bc8:	20 83       	st	Z, r18
     bca:	d7 01       	movw	r26, r14
     bcc:	1d 96       	adiw	r26, 0x0d	; 13
     bce:	1c 92       	st	X, r1
     bd0:	76 c0       	rjmp	.+236    	; 0xcbe <_Z4loopj+0x41a>
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     bd2:	ee eb       	ldi	r30, 0xBE	; 190
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	21 85       	ldd	r18, Z+9	; 0x09
     bd8:	32 85       	ldd	r19, Z+10	; 0x0a
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     bda:	63 85       	ldd	r22, Z+11	; 0x0b
     bdc:	74 85       	ldd	r23, Z+12	; 0x0c

	void shiftPlayerRight (int shiftPositions) {
		int prevX = player.getX();
		int prevY = player.getY();

		int maxRightMovement = (BOARD_WIDTH - prevX - 2);
     bde:	86 e0       	ldi	r24, 0x06	; 6
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	82 1b       	sub	r24, r18
     be4:	93 0b       	sbc	r25, r19
		if(shiftPositions > maxRightMovement) shiftPositions = maxRightMovement;
     be6:	18 16       	cp	r1, r24
     be8:	19 06       	cpc	r1, r25
     bea:	14 f4       	brge	.+4      	; 0xbf0 <_Z4loopj+0x34c>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0

		movePlayer( prevX + shiftPositions, prevY);
     bf0:	82 0f       	add	r24, r18
     bf2:	93 1f       	adc	r25, r19
    int getX() const {
        return x;
    }

    void setX(int x) {
        Position::x = x;
     bf4:	0e eb       	ldi	r16, 0xBE	; 190
     bf6:	10 e0       	ldi	r17, 0x00	; 0
     bf8:	f8 01       	movw	r30, r16
     bfa:	92 87       	std	Z+10, r25	; 0x0a
     bfc:	81 87       	std	Z+9, r24	; 0x09
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     bfe:	db 01       	movw	r26, r22
     c00:	aa 0f       	add	r26, r26
     c02:	bb 1f       	adc	r27, r27
     c04:	aa 0f       	add	r26, r26
     c06:	bb 1f       	adc	r27, r27
     c08:	aa 0f       	add	r26, r26
     c0a:	bb 1f       	adc	r27, r27
     c0c:	fd 01       	movw	r30, r26
     c0e:	e2 0f       	add	r30, r18
     c10:	f3 1f       	adc	r31, r19
     c12:	ee 0f       	add	r30, r30
     c14:	ff 1f       	adc	r31, r31
     c16:	e1 56       	subi	r30, 0x61	; 97
     c18:	fe 4f       	sbci	r31, 0xFE	; 254
     c1a:	11 82       	std	Z+1, r1	; 0x01
     c1c:	10 82       	st	Z, r1
     c1e:	f9 01       	movw	r30, r18
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	ea 0f       	add	r30, r26
     c24:	fb 1f       	adc	r31, r27
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	e1 56       	subi	r30, 0x61	; 97
     c2c:	fe 4f       	sbci	r31, 0xFE	; 254
     c2e:	11 82       	std	Z+1, r1	; 0x01
     c30:	10 82       	st	Z, r1
     c32:	f9 01       	movw	r30, r18
     c34:	31 96       	adiw	r30, 0x01	; 1
     c36:	ea 0f       	add	r30, r26
     c38:	fb 1f       	adc	r31, r27
     c3a:	ee 0f       	add	r30, r30
     c3c:	ff 1f       	adc	r31, r31
     c3e:	e1 56       	subi	r30, 0x61	; 97
     c40:	fe 4f       	sbci	r31, 0xFE	; 254
     c42:	11 82       	std	Z+1, r1	; 0x01
     c44:	10 82       	st	Z, r1

	void resetPlayerPosition(int x, int y) {
		resetIndexInBoard(x, y);
		resetIndexInBoard(x - 1, y);
		resetIndexInBoard(x + 1, y);
		resetIndexInBoard(x, y - 1);
     c46:	61 50       	subi	r22, 0x01	; 1
     c48:	71 09       	sbc	r23, r1
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     c4a:	66 0f       	add	r22, r22
     c4c:	77 1f       	adc	r23, r23
     c4e:	66 0f       	add	r22, r22
     c50:	77 1f       	adc	r23, r23
     c52:	66 0f       	add	r22, r22
     c54:	77 1f       	adc	r23, r23
     c56:	fb 01       	movw	r30, r22
     c58:	e2 0f       	add	r30, r18
     c5a:	f3 1f       	adc	r31, r19
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	e1 56       	subi	r30, 0x61	; 97
     c62:	fe 4f       	sbci	r31, 0xFE	; 254
     c64:	11 82       	std	Z+1, r1	; 0x01
     c66:	10 82       	st	Z, r1
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     c68:	fd 01       	movw	r30, r26
     c6a:	e8 0f       	add	r30, r24
     c6c:	f9 1f       	adc	r31, r25
     c6e:	ee 0f       	add	r30, r30
     c70:	ff 1f       	adc	r31, r31
     c72:	e1 56       	subi	r30, 0x61	; 97
     c74:	fe 4f       	sbci	r31, 0xFE	; 254
     c76:	23 e0       	ldi	r18, 0x03	; 3
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	31 83       	std	Z+1, r19	; 0x01
     c7c:	20 83       	st	Z, r18
     c7e:	fc 01       	movw	r30, r24
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	ea 0f       	add	r30, r26
     c84:	fb 1f       	adc	r31, r27
     c86:	ee 0f       	add	r30, r30
     c88:	ff 1f       	adc	r31, r31
     c8a:	e1 56       	subi	r30, 0x61	; 97
     c8c:	fe 4f       	sbci	r31, 0xFE	; 254
     c8e:	31 83       	std	Z+1, r19	; 0x01
     c90:	20 83       	st	Z, r18
     c92:	fc 01       	movw	r30, r24
     c94:	31 96       	adiw	r30, 0x01	; 1
     c96:	ea 0f       	add	r30, r26
     c98:	fb 1f       	adc	r31, r27
     c9a:	ee 0f       	add	r30, r30
     c9c:	ff 1f       	adc	r31, r31
     c9e:	e1 56       	subi	r30, 0x61	; 97
     ca0:	fe 4f       	sbci	r31, 0xFE	; 254
     ca2:	31 83       	std	Z+1, r19	; 0x01
     ca4:	20 83       	st	Z, r18
     ca6:	fb 01       	movw	r30, r22
     ca8:	e8 0f       	add	r30, r24
     caa:	f9 1f       	adc	r31, r25
     cac:	ee 0f       	add	r30, r30
     cae:	ff 1f       	adc	r31, r31
     cb0:	e1 56       	subi	r30, 0x61	; 97
     cb2:	fe 4f       	sbci	r31, 0xFE	; 254
     cb4:	31 83       	std	Z+1, r19	; 0x01
     cb6:	20 83       	st	Z, r18
     cb8:	d8 01       	movw	r26, r16
     cba:	1d 96       	adiw	r26, 0x0d	; 13
     cbc:	1c 92       	st	X, r1
	}


	void bulletPoll() {

		if(loopNo % BULLET_SHOOT_DELAY == 0) {
     cbe:	9a 01       	movw	r18, r20
     cc0:	36 95       	lsr	r19
     cc2:	27 95       	ror	r18
     cc4:	36 95       	lsr	r19
     cc6:	27 95       	ror	r18
     cc8:	a1 eb       	ldi	r26, 0xB1	; 177
     cca:	bb e2       	ldi	r27, 0x2B	; 43
     ccc:	0e 94 df 08 	call	0x11be	; 0x11be <__umulhisi3>
     cd0:	00 24       	eor	r0, r0
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	00 1c       	adc	r0, r0
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	00 1c       	adc	r0, r0
     cde:	89 2f       	mov	r24, r25
     ce0:	90 2d       	mov	r25, r0
     ce2:	6c ed       	ldi	r22, 0xDC	; 220
     ce4:	75 e0       	ldi	r23, 0x05	; 5
     ce6:	86 9f       	mul	r24, r22
     ce8:	90 01       	movw	r18, r0
     cea:	87 9f       	mul	r24, r23
     cec:	30 0d       	add	r19, r0
     cee:	96 9f       	mul	r25, r22
     cf0:	30 0d       	add	r19, r0
     cf2:	11 24       	eor	r1, r1
     cf4:	42 17       	cp	r20, r18
     cf6:	53 07       	cpc	r21, r19
     cf8:	21 f4       	brne	.+8      	; 0xd02 <_Z4loopj+0x45e>
			bulletReadyToShoot = true;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__data_end+0x8>
     d00:	05 c0       	rjmp	.+10     	; 0xd0c <_Z4loopj+0x468>
		}

		if(bulletReadyToShoot && HardwareController::isShootButtonPressed()) {
     d02:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__data_end+0x8>
     d06:	88 23       	and	r24, r24
     d08:	09 f4       	brne	.+2      	; 0xd0c <_Z4loopj+0x468>
     d0a:	4b c0       	rjmp	.+150    	; 0xda2 <_Z4loopj+0x4fe>
		Lcd4_Set_Cursor(2, 0);
		Lcd4_Write_String(lower);
	}

	static bool isShootButtonPressed() {
		char res = PINA;
     d0c:	89 b3       	in	r24, 0x19	; 25
     d0e:	ca 99       	sbic	0x19, 2	; 25
     d10:	15 c2       	rjmp	.+1066   	; 0x113c <_Z4loopj+0x898>
     d12:	47 c0       	rjmp	.+142    	; 0xda2 <_Z4loopj+0x4fe>
	void shootNewBullet() {
		

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
			if(bulletPool[i].IsAlive() == false) {
     d14:	20 81       	ld	r18, Z
     d16:	21 11       	cpse	r18, r1
     d18:	3e c0       	rjmp	.+124    	; 0xd96 <_Z4loopj+0x4f2>
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <_Z4loopj+0x47c>
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
				activeBulletForShooting(bulletPool[i]);
     d20:	fc 01       	movw	r30, r24
     d22:	ee 0f       	add	r30, r30
     d24:	ff 1f       	adc	r31, r31
     d26:	ee 0f       	add	r30, r30
     d28:	ff 1f       	adc	r31, r31
     d2a:	ee 0f       	add	r30, r30
     d2c:	ff 1f       	adc	r31, r31
     d2e:	8e 0f       	add	r24, r30
     d30:	9f 1f       	adc	r25, r31
     d32:	9c 01       	movw	r18, r24
     d34:	25 51       	subi	r18, 0x15	; 21
     d36:	3f 4f       	sbci	r19, 0xFF	; 255
    unsigned int getRespawnTimeCounter() const {
        return respawnTimeCounter;
    }

    void setRespawnTimeCounter(unsigned int respawnTimeCounter) {
        NewBullet::respawnTimeCounter = respawnTimeCounter;
     d38:	ae eb       	ldi	r26, 0xBE	; 190
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	fc 01       	movw	r30, r24
     d3e:	e2 54       	subi	r30, 0x42	; 66
     d40:	ff 4f       	sbci	r31, 0xFF	; 255
     d42:	15 aa       	std	Z+53, r1	; 0x35
     d44:	14 aa       	std	Z+52, r1	; 0x34
    unsigned int getMoveTimeCounter() const {
        return moveTimeCounter;
    }

    void setMoveTimeCounter(unsigned int spawnTimerCounter) {
        NewBullet::moveTimeCounter = spawnTimerCounter;
     d46:	13 aa       	std	Z+51, r1	; 0x33
     d48:	12 aa       	std	Z+50, r1	; 0x32
    bool IsAlive() const {
        return isActiveOnBoard;
    }

    void setIsAlive(bool isAlive) {
        NewBullet::isActiveOnBoard = isAlive;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	81 ab       	std	Z+49, r24	; 0x31
	void activeBulletForShooting(NewBullet &newBullet) {
		
			newBullet.setRespawnTimeCounter(0);
			newBullet.setMoveTimeCounter(0);
	        newBullet.setIsAlive(true);
	        newBullet.setBulletPosition(player.getX(), player.getY() - 2);
     d4e:	1b 96       	adiw	r26, 0x0b	; 11
     d50:	ed 91       	ld	r30, X+
     d52:	fc 91       	ld	r31, X
     d54:	1c 97       	sbiw	r26, 0x0c	; 12
     d56:	af 01       	movw	r20, r30
     d58:	42 50       	subi	r20, 0x02	; 2
     d5a:	51 09       	sbc	r21, r1
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     d5c:	19 96       	adiw	r26, 0x09	; 9
     d5e:	8d 91       	ld	r24, X+
     d60:	9c 91       	ld	r25, X
     d62:	1a 97       	sbiw	r26, 0x0a	; 10
    }

    void setX(int x) {
        Position::x = x;
     d64:	f9 01       	movw	r30, r18
     d66:	91 83       	std	Z+1, r25	; 0x01
     d68:	80 83       	st	Z, r24
    int getY() const {
        return y;
    }

    void setY(int y) {
        Position::y = y;
     d6a:	53 83       	std	Z+3, r21	; 0x03
     d6c:	42 83       	std	Z+2, r20	; 0x02
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     d6e:	fa 01       	movw	r30, r20
     d70:	ee 0f       	add	r30, r30
     d72:	ff 1f       	adc	r31, r31
     d74:	ee 0f       	add	r30, r30
     d76:	ff 1f       	adc	r31, r31
     d78:	ee 0f       	add	r30, r30
     d7a:	ff 1f       	adc	r31, r31
     d7c:	e8 0f       	add	r30, r24
     d7e:	f9 1f       	adc	r31, r25
     d80:	ee 0f       	add	r30, r30
     d82:	ff 1f       	adc	r31, r31
     d84:	e1 56       	subi	r30, 0x61	; 97
     d86:	fe 4f       	sbci	r31, 0xFE	; 254
     d88:	83 e0       	ldi	r24, 0x03	; 3
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	91 83       	std	Z+1, r25	; 0x01
     d8e:	80 83       	st	Z, r24

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
			if(bulletPool[i].IsAlive() == false) {
				activeBulletForShooting(bulletPool[i]);
				bulletReadyToShoot = false;
     d90:	18 96       	adiw	r26, 0x08	; 8
     d92:	1c 92       	st	X, r1
     d94:	06 c0       	rjmp	.+12     	; 0xda2 <_Z4loopj+0x4fe>

	void shootNewBullet() {
		

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	39 96       	adiw	r30, 0x09	; 9
     d9a:	84 31       	cpi	r24, 0x14	; 20
     d9c:	91 05       	cpc	r25, r1
     d9e:	09 f0       	breq	.+2      	; 0xda2 <_Z4loopj+0x4fe>
     da0:	b9 cf       	rjmp	.-142    	; 0xd14 <_Z4loopj+0x470>
     da2:	0f 2e       	mov	r0, r31
     da4:	fb ee       	ldi	r31, 0xEB	; 235
     da6:	8f 2e       	mov	r8, r31
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	9f 2e       	mov	r9, r31
     dac:	f0 2d       	mov	r31, r0
     dae:	0f e9       	ldi	r16, 0x9F	; 159
     db0:	11 e0       	ldi	r17, 0x01	; 1
			if(bulletPool[i].IsAlive() == false) {
     db2:	f4 01       	movw	r30, r8
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     db4:	0f 2e       	mov	r0, r31
     db6:	f3 e0       	ldi	r31, 0x03	; 3
     db8:	cf 2e       	mov	r12, r31
     dba:	d1 2c       	mov	r13, r1
     dbc:	f0 2d       	mov	r31, r0
            int newY = p.getY() - 1;

            if(newY == -1) {
				if(newBullet.IsAlive()) resetIndexInBoard(prevX, prevY);
                newBullet.setIsAlive(false);
                newY = BOARD_HEIGHT - 1;
     dbe:	0f 2e       	mov	r0, r31
     dc0:	ff e0       	ldi	r31, 0x0F	; 15
     dc2:	ef 2e       	mov	r14, r31
     dc4:	f0 2d       	mov	r31, r0
     dc6:	f1 2c       	mov	r15, r1
     dc8:	9f 01       	movw	r18, r30
		//newBullet.setRespawnTimeCounter( newBullet.getRespawnTimeCounter() + 1);


        unsigned int moveTime= BULLET_MOVE_TIME;
        unsigned int currentTime = newBullet.getMoveTimeCounter();
        newBullet.setMoveTimeCounter(currentTime + 1);
     dca:	85 81       	ldd	r24, Z+5	; 0x05
     dcc:	96 81       	ldd	r25, Z+6	; 0x06
     dce:	01 96       	adiw	r24, 0x01	; 1
    unsigned int getMoveTimeCounter() const {
        return moveTimeCounter;
    }

    void setMoveTimeCounter(unsigned int spawnTimerCounter) {
        NewBullet::moveTimeCounter = spawnTimerCounter;
     dd0:	96 83       	std	Z+6, r25	; 0x06
     dd2:	85 83       	std	Z+5, r24	; 0x05

        if (newBullet.getMoveTimeCounter() >= moveTime) {
     dd4:	86 39       	cpi	r24, 0x96	; 150
     dd6:	91 05       	cpc	r25, r1
     dd8:	08 f4       	brcc	.+2      	; 0xddc <_Z4loopj+0x538>
     dda:	57 c0       	rjmp	.+174    	; 0xe8a <_Z4loopj+0x5e6>
    int getY() const {
        return bulletPosition.getY();
    }

    const Position getBulletPosition() const {
        return bulletPosition;
     ddc:	40 80       	ld	r4, Z
     dde:	51 80       	ldd	r5, Z+1	; 0x01
     de0:	62 80       	ldd	r6, Z+2	; 0x02
     de2:	73 80       	ldd	r7, Z+3	; 0x03
            Position p = newBullet.getBulletPosition();
            int prevX = p.getX(),prevY = p.getY();

            int newX = p.getX();
            int newY = p.getY() - 1;
     de4:	a3 01       	movw	r20, r6
     de6:	41 50       	subi	r20, 0x01	; 1
     de8:	51 09       	sbc	r21, r1
     dea:	c0 f4       	brcc	.+48     	; 0xe1c <_Z4loopj+0x578>

            if(newY == -1) {
				if(newBullet.IsAlive()) resetIndexInBoard(prevX, prevY);
     dec:	44 81       	ldd	r20, Z+4	; 0x04
     dee:	44 23       	and	r20, r20
     df0:	81 f0       	breq	.+32     	; 0xe12 <_Z4loopj+0x56e>
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     df2:	a3 01       	movw	r20, r6
     df4:	44 0f       	add	r20, r20
     df6:	55 1f       	adc	r21, r21
     df8:	44 0f       	add	r20, r20
     dfa:	55 1f       	adc	r21, r21
     dfc:	44 0f       	add	r20, r20
     dfe:	55 1f       	adc	r21, r21
     e00:	44 0d       	add	r20, r4
     e02:	55 1d       	adc	r21, r5
     e04:	44 0f       	add	r20, r20
     e06:	55 1f       	adc	r21, r21
     e08:	41 56       	subi	r20, 0x61	; 97
     e0a:	5e 4f       	sbci	r21, 0xFE	; 254
     e0c:	da 01       	movw	r26, r20
     e0e:	1d 92       	st	X+, r1
     e10:	1c 92       	st	X, r1
    bool IsAlive() const {
        return isActiveOnBoard;
    }

    void setIsAlive(bool isAlive) {
        NewBullet::isActiveOnBoard = isAlive;
     e12:	d9 01       	movw	r26, r18
     e14:	14 96       	adiw	r26, 0x04	; 4
     e16:	1c 92       	st	X, r1
            int newY = p.getY() - 1;

            if(newY == -1) {
				if(newBullet.IsAlive()) resetIndexInBoard(prevX, prevY);
                newBullet.setIsAlive(false);
                newY = BOARD_HEIGHT - 1;
     e18:	4e 2d       	mov	r20, r14
     e1a:	5f 2d       	mov	r21, r15
    int getX() const {
        return x;
    }

    void setX(int x) {
        Position::x = x;
     e1c:	d9 01       	movw	r26, r18
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	5c 92       	st	X, r5
     e22:	4e 92       	st	-X, r4
    int getY() const {
        return y;
    }

    void setY(int y) {
        Position::y = y;
     e24:	13 96       	adiw	r26, 0x03	; 3
     e26:	5c 93       	st	X, r21
     e28:	4e 93       	st	-X, r20
     e2a:	12 97       	sbiw	r26, 0x02	; 2
    unsigned int getMoveTimeCounter() const {
        return moveTimeCounter;
    }

    void setMoveTimeCounter(unsigned int spawnTimerCounter) {
        NewBullet::moveTimeCounter = spawnTimerCounter;
     e2c:	16 96       	adiw	r26, 0x06	; 6
     e2e:	1c 92       	st	X, r1
     e30:	1e 92       	st	-X, r1
     e32:	15 97       	sbiw	r26, 0x05	; 5
            newBullet.setBulletPosition(newX, newY);

            ////printStringToConsole("Enemy "+to_string(enemyNo)+"("+to_string(enemy.getX())+","+to_string(enemy.getY())+")");
            newBullet.setMoveTimeCounter(0);

            if(newBullet.IsAlive()) resetIndexInBoard(prevX, prevY);
     e34:	14 96       	adiw	r26, 0x04	; 4
     e36:	4c 91       	ld	r20, X
     e38:	44 23       	and	r20, r20
     e3a:	39 f1       	breq	.+78     	; 0xe8a <_Z4loopj+0x5e6>
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     e3c:	a3 01       	movw	r20, r6
     e3e:	44 0f       	add	r20, r20
     e40:	55 1f       	adc	r21, r21
     e42:	44 0f       	add	r20, r20
     e44:	55 1f       	adc	r21, r21
     e46:	44 0f       	add	r20, r20
     e48:	55 1f       	adc	r21, r21
     e4a:	c2 01       	movw	r24, r4
     e4c:	84 0f       	add	r24, r20
     e4e:	95 1f       	adc	r25, r21
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	dc 01       	movw	r26, r24
     e56:	a1 56       	subi	r26, 0x61	; 97
     e58:	be 4f       	sbci	r27, 0xFE	; 254
     e5a:	1d 92       	st	X+, r1
     e5c:	1c 92       	st	X, r1
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     e5e:	d9 01       	movw	r26, r18
     e60:	12 96       	adiw	r26, 0x02	; 2
     e62:	4d 91       	ld	r20, X+
     e64:	5c 91       	ld	r21, X
     e66:	13 97       	sbiw	r26, 0x03	; 3
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     e68:	8d 91       	ld	r24, X+
     e6a:	9c 91       	ld	r25, X
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     e6c:	da 01       	movw	r26, r20
     e6e:	aa 0f       	add	r26, r26
     e70:	bb 1f       	adc	r27, r27
     e72:	aa 0f       	add	r26, r26
     e74:	bb 1f       	adc	r27, r27
     e76:	aa 0f       	add	r26, r26
     e78:	bb 1f       	adc	r27, r27
     e7a:	a8 0f       	add	r26, r24
     e7c:	b9 1f       	adc	r27, r25
     e7e:	aa 0f       	add	r26, r26
     e80:	bb 1f       	adc	r27, r27
     e82:	a1 56       	subi	r26, 0x61	; 97
     e84:	be 4f       	sbci	r27, 0xFE	; 254
     e86:	cd 92       	st	X+, r12
     e88:	dc 92       	st	X, r13
     e8a:	39 96       	adiw	r30, 0x09	; 9
			// updateNewBullet(newBullet1);
			// updateNewBullet(newBullet2);
			// updateNewBullet(newBullet3);
			// updateNewBullet(newBullet4);

		for(int i = 0; i < BULLET_POOL_SIZE; i++) {
     e8c:	e0 17       	cp	r30, r16
     e8e:	f1 07       	cpc	r31, r17
     e90:	09 f0       	breq	.+2      	; 0xe94 <_Z4loopj+0x5f0>
     e92:	9a cf       	rjmp	.-204    	; 0xdc8 <_Z4loopj+0x524>
	}

	// for all objects, check for collision, update collision count and reset boards
	void updateBasedOnCollisions() {

		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
     e94:	ee eb       	ldi	r30, 0xBE	; 190
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	20 81       	ld	r18, Z
     e9a:	31 81       	ldd	r19, Z+1	; 0x01
     e9c:	3c 8f       	std	Y+28, r19	; 0x1c
     e9e:	2b 8f       	std	Y+27, r18	; 0x1b
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
     ea0:	42 81       	ldd	r20, Z+2	; 0x02
     ea2:	53 81       	ldd	r21, Z+3	; 0x03
     ea4:	5a 8f       	std	Y+26, r21	; 0x1a
     ea6:	49 8f       	std	Y+25, r20	; 0x19
     ea8:	9f 01       	movw	r18, r30
	
		// checking for bullet and enemy collisions		
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
			for (unsigned int bulletCounter = 0; bulletCounter < BULLET_POOL_SIZE; bulletCounter++) {
				if (doesCollide(enemyPool[enemyCounter], bulletPool[bulletCounter])) {
					enemyBulletCollisionCounter++;
     eaa:	af 01       	movw	r20, r30

	// for all objects, check for collision, update collision count and reset boards
	void updateBasedOnCollisions() {

		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
     eac:	f4 01       	movw	r30, r8
     eae:	19 01       	movw	r2, r18
	}

	
	bool doesCollide(const Enemy &enemy, const NewBullet &bullet) {
		
		if (!enemy.isAlive() || !bullet.IsAlive())
     eb0:	d9 01       	movw	r26, r18
     eb2:	52 96       	adiw	r26, 0x12	; 18
     eb4:	8c 91       	ld	r24, X
     eb6:	88 23       	and	r24, r24
     eb8:	b9 f1       	breq	.+110    	; 0xf28 <_Z4loopj+0x684>
     eba:	84 81       	ldd	r24, Z+4	; 0x04
     ebc:	88 23       	and	r24, r24
     ebe:	a1 f1       	breq	.+104    	; 0xf28 <_Z4loopj+0x684>
    int getY() const {
        return bulletPosition.getY();
    }

    const Position getBulletPosition() const {
        return bulletPosition;
     ec0:	c0 80       	ld	r12, Z
     ec2:	d1 80       	ldd	r13, Z+1	; 0x01
     ec4:	e2 80       	ldd	r14, Z+2	; 0x02
     ec6:	f3 80       	ldd	r15, Z+3	; 0x03
    int getY() const {
        return enemyPosition.getY();
    }

    const Position getEnemyPosition() const {
        return enemyPosition;
     ec8:	d1 01       	movw	r26, r2
     eca:	1e 96       	adiw	r26, 0x0e	; 14
     ecc:	4d 90       	ld	r4, X+
     ece:	5d 90       	ld	r5, X+
     ed0:	6d 90       	ld	r6, X+
     ed2:	7c 90       	ld	r7, X
     ed4:	51 97       	sbiw	r26, 0x11	; 17
    void setY(int y) {
        Position::y = y;
    }

    bool operator==(const Position other) const {
        return x == other.x && y == other.y;
     ed6:	c4 14       	cp	r12, r4
     ed8:	d5 04       	cpc	r13, r5
     eda:	31 f5       	brne	.+76     	; 0xf28 <_Z4loopj+0x684>
     edc:	e6 14       	cp	r14, r6
     ede:	f7 04       	cpc	r15, r7
     ee0:	19 f5       	brne	.+70     	; 0xf28 <_Z4loopj+0x684>
	
		// checking for bullet and enemy collisions		
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
			for (unsigned int bulletCounter = 0; bulletCounter < BULLET_POOL_SIZE; bulletCounter++) {
				if (doesCollide(enemyPool[enemyCounter], bulletPool[bulletCounter])) {
					enemyBulletCollisionCounter++;
     ee2:	da 01       	movw	r26, r20
     ee4:	8d 91       	ld	r24, X+
     ee6:	9c 91       	ld	r25, X
     ee8:	11 97       	sbiw	r26, 0x01	; 1
     eea:	01 96       	adiw	r24, 0x01	; 1
     eec:	8d 93       	st	X+, r24
     eee:	9c 93       	st	X, r25
     ef0:	d1 01       	movw	r26, r2
     ef2:	1e 96       	adiw	r26, 0x0e	; 14
     ef4:	cd 90       	ld	r12, X+
     ef6:	dd 90       	ld	r13, X+
     ef8:	ed 90       	ld	r14, X+
     efa:	fc 90       	ld	r15, X
     efc:	51 97       	sbiw	r26, 0x11	; 17
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     efe:	c7 01       	movw	r24, r14
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	c8 0e       	add	r12, r24
     f0e:	d9 1e       	adc	r13, r25
     f10:	c6 01       	movw	r24, r12
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	81 56       	subi	r24, 0x61	; 97
     f18:	9e 4f       	sbci	r25, 0xFE	; 254
     f1a:	dc 01       	movw	r26, r24
     f1c:	1d 92       	st	X+, r1
     f1e:	1c 92       	st	X, r1
    bool IsAlive() const {
        return isActiveOnBoard;
    }

    void setIsAlive(bool isAlive) {
        NewBullet::isActiveOnBoard = isAlive;
     f20:	14 82       	std	Z+4, r1	; 0x04
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
     f22:	d1 01       	movw	r26, r2
     f24:	52 96       	adiw	r26, 0x12	; 18
     f26:	1c 92       	st	X, r1
     f28:	39 96       	adiw	r30, 0x09	; 9
		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
	
		// checking for bullet and enemy collisions		
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
			for (unsigned int bulletCounter = 0; bulletCounter < BULLET_POOL_SIZE; bulletCounter++) {
     f2a:	e0 17       	cp	r30, r16
     f2c:	f1 07       	cpc	r31, r17
     f2e:	09 f0       	breq	.+2      	; 0xf32 <_Z4loopj+0x68e>
     f30:	bf cf       	rjmp	.-130    	; 0xeb0 <_Z4loopj+0x60c>
     f32:	27 5f       	subi	r18, 0xF7	; 247
     f34:	3f 4f       	sbci	r19, 0xFF	; 255

		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
	
		// checking for bullet and enemy collisions		
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	29 3d       	cpi	r18, 0xD9	; 217
     f3a:	3b 07       	cpc	r19, r27
     f3c:	09 f0       	breq	.+2      	; 0xf40 <_Z4loopj+0x69c>
     f3e:	b6 cf       	rjmp	.-148    	; 0xeac <_Z4loopj+0x608>
		if (!enemy.isAlive()) return false;
		
		// dx and dy contains the change in x and y co-ordinate from origin of player position to get all the 
		// points needed by player.
		const int dx[] = {0, 0, -1, 1};
		const int dy[] = {0, -1, 0, 0};
     f40:	22 24       	eor	r2, r2
     f42:	2a 94       	dec	r2
     f44:	32 2c       	mov	r3, r2
    int getY() const {
        return playerPosition.getY();
    }

    const Position getPlayerPosition() const {
        return playerPosition;
     f46:	0f 2e       	mov	r0, r31
     f48:	fe eb       	ldi	r31, 0xBE	; 190
     f4a:	4f 2e       	mov	r4, r31
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	5f 2e       	mov	r5, r31
     f50:	f0 2d       	mov	r31, r0
     f52:	4e 01       	movw	r8, r28
     f54:	e9 e1       	ldi	r30, 0x19	; 25
     f56:	8e 0e       	add	r8, r30
     f58:	91 1c       	adc	r9, r1
     f5a:	65 01       	movw	r12, r10
		return false;
	}


	bool doesCollide(const Enemy &enemy) {
		if (!enemy.isAlive()) return false;
     f5c:	d5 01       	movw	r26, r10
     f5e:	52 96       	adiw	r26, 0x12	; 18
     f60:	8c 91       	ld	r24, X
     f62:	88 23       	and	r24, r24
     f64:	b9 f1       	breq	.+110    	; 0xfd4 <_Z4loopj+0x730>
		
		// dx and dy contains the change in x and y co-ordinate from origin of player position to get all the 
		// points needed by player.
		const int dx[] = {0, 0, -1, 1};
     f66:	88 e0       	ldi	r24, 0x08	; 8
     f68:	ea e6       	ldi	r30, 0x6A	; 106
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	de 01       	movw	r26, r28
     f6e:	51 96       	adiw	r26, 0x11	; 17
     f70:	01 90       	ld	r0, Z+
     f72:	0d 92       	st	X+, r0
     f74:	8a 95       	dec	r24
     f76:	e1 f7       	brne	.-8      	; 0xf70 <_Z4loopj+0x6cc>
		const int dy[] = {0, -1, 0, 0};
     f78:	1a 82       	std	Y+2, r1	; 0x02
     f7a:	19 82       	std	Y+1, r1	; 0x01
     f7c:	3c 82       	std	Y+4, r3	; 0x04
     f7e:	2b 82       	std	Y+3, r2	; 0x03
     f80:	1e 82       	std	Y+6, r1	; 0x06
     f82:	1d 82       	std	Y+5, r1	; 0x05
     f84:	18 86       	std	Y+8, r1	; 0x08
     f86:	1f 82       	std	Y+7, r1	; 0x07
     f88:	f2 01       	movw	r30, r4
     f8a:	81 85       	ldd	r24, Z+9	; 0x09
     f8c:	92 85       	ldd	r25, Z+10	; 0x0a
     f8e:	a3 85       	ldd	r26, Z+11	; 0x0b
     f90:	b4 85       	ldd	r27, Z+12	; 0x0c
     f92:	ac 01       	movw	r20, r24
     f94:	bd 01       	movw	r22, r26
    int getY() const {
        return enemyPosition.getY();
    }

    const Position getEnemyPosition() const {
        return enemyPosition;
     f96:	f5 01       	movw	r30, r10
     f98:	86 85       	ldd	r24, Z+14	; 0x0e
     f9a:	97 85       	ldd	r25, Z+15	; 0x0f
     f9c:	a0 89       	ldd	r26, Z+16	; 0x10
     f9e:	b1 89       	ldd	r27, Z+17	; 0x11
     fa0:	9c 01       	movw	r18, r24
     fa2:	7d 01       	movw	r14, r26
     fa4:	fe 01       	movw	r30, r28
     fa6:	71 96       	adiw	r30, 0x11	; 17
     fa8:	de 01       	movw	r26, r28
     faa:	11 96       	adiw	r26, 0x01	; 1
			
		const Position player_pos = player.getPlayerPosition();
		const Position enemy_pos = enemy.getEnemyPosition();
			
		for (int i = 0; i < 4; i++) {
			if (enemy_pos.getX() == player_pos.getX()+dx[i] && enemy_pos.getY() == player_pos.getY()+dy[i]) {
     fac:	81 91       	ld	r24, Z+
     fae:	91 91       	ld	r25, Z+
     fb0:	84 0f       	add	r24, r20
     fb2:	95 1f       	adc	r25, r21
     fb4:	82 17       	cp	r24, r18
     fb6:	93 07       	cpc	r25, r19
     fb8:	49 f4       	brne	.+18     	; 0xfcc <_Z4loopj+0x728>
     fba:	8d 91       	ld	r24, X+
     fbc:	9c 91       	ld	r25, X
     fbe:	11 97       	sbiw	r26, 0x01	; 1
     fc0:	86 0f       	add	r24, r22
     fc2:	97 1f       	adc	r25, r23
     fc4:	8e 15       	cp	r24, r14
     fc6:	9f 05       	cpc	r25, r15
     fc8:	09 f4       	brne	.+2      	; 0xfcc <_Z4loopj+0x728>
     fca:	c2 c0       	rjmp	.+388    	; 0x1150 <_Z4loopj+0x8ac>
     fcc:	12 96       	adiw	r26, 0x02	; 2
		const int dy[] = {0, -1, 0, 0};
			
		const Position player_pos = player.getPlayerPosition();
		const Position enemy_pos = enemy.getEnemyPosition();
			
		for (int i = 0; i < 4; i++) {
     fce:	e8 15       	cp	r30, r8
     fd0:	f9 05       	cpc	r31, r9
     fd2:	61 f7       	brne	.-40     	; 0xfac <_Z4loopj+0x708>
     fd4:	f9 e0       	ldi	r31, 0x09	; 9
     fd6:	af 0e       	add	r10, r31
     fd8:	b1 1c       	adc	r11, r1
				}
			}
		}

		// checking for collision of enemy with the player
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
     fda:	29 ed       	ldi	r18, 0xD9	; 217
     fdc:	a2 16       	cp	r10, r18
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	b2 06       	cpc	r11, r18
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <_Z4loopj+0x742>
     fe4:	ba cf       	rjmp	.-140    	; 0xf5a <_Z4loopj+0x6b6>
				enemyPlayerCollisionCounter++;
				enemyPool[enemyCounter].setIsAlive(false);
			}
		}
		
		if (lastEnemyPlayerCollisionCounter != enemyPlayerCollisionCounter 
     fe6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_end+0x2>
     fea:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__data_end+0x3>
     fee:	49 8d       	ldd	r20, Y+25	; 0x19
     ff0:	5a 8d       	ldd	r21, Y+26	; 0x1a
     ff2:	48 17       	cp	r20, r24
     ff4:	59 07       	cpc	r21, r25
     ff6:	51 f4       	brne	.+20     	; 0x100c <_Z4loopj+0x768>
			|| lastEnemyBulletCollisionCounter != enemyBulletCollisionCounter) {
     ff8:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <__data_end>
     ffc:	30 91 bf 00 	lds	r19, 0x00BF	; 0x8000bf <__data_end+0x1>
    1000:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1002:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1004:	42 17       	cp	r20, r18
    1006:	53 07       	cpc	r21, r19
    1008:	09 f4       	brne	.+2      	; 0x100c <_Z4loopj+0x768>
    100a:	af c0       	rjmp	.+350    	; 0x116a <_Z4loopj+0x8c6>
	// updates the values showed in the LCD display.
	// should be called after updatBased on collisions has been called.
	void updateLcdDisplay() {
		
		char healthStatus[16];
		if (enemyPlayerCollisionCounter < 5) {
    100c:	85 30       	cpi	r24, 0x05	; 5
    100e:	91 05       	cpc	r25, r1
    1010:	50 f4       	brcc	.+20     	; 0x1026 <_Z4loopj+0x782>
			strcpy(healthStatus, "Great health!");
    1012:	8e e0       	ldi	r24, 0x0E	; 14
    1014:	e7 e8       	ldi	r30, 0x87	; 135
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	de 01       	movw	r26, r28
    101a:	11 96       	adiw	r26, 0x01	; 1
    101c:	01 90       	ld	r0, Z+
    101e:	0d 92       	st	X+, r0
    1020:	8a 95       	dec	r24
    1022:	e1 f7       	brne	.-8      	; 0x101c <_Z4loopj+0x778>
    1024:	22 c0       	rjmp	.+68     	; 0x106a <_Z4loopj+0x7c6>
			} else if (enemyPlayerCollisionCounter < 10) {
    1026:	8a 30       	cpi	r24, 0x0A	; 10
    1028:	91 05       	cpc	r25, r1
    102a:	50 f4       	brcc	.+20     	; 0x1040 <_Z4loopj+0x79c>
			strcpy(healthStatus, "Good health!");
    102c:	8d e0       	ldi	r24, 0x0D	; 13
    102e:	e5 e9       	ldi	r30, 0x95	; 149
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	de 01       	movw	r26, r28
    1034:	11 96       	adiw	r26, 0x01	; 1
    1036:	01 90       	ld	r0, Z+
    1038:	0d 92       	st	X+, r0
    103a:	8a 95       	dec	r24
    103c:	e1 f7       	brne	.-8      	; 0x1036 <_Z4loopj+0x792>
    103e:	15 c0       	rjmp	.+42     	; 0x106a <_Z4loopj+0x7c6>
			} else if (enemyPlayerCollisionCounter < 15) {
    1040:	0f 97       	sbiw	r24, 0x0f	; 15
    1042:	50 f4       	brcc	.+20     	; 0x1058 <_Z4loopj+0x7b4>
			strcpy(healthStatus, "Critical health :(");
    1044:	83 e1       	ldi	r24, 0x13	; 19
    1046:	e2 ea       	ldi	r30, 0xA2	; 162
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	de 01       	movw	r26, r28
    104c:	11 96       	adiw	r26, 0x01	; 1
    104e:	01 90       	ld	r0, Z+
    1050:	0d 92       	st	X+, r0
    1052:	8a 95       	dec	r24
    1054:	e1 f7       	brne	.-8      	; 0x104e <_Z4loopj+0x7aa>
    1056:	09 c0       	rjmp	.+18     	; 0x106a <_Z4loopj+0x7c6>
			} else {
			strcpy(healthStatus, "Dead :'(");
    1058:	89 e0       	ldi	r24, 0x09	; 9
    105a:	e5 eb       	ldi	r30, 0xB5	; 181
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	de 01       	movw	r26, r28
    1060:	11 96       	adiw	r26, 0x01	; 1
    1062:	01 90       	ld	r0, Z+
    1064:	0d 92       	st	X+, r0
    1066:	8a 95       	dec	r24
    1068:	e1 f7       	brne	.-8      	; 0x1062 <_Z4loopj+0x7be>
	}
	
	
	char* getScoreString(){
		//todo: score logic needs to be updated
		itoa (enemyBulletCollisionCounter,score1,10);
    106a:	0f 2e       	mov	r0, r31
    106c:	fe eb       	ldi	r31, 0xBE	; 190
    106e:	ef 2e       	mov	r14, r31
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	ff 2e       	mov	r15, r31
    1074:	f0 2d       	mov	r31, r0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1076:	d7 01       	movw	r26, r14
    1078:	14 96       	adiw	r26, 0x04	; 4
    107a:	6d 91       	ld	r22, X+
    107c:	7c 91       	ld	r23, X
    107e:	15 97       	sbiw	r26, 0x05	; 5
    1080:	4a e0       	ldi	r20, 0x0A	; 10
    1082:	8d 91       	ld	r24, X+
    1084:	9c 91       	ld	r25, X
    1086:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__itoa_ncheck>
    108a:	f7 01       	movw	r30, r14
    108c:	66 81       	ldd	r22, Z+6	; 0x06
    108e:	77 81       	ldd	r23, Z+7	; 0x07
    1090:	4a e0       	ldi	r20, 0x0A	; 10
    1092:	82 81       	ldd	r24, Z+2	; 0x02
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__itoa_ncheck>
		itoa (enemyPlayerCollisionCounter,score2,10);
		strcat(score1, ", ");
    109a:	d7 01       	movw	r26, r14
    109c:	14 96       	adiw	r26, 0x04	; 4
    109e:	ed 91       	ld	r30, X+
    10a0:	fc 91       	ld	r31, X
    10a2:	15 97       	sbiw	r26, 0x05	; 5
    10a4:	01 90       	ld	r0, Z+
    10a6:	00 20       	and	r0, r0
    10a8:	e9 f7       	brne	.-6      	; 0x10a4 <_Z4loopj+0x800>
    10aa:	31 97       	sbiw	r30, 0x01	; 1
    10ac:	8c e2       	ldi	r24, 0x2C	; 44
    10ae:	90 e2       	ldi	r25, 0x20	; 32
    10b0:	91 83       	std	Z+1, r25	; 0x01
    10b2:	80 83       	st	Z, r24
    10b4:	12 82       	std	Z+2, r1	; 0x02
		strcat(score1,score2);
    10b6:	16 96       	adiw	r26, 0x06	; 6
    10b8:	6d 91       	ld	r22, X+
    10ba:	7c 91       	ld	r23, X
    10bc:	17 97       	sbiw	r26, 0x07	; 7
    10be:	14 96       	adiw	r26, 0x04	; 4
    10c0:	8d 91       	ld	r24, X+
    10c2:	9c 91       	ld	r25, X
    10c4:	15 97       	sbiw	r26, 0x05	; 5
    10c6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <strcat>
		
		return score1;
    10ca:	f7 01       	movw	r30, r14
    10cc:	e4 80       	ldd	r14, Z+4	; 0x04
    10ce:	f5 80       	ldd	r15, Z+5	; 0x05
		}
	}

	static void displayLcd(char * upper,char * lower)
	{
		Lcd4_Clear();
    10d0:	0e 94 08 02 	call	0x410	; 0x410 <_Z10Lcd4_Clearv>
		Lcd4_Set_Cursor(1, 0);
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z15Lcd4_Set_Cursorcc>
		Lcd4_Write_String(upper);
    10dc:	c7 01       	movw	r24, r14
    10de:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17Lcd4_Write_StringPc>
		Lcd4_Set_Cursor(2, 0);
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z15Lcd4_Set_Cursorcc>
		Lcd4_Write_String(lower);
    10ea:	ce 01       	movw	r24, r28
    10ec:	01 96       	adiw	r24, 0x01	; 1
    10ee:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17Lcd4_Write_StringPc>
    10f2:	3b c0       	rjmp	.+118    	; 0x116a <_Z4loopj+0x8c6>

	// for all objects, check for collision, update collision count and reset boards
	void updateBasedOnCollisions() {

		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
    10f4:	65 01       	movw	r12, r10
    10f6:	10 e0       	ldi	r17, 0x00	; 0

		for (int i = 0; i < rows; i++)
		{
			for (int j = 0; j < cols; j++)
			{
				if (board[i][j])
    10f8:	d6 01       	movw	r26, r12
    10fa:	8d 91       	ld	r24, X+
    10fc:	9d 91       	ld	r25, X+
    10fe:	6d 01       	movw	r12, r26
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	89 f0       	breq	.+34     	; 0x1126 <_Z4loopj+0x882>
				{
					//   ledPrint(j, 'B', i, 'A');  Moving to decoder printing
					//   //ledPrint(j, 'B', i, 'A');
					
					 if(board[i][j] == ENEMY_STATUS_IN_BOARD) {
    1104:	02 97       	sbiw	r24, 0x02	; 2
    1106:	31 f4       	brne	.+12     	; 0x1114 <_Z4loopj+0x870>
						ledPrintUsingTwoDecoder(j, i,'R');
    1108:	42 e5       	ldi	r20, 0x52	; 82
    110a:	6e 2d       	mov	r22, r14
    110c:	81 2f       	mov	r24, r17
    110e:	0e 94 55 00 	call	0xaa	; 0xaa <_Z23ledPrintUsingTwoDecoderccc>
    1112:	05 c0       	rjmp	.+10     	; 0x111e <_Z4loopj+0x87a>
					 } else {
					 	ledPrintUsingTwoDecoder(j, i,'G');
    1114:	47 e4       	ldi	r20, 0x47	; 71
    1116:	6e 2d       	mov	r22, r14
    1118:	81 2f       	mov	r24, r17
    111a:	0e 94 55 00 	call	0xaa	; 0xaa <_Z23ledPrintUsingTwoDecoderccc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    111e:	b1 e2       	ldi	r27, 0x21	; 33
    1120:	ba 95       	dec	r27
    1122:	f1 f7       	brne	.-4      	; 0x1120 <_Z4loopj+0x87c>
    1124:	00 00       	nop
    1126:	1f 5f       	subi	r17, 0xFF	; 255
	{
		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++)
		{
			for (int j = 0; j < cols; j++)
    1128:	18 30       	cpi	r17, 0x08	; 8
    112a:	31 f7       	brne	.-52     	; 0x10f8 <_Z4loopj+0x854>
    112c:	e0 e1       	ldi	r30, 0x10	; 16
    112e:	ae 0e       	add	r10, r30
    1130:	b1 1c       	adc	r11, r1
    1132:	e3 94       	inc	r14
	//point by point scan
	static void displayBoardMatrixBackup(int board[BOARD_HEIGHT][BOARD_WIDTH])
	{
		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++)
    1134:	f0 e1       	ldi	r31, 0x10	; 16
    1136:	ef 12       	cpse	r14, r31
    1138:	dd cf       	rjmp	.-70     	; 0x10f4 <_Z4loopj+0x850>
    113a:	1a c0       	rjmp	.+52     	; 0x1170 <_Z4loopj+0x8cc>
	void shootNewBullet() {
		

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
			if(bulletPool[i].IsAlive() == false) {
    113c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__data_end+0x31>
    1140:	88 23       	and	r24, r24
    1142:	09 f4       	brne	.+2      	; 0x1146 <_Z4loopj+0x8a2>
    1144:	eb cd       	rjmp	.-1066   	; 0xd1c <_Z4loopj+0x478>
    1146:	e8 ef       	ldi	r30, 0xF8	; 248
    1148:	f0 e0       	ldi	r31, 0x00	; 0

	void shootNewBullet() {
		

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	e2 cd       	rjmp	.-1084   	; 0xd14 <_Z4loopj+0x470>
		}

		// checking for collision of enemy with the player
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
			if (doesCollide(enemyPool[enemyCounter])) {
				enemyPlayerCollisionCounter++;
    1150:	d2 01       	movw	r26, r4
    1152:	12 96       	adiw	r26, 0x02	; 2
    1154:	8d 91       	ld	r24, X+
    1156:	9c 91       	ld	r25, X
    1158:	13 97       	sbiw	r26, 0x03	; 3
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	13 96       	adiw	r26, 0x03	; 3
    115e:	9c 93       	st	X, r25
    1160:	8e 93       	st	-X, r24
    1162:	12 97       	sbiw	r26, 0x02	; 2
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
    1164:	f6 01       	movw	r30, r12
    1166:	12 8a       	std	Z+18, r1	; 0x12
    1168:	35 cf       	rjmp	.-406    	; 0xfd4 <_Z4loopj+0x730>

	// for all objects, check for collision, update collision count and reset boards
	void updateBasedOnCollisions() {

		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
    116a:	e1 2c       	mov	r14, r1
    116c:	58 01       	movw	r10, r16
    116e:	c2 cf       	rjmp	.-124    	; 0x10f4 <_Z4loopj+0x850>
	gameController.bulletPoll();
	gameController.updateNewBulletPositions();
	gameController.updateBasedOnCollisions();//includes LCD updates
	
	HardwareController::displayBoardMatrixBackup(gameController.displayBoard);
}
    1170:	6c 96       	adiw	r28, 0x1c	; 28
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	ff 90       	pop	r15
    1186:	ef 90       	pop	r14
    1188:	df 90       	pop	r13
    118a:	cf 90       	pop	r12
    118c:	bf 90       	pop	r11
    118e:	af 90       	pop	r10
    1190:	9f 90       	pop	r9
    1192:	8f 90       	pop	r8
    1194:	7f 90       	pop	r7
    1196:	6f 90       	pop	r6
    1198:	5f 90       	pop	r5
    119a:	4f 90       	pop	r4
    119c:	3f 90       	pop	r3
    119e:	2f 90       	pop	r2
    11a0:	08 95       	ret

000011a2 <main>:

int main() {
	setup();
    11a2:	0e 94 35 04 	call	0x86a	; 0x86a <_Z5setupv>
	unsigned int loopCount = 0;
    11a6:	c0 e0       	ldi	r28, 0x00	; 0
    11a8:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (true) {
		loopCount++;
    11aa:	21 96       	adiw	r28, 0x01	; 1
	    loop(loopCount);
    11ac:	ce 01       	movw	r24, r28
    11ae:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_Z4loopj>
    11b2:	fb cf       	rjmp	.-10     	; 0x11aa <main+0x8>

000011b4 <_GLOBAL__sub_I__Z8ledPrintcccc>:
#include "headers/game/GameController.h"
#include "headers/utils/HardwareController.h"

GameController gameController;
    11b4:	8e eb       	ldi	r24, 0xBE	; 190
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	0e 94 b2 02 	call	0x564	; 0x564 <_ZN14GameControllerC1Ev>
    11bc:	08 95       	ret

000011be <__umulhisi3>:
    11be:	a2 9f       	mul	r26, r18
    11c0:	b0 01       	movw	r22, r0
    11c2:	b3 9f       	mul	r27, r19
    11c4:	c0 01       	movw	r24, r0
    11c6:	a3 9f       	mul	r26, r19
    11c8:	70 0d       	add	r23, r0
    11ca:	81 1d       	adc	r24, r1
    11cc:	11 24       	eor	r1, r1
    11ce:	91 1d       	adc	r25, r1
    11d0:	b2 9f       	mul	r27, r18
    11d2:	70 0d       	add	r23, r0
    11d4:	81 1d       	adc	r24, r1
    11d6:	11 24       	eor	r1, r1
    11d8:	91 1d       	adc	r25, r1
    11da:	08 95       	ret

000011dc <__tablejump2__>:
    11dc:	ee 0f       	add	r30, r30
    11de:	ff 1f       	adc	r31, r31
    11e0:	05 90       	lpm	r0, Z+
    11e2:	f4 91       	lpm	r31, Z
    11e4:	e0 2d       	mov	r30, r0
    11e6:	09 94       	ijmp

000011e8 <malloc>:
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	82 30       	cpi	r24, 0x02	; 2
    11f2:	91 05       	cpc	r25, r1
    11f4:	10 f4       	brcc	.+4      	; 0x11fa <malloc+0x12>
    11f6:	82 e0       	ldi	r24, 0x02	; 2
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <__flp>
    11fe:	f0 91 a2 02 	lds	r31, 0x02A2	; 0x8002a2 <__flp+0x1>
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	a0 e0       	ldi	r26, 0x00	; 0
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	30 97       	sbiw	r30, 0x00	; 0
    120c:	19 f1       	breq	.+70     	; 0x1254 <malloc+0x6c>
    120e:	40 81       	ld	r20, Z
    1210:	51 81       	ldd	r21, Z+1	; 0x01
    1212:	02 81       	ldd	r16, Z+2	; 0x02
    1214:	13 81       	ldd	r17, Z+3	; 0x03
    1216:	48 17       	cp	r20, r24
    1218:	59 07       	cpc	r21, r25
    121a:	c8 f0       	brcs	.+50     	; 0x124e <malloc+0x66>
    121c:	84 17       	cp	r24, r20
    121e:	95 07       	cpc	r25, r21
    1220:	69 f4       	brne	.+26     	; 0x123c <malloc+0x54>
    1222:	10 97       	sbiw	r26, 0x00	; 0
    1224:	31 f0       	breq	.+12     	; 0x1232 <malloc+0x4a>
    1226:	12 96       	adiw	r26, 0x02	; 2
    1228:	0c 93       	st	X, r16
    122a:	12 97       	sbiw	r26, 0x02	; 2
    122c:	13 96       	adiw	r26, 0x03	; 3
    122e:	1c 93       	st	X, r17
    1230:	27 c0       	rjmp	.+78     	; 0x1280 <malloc+0x98>
    1232:	00 93 a1 02 	sts	0x02A1, r16	; 0x8002a1 <__flp>
    1236:	10 93 a2 02 	sts	0x02A2, r17	; 0x8002a2 <__flp+0x1>
    123a:	22 c0       	rjmp	.+68     	; 0x1280 <malloc+0x98>
    123c:	21 15       	cp	r18, r1
    123e:	31 05       	cpc	r19, r1
    1240:	19 f0       	breq	.+6      	; 0x1248 <malloc+0x60>
    1242:	42 17       	cp	r20, r18
    1244:	53 07       	cpc	r21, r19
    1246:	18 f4       	brcc	.+6      	; 0x124e <malloc+0x66>
    1248:	9a 01       	movw	r18, r20
    124a:	bd 01       	movw	r22, r26
    124c:	ef 01       	movw	r28, r30
    124e:	df 01       	movw	r26, r30
    1250:	f8 01       	movw	r30, r16
    1252:	db cf       	rjmp	.-74     	; 0x120a <malloc+0x22>
    1254:	21 15       	cp	r18, r1
    1256:	31 05       	cpc	r19, r1
    1258:	f9 f0       	breq	.+62     	; 0x1298 <malloc+0xb0>
    125a:	28 1b       	sub	r18, r24
    125c:	39 0b       	sbc	r19, r25
    125e:	24 30       	cpi	r18, 0x04	; 4
    1260:	31 05       	cpc	r19, r1
    1262:	80 f4       	brcc	.+32     	; 0x1284 <malloc+0x9c>
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	9b 81       	ldd	r25, Y+3	; 0x03
    1268:	61 15       	cp	r22, r1
    126a:	71 05       	cpc	r23, r1
    126c:	21 f0       	breq	.+8      	; 0x1276 <malloc+0x8e>
    126e:	fb 01       	movw	r30, r22
    1270:	93 83       	std	Z+3, r25	; 0x03
    1272:	82 83       	std	Z+2, r24	; 0x02
    1274:	04 c0       	rjmp	.+8      	; 0x127e <malloc+0x96>
    1276:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <__flp+0x1>
    127a:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <__flp>
    127e:	fe 01       	movw	r30, r28
    1280:	32 96       	adiw	r30, 0x02	; 2
    1282:	44 c0       	rjmp	.+136    	; 0x130c <malloc+0x124>
    1284:	fe 01       	movw	r30, r28
    1286:	e2 0f       	add	r30, r18
    1288:	f3 1f       	adc	r31, r19
    128a:	81 93       	st	Z+, r24
    128c:	91 93       	st	Z+, r25
    128e:	22 50       	subi	r18, 0x02	; 2
    1290:	31 09       	sbc	r19, r1
    1292:	39 83       	std	Y+1, r19	; 0x01
    1294:	28 83       	st	Y, r18
    1296:	3a c0       	rjmp	.+116    	; 0x130c <malloc+0x124>
    1298:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__brkval>
    129c:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__brkval+0x1>
    12a0:	23 2b       	or	r18, r19
    12a2:	41 f4       	brne	.+16     	; 0x12b4 <malloc+0xcc>
    12a4:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    12a8:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    12ac:	30 93 a0 02 	sts	0x02A0, r19	; 0x8002a0 <__brkval+0x1>
    12b0:	20 93 9f 02 	sts	0x029F, r18	; 0x80029f <__brkval>
    12b4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    12b8:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    12bc:	21 15       	cp	r18, r1
    12be:	31 05       	cpc	r19, r1
    12c0:	41 f4       	brne	.+16     	; 0x12d2 <malloc+0xea>
    12c2:	2d b7       	in	r18, 0x3d	; 61
    12c4:	3e b7       	in	r19, 0x3e	; 62
    12c6:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    12ca:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    12ce:	24 1b       	sub	r18, r20
    12d0:	35 0b       	sbc	r19, r21
    12d2:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <__brkval>
    12d6:	f0 91 a0 02 	lds	r31, 0x02A0	; 0x8002a0 <__brkval+0x1>
    12da:	e2 17       	cp	r30, r18
    12dc:	f3 07       	cpc	r31, r19
    12de:	a0 f4       	brcc	.+40     	; 0x1308 <malloc+0x120>
    12e0:	2e 1b       	sub	r18, r30
    12e2:	3f 0b       	sbc	r19, r31
    12e4:	28 17       	cp	r18, r24
    12e6:	39 07       	cpc	r19, r25
    12e8:	78 f0       	brcs	.+30     	; 0x1308 <malloc+0x120>
    12ea:	ac 01       	movw	r20, r24
    12ec:	4e 5f       	subi	r20, 0xFE	; 254
    12ee:	5f 4f       	sbci	r21, 0xFF	; 255
    12f0:	24 17       	cp	r18, r20
    12f2:	35 07       	cpc	r19, r21
    12f4:	48 f0       	brcs	.+18     	; 0x1308 <malloc+0x120>
    12f6:	4e 0f       	add	r20, r30
    12f8:	5f 1f       	adc	r21, r31
    12fa:	50 93 a0 02 	sts	0x02A0, r21	; 0x8002a0 <__brkval+0x1>
    12fe:	40 93 9f 02 	sts	0x029F, r20	; 0x80029f <__brkval>
    1302:	81 93       	st	Z+, r24
    1304:	91 93       	st	Z+, r25
    1306:	02 c0       	rjmp	.+4      	; 0x130c <malloc+0x124>
    1308:	e0 e0       	ldi	r30, 0x00	; 0
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	cf 01       	movw	r24, r30
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	08 95       	ret

00001318 <free>:
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	09 f4       	brne	.+2      	; 0x1322 <free+0xa>
    1320:	81 c0       	rjmp	.+258    	; 0x1424 <free+0x10c>
    1322:	fc 01       	movw	r30, r24
    1324:	32 97       	sbiw	r30, 0x02	; 2
    1326:	13 82       	std	Z+3, r1	; 0x03
    1328:	12 82       	std	Z+2, r1	; 0x02
    132a:	a0 91 a1 02 	lds	r26, 0x02A1	; 0x8002a1 <__flp>
    132e:	b0 91 a2 02 	lds	r27, 0x02A2	; 0x8002a2 <__flp+0x1>
    1332:	10 97       	sbiw	r26, 0x00	; 0
    1334:	81 f4       	brne	.+32     	; 0x1356 <free+0x3e>
    1336:	20 81       	ld	r18, Z
    1338:	31 81       	ldd	r19, Z+1	; 0x01
    133a:	82 0f       	add	r24, r18
    133c:	93 1f       	adc	r25, r19
    133e:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__brkval>
    1342:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__brkval+0x1>
    1346:	28 17       	cp	r18, r24
    1348:	39 07       	cpc	r19, r25
    134a:	51 f5       	brne	.+84     	; 0x13a0 <free+0x88>
    134c:	f0 93 a0 02 	sts	0x02A0, r31	; 0x8002a0 <__brkval+0x1>
    1350:	e0 93 9f 02 	sts	0x029F, r30	; 0x80029f <__brkval>
    1354:	67 c0       	rjmp	.+206    	; 0x1424 <free+0x10c>
    1356:	ed 01       	movw	r28, r26
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	ce 17       	cp	r28, r30
    135e:	df 07       	cpc	r29, r31
    1360:	40 f4       	brcc	.+16     	; 0x1372 <free+0x5a>
    1362:	4a 81       	ldd	r20, Y+2	; 0x02
    1364:	5b 81       	ldd	r21, Y+3	; 0x03
    1366:	9e 01       	movw	r18, r28
    1368:	41 15       	cp	r20, r1
    136a:	51 05       	cpc	r21, r1
    136c:	f1 f0       	breq	.+60     	; 0x13aa <free+0x92>
    136e:	ea 01       	movw	r28, r20
    1370:	f5 cf       	rjmp	.-22     	; 0x135c <free+0x44>
    1372:	d3 83       	std	Z+3, r29	; 0x03
    1374:	c2 83       	std	Z+2, r28	; 0x02
    1376:	40 81       	ld	r20, Z
    1378:	51 81       	ldd	r21, Z+1	; 0x01
    137a:	84 0f       	add	r24, r20
    137c:	95 1f       	adc	r25, r21
    137e:	c8 17       	cp	r28, r24
    1380:	d9 07       	cpc	r29, r25
    1382:	59 f4       	brne	.+22     	; 0x139a <free+0x82>
    1384:	88 81       	ld	r24, Y
    1386:	99 81       	ldd	r25, Y+1	; 0x01
    1388:	84 0f       	add	r24, r20
    138a:	95 1f       	adc	r25, r21
    138c:	02 96       	adiw	r24, 0x02	; 2
    138e:	91 83       	std	Z+1, r25	; 0x01
    1390:	80 83       	st	Z, r24
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	9b 81       	ldd	r25, Y+3	; 0x03
    1396:	93 83       	std	Z+3, r25	; 0x03
    1398:	82 83       	std	Z+2, r24	; 0x02
    139a:	21 15       	cp	r18, r1
    139c:	31 05       	cpc	r19, r1
    139e:	29 f4       	brne	.+10     	; 0x13aa <free+0x92>
    13a0:	f0 93 a2 02 	sts	0x02A2, r31	; 0x8002a2 <__flp+0x1>
    13a4:	e0 93 a1 02 	sts	0x02A1, r30	; 0x8002a1 <__flp>
    13a8:	3d c0       	rjmp	.+122    	; 0x1424 <free+0x10c>
    13aa:	e9 01       	movw	r28, r18
    13ac:	fb 83       	std	Y+3, r31	; 0x03
    13ae:	ea 83       	std	Y+2, r30	; 0x02
    13b0:	49 91       	ld	r20, Y+
    13b2:	59 91       	ld	r21, Y+
    13b4:	c4 0f       	add	r28, r20
    13b6:	d5 1f       	adc	r29, r21
    13b8:	ec 17       	cp	r30, r28
    13ba:	fd 07       	cpc	r31, r29
    13bc:	61 f4       	brne	.+24     	; 0x13d6 <free+0xbe>
    13be:	80 81       	ld	r24, Z
    13c0:	91 81       	ldd	r25, Z+1	; 0x01
    13c2:	84 0f       	add	r24, r20
    13c4:	95 1f       	adc	r25, r21
    13c6:	02 96       	adiw	r24, 0x02	; 2
    13c8:	e9 01       	movw	r28, r18
    13ca:	99 83       	std	Y+1, r25	; 0x01
    13cc:	88 83       	st	Y, r24
    13ce:	82 81       	ldd	r24, Z+2	; 0x02
    13d0:	93 81       	ldd	r25, Z+3	; 0x03
    13d2:	9b 83       	std	Y+3, r25	; 0x03
    13d4:	8a 83       	std	Y+2, r24	; 0x02
    13d6:	e0 e0       	ldi	r30, 0x00	; 0
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	12 96       	adiw	r26, 0x02	; 2
    13dc:	8d 91       	ld	r24, X+
    13de:	9c 91       	ld	r25, X
    13e0:	13 97       	sbiw	r26, 0x03	; 3
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	19 f0       	breq	.+6      	; 0x13ec <free+0xd4>
    13e6:	fd 01       	movw	r30, r26
    13e8:	dc 01       	movw	r26, r24
    13ea:	f7 cf       	rjmp	.-18     	; 0x13da <free+0xc2>
    13ec:	8d 91       	ld	r24, X+
    13ee:	9c 91       	ld	r25, X
    13f0:	11 97       	sbiw	r26, 0x01	; 1
    13f2:	9d 01       	movw	r18, r26
    13f4:	2e 5f       	subi	r18, 0xFE	; 254
    13f6:	3f 4f       	sbci	r19, 0xFF	; 255
    13f8:	82 0f       	add	r24, r18
    13fa:	93 1f       	adc	r25, r19
    13fc:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__brkval>
    1400:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__brkval+0x1>
    1404:	28 17       	cp	r18, r24
    1406:	39 07       	cpc	r19, r25
    1408:	69 f4       	brne	.+26     	; 0x1424 <free+0x10c>
    140a:	30 97       	sbiw	r30, 0x00	; 0
    140c:	29 f4       	brne	.+10     	; 0x1418 <free+0x100>
    140e:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <__flp+0x1>
    1412:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <__flp>
    1416:	02 c0       	rjmp	.+4      	; 0x141c <free+0x104>
    1418:	13 82       	std	Z+3, r1	; 0x03
    141a:	12 82       	std	Z+2, r1	; 0x02
    141c:	b0 93 a0 02 	sts	0x02A0, r27	; 0x8002a0 <__brkval+0x1>
    1420:	a0 93 9f 02 	sts	0x029F, r26	; 0x80029f <__brkval>
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	08 95       	ret

0000142a <do_rand>:
    142a:	8f 92       	push	r8
    142c:	9f 92       	push	r9
    142e:	af 92       	push	r10
    1430:	bf 92       	push	r11
    1432:	cf 92       	push	r12
    1434:	df 92       	push	r13
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	ec 01       	movw	r28, r24
    1440:	68 81       	ld	r22, Y
    1442:	79 81       	ldd	r23, Y+1	; 0x01
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	9b 81       	ldd	r25, Y+3	; 0x03
    1448:	61 15       	cp	r22, r1
    144a:	71 05       	cpc	r23, r1
    144c:	81 05       	cpc	r24, r1
    144e:	91 05       	cpc	r25, r1
    1450:	21 f4       	brne	.+8      	; 0x145a <do_rand+0x30>
    1452:	64 e2       	ldi	r22, 0x24	; 36
    1454:	79 ed       	ldi	r23, 0xD9	; 217
    1456:	8b e5       	ldi	r24, 0x5B	; 91
    1458:	97 e0       	ldi	r25, 0x07	; 7
    145a:	2d e1       	ldi	r18, 0x1D	; 29
    145c:	33 ef       	ldi	r19, 0xF3	; 243
    145e:	41 e0       	ldi	r20, 0x01	; 1
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__divmodsi4>
    1466:	49 01       	movw	r8, r18
    1468:	5a 01       	movw	r10, r20
    146a:	9b 01       	movw	r18, r22
    146c:	ac 01       	movw	r20, r24
    146e:	a7 ea       	ldi	r26, 0xA7	; 167
    1470:	b1 e4       	ldi	r27, 0x41	; 65
    1472:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__muluhisi3>
    1476:	6b 01       	movw	r12, r22
    1478:	7c 01       	movw	r14, r24
    147a:	ac ee       	ldi	r26, 0xEC	; 236
    147c:	b4 ef       	ldi	r27, 0xF4	; 244
    147e:	a5 01       	movw	r20, r10
    1480:	94 01       	movw	r18, r8
    1482:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__mulohisi3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8c 0d       	add	r24, r12
    148c:	9d 1d       	adc	r25, r13
    148e:	ae 1d       	adc	r26, r14
    1490:	bf 1d       	adc	r27, r15
    1492:	b7 ff       	sbrs	r27, 7
    1494:	03 c0       	rjmp	.+6      	; 0x149c <do_rand+0x72>
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	a1 09       	sbc	r26, r1
    149a:	b0 48       	sbci	r27, 0x80	; 128
    149c:	88 83       	st	Y, r24
    149e:	99 83       	std	Y+1, r25	; 0x01
    14a0:	aa 83       	std	Y+2, r26	; 0x02
    14a2:	bb 83       	std	Y+3, r27	; 0x03
    14a4:	9f 77       	andi	r25, 0x7F	; 127
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	ff 90       	pop	r15
    14ac:	ef 90       	pop	r14
    14ae:	df 90       	pop	r13
    14b0:	cf 90       	pop	r12
    14b2:	bf 90       	pop	r11
    14b4:	af 90       	pop	r10
    14b6:	9f 90       	pop	r9
    14b8:	8f 90       	pop	r8
    14ba:	08 95       	ret

000014bc <rand_r>:
    14bc:	0e 94 15 0a 	call	0x142a	; 0x142a <do_rand>
    14c0:	08 95       	ret

000014c2 <rand>:
    14c2:	86 e6       	ldi	r24, 0x66	; 102
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	0e 94 15 0a 	call	0x142a	; 0x142a <do_rand>
    14ca:	08 95       	ret

000014cc <srand>:
    14cc:	a0 e0       	ldi	r26, 0x00	; 0
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <next>
    14d4:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <next+0x1>
    14d8:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <next+0x2>
    14dc:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <next+0x3>
    14e0:	08 95       	ret

000014e2 <strcat>:
    14e2:	fb 01       	movw	r30, r22
    14e4:	dc 01       	movw	r26, r24
    14e6:	0d 90       	ld	r0, X+
    14e8:	00 20       	and	r0, r0
    14ea:	e9 f7       	brne	.-6      	; 0x14e6 <strcat+0x4>
    14ec:	11 97       	sbiw	r26, 0x01	; 1
    14ee:	01 90       	ld	r0, Z+
    14f0:	0d 92       	st	X+, r0
    14f2:	00 20       	and	r0, r0
    14f4:	e1 f7       	brne	.-8      	; 0x14ee <strcat+0xc>
    14f6:	08 95       	ret

000014f8 <__itoa_ncheck>:
    14f8:	bb 27       	eor	r27, r27
    14fa:	4a 30       	cpi	r20, 0x0A	; 10
    14fc:	31 f4       	brne	.+12     	; 0x150a <__itoa_ncheck+0x12>
    14fe:	99 23       	and	r25, r25
    1500:	22 f4       	brpl	.+8      	; 0x150a <__itoa_ncheck+0x12>
    1502:	bd e2       	ldi	r27, 0x2D	; 45
    1504:	90 95       	com	r25
    1506:	81 95       	neg	r24
    1508:	9f 4f       	sbci	r25, 0xFF	; 255
    150a:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__utoa_common>

0000150e <__utoa_ncheck>:
    150e:	bb 27       	eor	r27, r27

00001510 <__utoa_common>:
    1510:	fb 01       	movw	r30, r22
    1512:	55 27       	eor	r21, r21
    1514:	aa 27       	eor	r26, r26
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	aa 1f       	adc	r26, r26
    151c:	a4 17       	cp	r26, r20
    151e:	10 f0       	brcs	.+4      	; 0x1524 <__utoa_common+0x14>
    1520:	a4 1b       	sub	r26, r20
    1522:	83 95       	inc	r24
    1524:	50 51       	subi	r21, 0x10	; 16
    1526:	b9 f7       	brne	.-18     	; 0x1516 <__utoa_common+0x6>
    1528:	a0 5d       	subi	r26, 0xD0	; 208
    152a:	aa 33       	cpi	r26, 0x3A	; 58
    152c:	08 f0       	brcs	.+2      	; 0x1530 <__utoa_common+0x20>
    152e:	a9 5d       	subi	r26, 0xD9	; 217
    1530:	a1 93       	st	Z+, r26
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	79 f7       	brne	.-34     	; 0x1514 <__utoa_common+0x4>
    1536:	b1 11       	cpse	r27, r1
    1538:	b1 93       	st	Z+, r27
    153a:	11 92       	st	Z+, r1
    153c:	cb 01       	movw	r24, r22
    153e:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <strrev>

00001542 <strrev>:
    1542:	dc 01       	movw	r26, r24
    1544:	fc 01       	movw	r30, r24
    1546:	67 2f       	mov	r22, r23
    1548:	71 91       	ld	r23, Z+
    154a:	77 23       	and	r23, r23
    154c:	e1 f7       	brne	.-8      	; 0x1546 <strrev+0x4>
    154e:	32 97       	sbiw	r30, 0x02	; 2
    1550:	04 c0       	rjmp	.+8      	; 0x155a <strrev+0x18>
    1552:	7c 91       	ld	r23, X
    1554:	6d 93       	st	X+, r22
    1556:	70 83       	st	Z, r23
    1558:	62 91       	ld	r22, -Z
    155a:	ae 17       	cp	r26, r30
    155c:	bf 07       	cpc	r27, r31
    155e:	c8 f3       	brcs	.-14     	; 0x1552 <strrev+0x10>
    1560:	08 95       	ret

00001562 <__divmodsi4>:
    1562:	05 2e       	mov	r0, r21
    1564:	97 fb       	bst	r25, 7
    1566:	1e f4       	brtc	.+6      	; 0x156e <__divmodsi4+0xc>
    1568:	00 94       	com	r0
    156a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__negsi2>
    156e:	57 fd       	sbrc	r21, 7
    1570:	07 d0       	rcall	.+14     	; 0x1580 <__divmodsi4_neg2>
    1572:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__udivmodsi4>
    1576:	07 fc       	sbrc	r0, 7
    1578:	03 d0       	rcall	.+6      	; 0x1580 <__divmodsi4_neg2>
    157a:	4e f4       	brtc	.+18     	; 0x158e <__divmodsi4_exit>
    157c:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <__negsi2>

00001580 <__divmodsi4_neg2>:
    1580:	50 95       	com	r21
    1582:	40 95       	com	r20
    1584:	30 95       	com	r19
    1586:	21 95       	neg	r18
    1588:	3f 4f       	sbci	r19, 0xFF	; 255
    158a:	4f 4f       	sbci	r20, 0xFF	; 255
    158c:	5f 4f       	sbci	r21, 0xFF	; 255

0000158e <__divmodsi4_exit>:
    158e:	08 95       	ret

00001590 <__negsi2>:
    1590:	90 95       	com	r25
    1592:	80 95       	com	r24
    1594:	70 95       	com	r23
    1596:	61 95       	neg	r22
    1598:	7f 4f       	sbci	r23, 0xFF	; 255
    159a:	8f 4f       	sbci	r24, 0xFF	; 255
    159c:	9f 4f       	sbci	r25, 0xFF	; 255
    159e:	08 95       	ret

000015a0 <__muluhisi3>:
    15a0:	0e 94 df 08 	call	0x11be	; 0x11be <__umulhisi3>
    15a4:	a5 9f       	mul	r26, r21
    15a6:	90 0d       	add	r25, r0
    15a8:	b4 9f       	mul	r27, r20
    15aa:	90 0d       	add	r25, r0
    15ac:	a4 9f       	mul	r26, r20
    15ae:	80 0d       	add	r24, r0
    15b0:	91 1d       	adc	r25, r1
    15b2:	11 24       	eor	r1, r1
    15b4:	08 95       	ret

000015b6 <__mulshisi3>:
    15b6:	b7 ff       	sbrs	r27, 7
    15b8:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__muluhisi3>

000015bc <__mulohisi3>:
    15bc:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__muluhisi3>
    15c0:	82 1b       	sub	r24, r18
    15c2:	93 0b       	sbc	r25, r19
    15c4:	08 95       	ret

000015c6 <__udivmodsi4>:
    15c6:	a1 e2       	ldi	r26, 0x21	; 33
    15c8:	1a 2e       	mov	r1, r26
    15ca:	aa 1b       	sub	r26, r26
    15cc:	bb 1b       	sub	r27, r27
    15ce:	fd 01       	movw	r30, r26
    15d0:	0d c0       	rjmp	.+26     	; 0x15ec <__udivmodsi4_ep>

000015d2 <__udivmodsi4_loop>:
    15d2:	aa 1f       	adc	r26, r26
    15d4:	bb 1f       	adc	r27, r27
    15d6:	ee 1f       	adc	r30, r30
    15d8:	ff 1f       	adc	r31, r31
    15da:	a2 17       	cp	r26, r18
    15dc:	b3 07       	cpc	r27, r19
    15de:	e4 07       	cpc	r30, r20
    15e0:	f5 07       	cpc	r31, r21
    15e2:	20 f0       	brcs	.+8      	; 0x15ec <__udivmodsi4_ep>
    15e4:	a2 1b       	sub	r26, r18
    15e6:	b3 0b       	sbc	r27, r19
    15e8:	e4 0b       	sbc	r30, r20
    15ea:	f5 0b       	sbc	r31, r21

000015ec <__udivmodsi4_ep>:
    15ec:	66 1f       	adc	r22, r22
    15ee:	77 1f       	adc	r23, r23
    15f0:	88 1f       	adc	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	1a 94       	dec	r1
    15f6:	69 f7       	brne	.-38     	; 0x15d2 <__udivmodsi4_loop>
    15f8:	60 95       	com	r22
    15fa:	70 95       	com	r23
    15fc:	80 95       	com	r24
    15fe:	90 95       	com	r25
    1600:	9b 01       	movw	r18, r22
    1602:	ac 01       	movw	r20, r24
    1604:	bd 01       	movw	r22, r26
    1606:	cf 01       	movw	r24, r30
    1608:	08 95       	ret

0000160a <_exit>:
    160a:	f8 94       	cli

0000160c <__stop_program>:
    160c:	ff cf       	rjmp	.-2      	; 0x160c <__stop_program>
