
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000153e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  0000153e  000015d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001e6  008000c6  008000c6  00001638  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001668  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ca5  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0c  00000000  00000000  00006441  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000131c  00000000  00000000  00006e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  0000816c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019bf  00000000  00000000  0000844c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002199  00000000  00000000  00009e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000bfa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	93 09       	sbc	r25, r3

00000056 <__ctors_end>:
      56:	11 24       	eor	r1, r1
      58:	1f be       	out	0x3f, r1	; 63
      5a:	cf e5       	ldi	r28, 0x5F	; 95
      5c:	d8 e0       	ldi	r29, 0x08	; 8
      5e:	de bf       	out	0x3e, r29	; 62
      60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
      62:	10 e0       	ldi	r17, 0x00	; 0
      64:	a0 e6       	ldi	r26, 0x60	; 96
      66:	b0 e0       	ldi	r27, 0x00	; 0
      68:	ee e3       	ldi	r30, 0x3E	; 62
      6a:	f5 e1       	ldi	r31, 0x15	; 21
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
      6e:	05 90       	lpm	r0, Z+
      70:	0d 92       	st	X+, r0
      72:	a6 3c       	cpi	r26, 0xC6	; 198
      74:	b1 07       	cpc	r27, r17
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
      78:	22 e0       	ldi	r18, 0x02	; 2
      7a:	a6 ec       	ldi	r26, 0xC6	; 198
      7c:	b0 e0       	ldi	r27, 0x00	; 0
      7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
      80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
      82:	ac 3a       	cpi	r26, 0xAC	; 172
      84:	b2 07       	cpc	r27, r18
      86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
      88:	10 e0       	ldi	r17, 0x00	; 0
      8a:	cb e2       	ldi	r28, 0x2B	; 43
      8c:	d0 e0       	ldi	r29, 0x00	; 0
      8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
      90:	21 97       	sbiw	r28, 0x01	; 1
      92:	fe 01       	movw	r30, r28
      94:	0e 94 a7 09 	call	0x134e	; 0x134e <__tablejump2__>
      98:	ca 32       	cpi	r28, 0x2A	; 42
      9a:	d1 07       	cpc	r29, r17
      9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
      9e:	0e 94 8a 09 	call	0x1314	; 0x1314 <main>
      a2:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <_exit>

000000a6 <__bad_interrupt>:
      a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z23ledPrintUsingTwoDecoderccc>:
}

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
	Lcd4_Cmd(0x08);
      aa:	9f e0       	ldi	r25, 0x0F	; 15
      ac:	96 1b       	sub	r25, r22
      ae:	42 35       	cpi	r20, 0x52	; 82
      b0:	21 f4       	brne	.+8      	; 0xba <_Z23ledPrintUsingTwoDecoderccc+0x10>
      b2:	88 60       	ori	r24, 0x08	; 8
      b4:	82 95       	swap	r24
      b6:	80 7f       	andi	r24, 0xF0	; 240
      b8:	03 c0       	rjmp	.+6      	; 0xc0 <_Z23ledPrintUsingTwoDecoderccc+0x16>
      ba:	87 7f       	andi	r24, 0xF7	; 247
      bc:	82 95       	swap	r24
      be:	80 7f       	andi	r24, 0xF0	; 240
      c0:	89 2b       	or	r24, r25
      c2:	88 bb       	out	0x18, r24	; 24
      c4:	08 95       	ret

000000c6 <_Z9pinChangeii>:
      c6:	67 2b       	or	r22, r23
      c8:	09 f0       	breq	.+2      	; 0xcc <_Z9pinChangeii+0x6>
      ca:	9f c0       	rjmp	.+318    	; 0x20a <_Z9pinChangeii+0x144>
      cc:	00 97       	sbiw	r24, 0x00	; 0
      ce:	11 f4       	brne	.+4      	; 0xd4 <_Z9pinChangeii+0xe>
      d0:	d8 98       	cbi	0x1b, 0	; 27
      d2:	08 95       	ret
      d4:	81 30       	cpi	r24, 0x01	; 1
      d6:	91 05       	cpc	r25, r1
      d8:	11 f4       	brne	.+4      	; 0xde <_Z9pinChangeii+0x18>
      da:	d9 98       	cbi	0x1b, 1	; 27
      dc:	08 95       	ret
      de:	82 30       	cpi	r24, 0x02	; 2
      e0:	91 05       	cpc	r25, r1
      e2:	11 f4       	brne	.+4      	; 0xe8 <_Z9pinChangeii+0x22>
      e4:	da 98       	cbi	0x1b, 2	; 27
      e6:	08 95       	ret
      e8:	83 30       	cpi	r24, 0x03	; 3
      ea:	91 05       	cpc	r25, r1
      ec:	11 f4       	brne	.+4      	; 0xf2 <_Z9pinChangeii+0x2c>
      ee:	db 98       	cbi	0x1b, 3	; 27
      f0:	08 95       	ret
      f2:	84 30       	cpi	r24, 0x04	; 4
      f4:	91 05       	cpc	r25, r1
      f6:	11 f4       	brne	.+4      	; 0xfc <_Z9pinChangeii+0x36>
      f8:	dc 98       	cbi	0x1b, 4	; 27
      fa:	08 95       	ret
      fc:	85 30       	cpi	r24, 0x05	; 5
      fe:	91 05       	cpc	r25, r1
     100:	11 f4       	brne	.+4      	; 0x106 <_Z9pinChangeii+0x40>
     102:	dd 98       	cbi	0x1b, 5	; 27
     104:	08 95       	ret
     106:	86 30       	cpi	r24, 0x06	; 6
     108:	91 05       	cpc	r25, r1
     10a:	11 f4       	brne	.+4      	; 0x110 <_Z9pinChangeii+0x4a>
     10c:	de 98       	cbi	0x1b, 6	; 27
     10e:	08 95       	ret
     110:	87 30       	cpi	r24, 0x07	; 7
     112:	91 05       	cpc	r25, r1
     114:	11 f4       	brne	.+4      	; 0x11a <_Z9pinChangeii+0x54>
     116:	df 98       	cbi	0x1b, 7	; 27
     118:	08 95       	ret
     11a:	8a 30       	cpi	r24, 0x0A	; 10
     11c:	91 05       	cpc	r25, r1
     11e:	11 f4       	brne	.+4      	; 0x124 <_Z9pinChangeii+0x5e>
     120:	c0 98       	cbi	0x18, 0	; 24
     122:	08 95       	ret
     124:	8b 30       	cpi	r24, 0x0B	; 11
     126:	91 05       	cpc	r25, r1
     128:	11 f4       	brne	.+4      	; 0x12e <_Z9pinChangeii+0x68>
     12a:	c1 98       	cbi	0x18, 1	; 24
     12c:	08 95       	ret
     12e:	8c 30       	cpi	r24, 0x0C	; 12
     130:	91 05       	cpc	r25, r1
     132:	11 f4       	brne	.+4      	; 0x138 <_Z9pinChangeii+0x72>
     134:	c2 98       	cbi	0x18, 2	; 24
     136:	08 95       	ret
     138:	8d 30       	cpi	r24, 0x0D	; 13
     13a:	91 05       	cpc	r25, r1
     13c:	11 f4       	brne	.+4      	; 0x142 <_Z9pinChangeii+0x7c>
     13e:	c3 98       	cbi	0x18, 3	; 24
     140:	08 95       	ret
     142:	8e 30       	cpi	r24, 0x0E	; 14
     144:	91 05       	cpc	r25, r1
     146:	11 f4       	brne	.+4      	; 0x14c <_Z9pinChangeii+0x86>
     148:	c4 98       	cbi	0x18, 4	; 24
     14a:	08 95       	ret
     14c:	8f 30       	cpi	r24, 0x0F	; 15
     14e:	91 05       	cpc	r25, r1
     150:	11 f4       	brne	.+4      	; 0x156 <_Z9pinChangeii+0x90>
     152:	c5 98       	cbi	0x18, 5	; 24
     154:	08 95       	ret
     156:	80 31       	cpi	r24, 0x10	; 16
     158:	91 05       	cpc	r25, r1
     15a:	11 f4       	brne	.+4      	; 0x160 <_Z9pinChangeii+0x9a>
     15c:	c6 98       	cbi	0x18, 6	; 24
     15e:	08 95       	ret
     160:	81 31       	cpi	r24, 0x11	; 17
     162:	91 05       	cpc	r25, r1
     164:	11 f4       	brne	.+4      	; 0x16a <_Z9pinChangeii+0xa4>
     166:	c7 98       	cbi	0x18, 7	; 24
     168:	08 95       	ret
     16a:	84 31       	cpi	r24, 0x14	; 20
     16c:	91 05       	cpc	r25, r1
     16e:	11 f4       	brne	.+4      	; 0x174 <_Z9pinChangeii+0xae>
     170:	a8 98       	cbi	0x15, 0	; 21
     172:	08 95       	ret
     174:	85 31       	cpi	r24, 0x15	; 21
     176:	91 05       	cpc	r25, r1
     178:	11 f4       	brne	.+4      	; 0x17e <_Z9pinChangeii+0xb8>
     17a:	a9 98       	cbi	0x15, 1	; 21
     17c:	08 95       	ret
     17e:	86 31       	cpi	r24, 0x16	; 22
     180:	91 05       	cpc	r25, r1
     182:	11 f4       	brne	.+4      	; 0x188 <_Z9pinChangeii+0xc2>
     184:	aa 98       	cbi	0x15, 2	; 21
     186:	08 95       	ret
     188:	87 31       	cpi	r24, 0x17	; 23
     18a:	91 05       	cpc	r25, r1
     18c:	11 f4       	brne	.+4      	; 0x192 <_Z9pinChangeii+0xcc>
     18e:	ab 98       	cbi	0x15, 3	; 21
     190:	08 95       	ret
     192:	88 31       	cpi	r24, 0x18	; 24
     194:	91 05       	cpc	r25, r1
     196:	11 f4       	brne	.+4      	; 0x19c <_Z9pinChangeii+0xd6>
     198:	ac 98       	cbi	0x15, 4	; 21
     19a:	08 95       	ret
     19c:	89 31       	cpi	r24, 0x19	; 25
     19e:	91 05       	cpc	r25, r1
     1a0:	11 f4       	brne	.+4      	; 0x1a6 <_Z9pinChangeii+0xe0>
     1a2:	ad 98       	cbi	0x15, 5	; 21
     1a4:	08 95       	ret
     1a6:	8a 31       	cpi	r24, 0x1A	; 26
     1a8:	91 05       	cpc	r25, r1
     1aa:	11 f4       	brne	.+4      	; 0x1b0 <_Z9pinChangeii+0xea>
     1ac:	ae 98       	cbi	0x15, 6	; 21
     1ae:	08 95       	ret
     1b0:	8b 31       	cpi	r24, 0x1B	; 27
     1b2:	91 05       	cpc	r25, r1
     1b4:	11 f4       	brne	.+4      	; 0x1ba <_Z9pinChangeii+0xf4>
     1b6:	af 98       	cbi	0x15, 7	; 21
     1b8:	08 95       	ret
     1ba:	8e 31       	cpi	r24, 0x1E	; 30
     1bc:	91 05       	cpc	r25, r1
     1be:	11 f4       	brne	.+4      	; 0x1c4 <_Z9pinChangeii+0xfe>
     1c0:	90 98       	cbi	0x12, 0	; 18
     1c2:	08 95       	ret
     1c4:	8f 31       	cpi	r24, 0x1F	; 31
     1c6:	91 05       	cpc	r25, r1
     1c8:	11 f4       	brne	.+4      	; 0x1ce <_Z9pinChangeii+0x108>
     1ca:	91 98       	cbi	0x12, 1	; 18
     1cc:	08 95       	ret
     1ce:	80 32       	cpi	r24, 0x20	; 32
     1d0:	91 05       	cpc	r25, r1
     1d2:	11 f4       	brne	.+4      	; 0x1d8 <_Z9pinChangeii+0x112>
     1d4:	92 98       	cbi	0x12, 2	; 18
     1d6:	08 95       	ret
     1d8:	81 32       	cpi	r24, 0x21	; 33
     1da:	91 05       	cpc	r25, r1
     1dc:	11 f4       	brne	.+4      	; 0x1e2 <_Z9pinChangeii+0x11c>
     1de:	93 98       	cbi	0x12, 3	; 18
     1e0:	08 95       	ret
     1e2:	82 32       	cpi	r24, 0x22	; 34
     1e4:	91 05       	cpc	r25, r1
     1e6:	11 f4       	brne	.+4      	; 0x1ec <_Z9pinChangeii+0x126>
     1e8:	94 98       	cbi	0x12, 4	; 18
     1ea:	08 95       	ret
     1ec:	83 32       	cpi	r24, 0x23	; 35
     1ee:	91 05       	cpc	r25, r1
     1f0:	11 f4       	brne	.+4      	; 0x1f6 <_Z9pinChangeii+0x130>
     1f2:	95 98       	cbi	0x12, 5	; 18
     1f4:	08 95       	ret
     1f6:	84 32       	cpi	r24, 0x24	; 36
     1f8:	91 05       	cpc	r25, r1
     1fa:	11 f4       	brne	.+4      	; 0x200 <_Z9pinChangeii+0x13a>
     1fc:	96 98       	cbi	0x12, 6	; 18
     1fe:	08 95       	ret
     200:	85 97       	sbiw	r24, 0x25	; 37
     202:	09 f0       	breq	.+2      	; 0x206 <_Z9pinChangeii+0x140>
     204:	9f c0       	rjmp	.+318    	; 0x344 <_Z9pinChangeii+0x27e>
     206:	97 98       	cbi	0x12, 7	; 18
     208:	08 95       	ret
     20a:	00 97       	sbiw	r24, 0x00	; 0
     20c:	11 f4       	brne	.+4      	; 0x212 <_Z9pinChangeii+0x14c>
     20e:	d8 9a       	sbi	0x1b, 0	; 27
     210:	08 95       	ret
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	91 05       	cpc	r25, r1
     216:	11 f4       	brne	.+4      	; 0x21c <_Z9pinChangeii+0x156>
     218:	d9 9a       	sbi	0x1b, 1	; 27
     21a:	08 95       	ret
     21c:	82 30       	cpi	r24, 0x02	; 2
     21e:	91 05       	cpc	r25, r1
     220:	11 f4       	brne	.+4      	; 0x226 <_Z9pinChangeii+0x160>
     222:	da 9a       	sbi	0x1b, 2	; 27
     224:	08 95       	ret
     226:	83 30       	cpi	r24, 0x03	; 3
     228:	91 05       	cpc	r25, r1
     22a:	11 f4       	brne	.+4      	; 0x230 <_Z9pinChangeii+0x16a>
     22c:	db 9a       	sbi	0x1b, 3	; 27
     22e:	08 95       	ret
     230:	84 30       	cpi	r24, 0x04	; 4
     232:	91 05       	cpc	r25, r1
     234:	11 f4       	brne	.+4      	; 0x23a <_Z9pinChangeii+0x174>
     236:	dc 9a       	sbi	0x1b, 4	; 27
     238:	08 95       	ret
     23a:	85 30       	cpi	r24, 0x05	; 5
     23c:	91 05       	cpc	r25, r1
     23e:	11 f4       	brne	.+4      	; 0x244 <_Z9pinChangeii+0x17e>
     240:	dd 9a       	sbi	0x1b, 5	; 27
     242:	08 95       	ret
     244:	86 30       	cpi	r24, 0x06	; 6
     246:	91 05       	cpc	r25, r1
     248:	11 f4       	brne	.+4      	; 0x24e <_Z9pinChangeii+0x188>
     24a:	de 9a       	sbi	0x1b, 6	; 27
     24c:	08 95       	ret
     24e:	87 30       	cpi	r24, 0x07	; 7
     250:	91 05       	cpc	r25, r1
     252:	11 f4       	brne	.+4      	; 0x258 <_Z9pinChangeii+0x192>
     254:	df 9a       	sbi	0x1b, 7	; 27
     256:	08 95       	ret
     258:	8a 30       	cpi	r24, 0x0A	; 10
     25a:	91 05       	cpc	r25, r1
     25c:	11 f4       	brne	.+4      	; 0x262 <_Z9pinChangeii+0x19c>
     25e:	c0 9a       	sbi	0x18, 0	; 24
     260:	08 95       	ret
     262:	8b 30       	cpi	r24, 0x0B	; 11
     264:	91 05       	cpc	r25, r1
     266:	11 f4       	brne	.+4      	; 0x26c <_Z9pinChangeii+0x1a6>
     268:	c1 9a       	sbi	0x18, 1	; 24
     26a:	08 95       	ret
     26c:	8c 30       	cpi	r24, 0x0C	; 12
     26e:	91 05       	cpc	r25, r1
     270:	11 f4       	brne	.+4      	; 0x276 <_Z9pinChangeii+0x1b0>
     272:	c2 9a       	sbi	0x18, 2	; 24
     274:	08 95       	ret
     276:	8d 30       	cpi	r24, 0x0D	; 13
     278:	91 05       	cpc	r25, r1
     27a:	11 f4       	brne	.+4      	; 0x280 <_Z9pinChangeii+0x1ba>
     27c:	c3 9a       	sbi	0x18, 3	; 24
     27e:	08 95       	ret
     280:	8e 30       	cpi	r24, 0x0E	; 14
     282:	91 05       	cpc	r25, r1
     284:	11 f4       	brne	.+4      	; 0x28a <_Z9pinChangeii+0x1c4>
     286:	c4 9a       	sbi	0x18, 4	; 24
     288:	08 95       	ret
     28a:	8f 30       	cpi	r24, 0x0F	; 15
     28c:	91 05       	cpc	r25, r1
     28e:	11 f4       	brne	.+4      	; 0x294 <_Z9pinChangeii+0x1ce>
     290:	c5 9a       	sbi	0x18, 5	; 24
     292:	08 95       	ret
     294:	80 31       	cpi	r24, 0x10	; 16
     296:	91 05       	cpc	r25, r1
     298:	11 f4       	brne	.+4      	; 0x29e <_Z9pinChangeii+0x1d8>
     29a:	c6 9a       	sbi	0x18, 6	; 24
     29c:	08 95       	ret
     29e:	81 31       	cpi	r24, 0x11	; 17
     2a0:	91 05       	cpc	r25, r1
     2a2:	11 f4       	brne	.+4      	; 0x2a8 <_Z9pinChangeii+0x1e2>
     2a4:	c7 9a       	sbi	0x18, 7	; 24
     2a6:	08 95       	ret
     2a8:	84 31       	cpi	r24, 0x14	; 20
     2aa:	91 05       	cpc	r25, r1
     2ac:	11 f4       	brne	.+4      	; 0x2b2 <_Z9pinChangeii+0x1ec>
     2ae:	a8 9a       	sbi	0x15, 0	; 21
     2b0:	08 95       	ret
     2b2:	85 31       	cpi	r24, 0x15	; 21
     2b4:	91 05       	cpc	r25, r1
     2b6:	11 f4       	brne	.+4      	; 0x2bc <_Z9pinChangeii+0x1f6>
     2b8:	a9 9a       	sbi	0x15, 1	; 21
     2ba:	08 95       	ret
     2bc:	86 31       	cpi	r24, 0x16	; 22
     2be:	91 05       	cpc	r25, r1
     2c0:	11 f4       	brne	.+4      	; 0x2c6 <_Z9pinChangeii+0x200>
     2c2:	aa 9a       	sbi	0x15, 2	; 21
     2c4:	08 95       	ret
     2c6:	87 31       	cpi	r24, 0x17	; 23
     2c8:	91 05       	cpc	r25, r1
     2ca:	11 f4       	brne	.+4      	; 0x2d0 <_Z9pinChangeii+0x20a>
     2cc:	ab 9a       	sbi	0x15, 3	; 21
     2ce:	08 95       	ret
     2d0:	88 31       	cpi	r24, 0x18	; 24
     2d2:	91 05       	cpc	r25, r1
     2d4:	11 f4       	brne	.+4      	; 0x2da <_Z9pinChangeii+0x214>
     2d6:	ac 9a       	sbi	0x15, 4	; 21
     2d8:	08 95       	ret
     2da:	89 31       	cpi	r24, 0x19	; 25
     2dc:	91 05       	cpc	r25, r1
     2de:	11 f4       	brne	.+4      	; 0x2e4 <_Z9pinChangeii+0x21e>
     2e0:	ad 9a       	sbi	0x15, 5	; 21
     2e2:	08 95       	ret
     2e4:	8a 31       	cpi	r24, 0x1A	; 26
     2e6:	91 05       	cpc	r25, r1
     2e8:	11 f4       	brne	.+4      	; 0x2ee <_Z9pinChangeii+0x228>
     2ea:	ae 9a       	sbi	0x15, 6	; 21
     2ec:	08 95       	ret
     2ee:	8b 31       	cpi	r24, 0x1B	; 27
     2f0:	91 05       	cpc	r25, r1
     2f2:	11 f4       	brne	.+4      	; 0x2f8 <_Z9pinChangeii+0x232>
     2f4:	af 9a       	sbi	0x15, 7	; 21
     2f6:	08 95       	ret
     2f8:	8e 31       	cpi	r24, 0x1E	; 30
     2fa:	91 05       	cpc	r25, r1
     2fc:	11 f4       	brne	.+4      	; 0x302 <_Z9pinChangeii+0x23c>
     2fe:	90 9a       	sbi	0x12, 0	; 18
     300:	08 95       	ret
     302:	8f 31       	cpi	r24, 0x1F	; 31
     304:	91 05       	cpc	r25, r1
     306:	11 f4       	brne	.+4      	; 0x30c <_Z9pinChangeii+0x246>
     308:	91 9a       	sbi	0x12, 1	; 18
     30a:	08 95       	ret
     30c:	80 32       	cpi	r24, 0x20	; 32
     30e:	91 05       	cpc	r25, r1
     310:	11 f4       	brne	.+4      	; 0x316 <_Z9pinChangeii+0x250>
     312:	92 9a       	sbi	0x12, 2	; 18
     314:	08 95       	ret
     316:	81 32       	cpi	r24, 0x21	; 33
     318:	91 05       	cpc	r25, r1
     31a:	11 f4       	brne	.+4      	; 0x320 <_Z9pinChangeii+0x25a>
     31c:	93 9a       	sbi	0x12, 3	; 18
     31e:	08 95       	ret
     320:	82 32       	cpi	r24, 0x22	; 34
     322:	91 05       	cpc	r25, r1
     324:	11 f4       	brne	.+4      	; 0x32a <_Z9pinChangeii+0x264>
     326:	94 9a       	sbi	0x12, 4	; 18
     328:	08 95       	ret
     32a:	83 32       	cpi	r24, 0x23	; 35
     32c:	91 05       	cpc	r25, r1
     32e:	11 f4       	brne	.+4      	; 0x334 <_Z9pinChangeii+0x26e>
     330:	95 9a       	sbi	0x12, 5	; 18
     332:	08 95       	ret
     334:	84 32       	cpi	r24, 0x24	; 36
     336:	91 05       	cpc	r25, r1
     338:	11 f4       	brne	.+4      	; 0x33e <_Z9pinChangeii+0x278>
     33a:	96 9a       	sbi	0x12, 6	; 18
     33c:	08 95       	ret
     33e:	85 97       	sbiw	r24, 0x25	; 37
     340:	09 f4       	brne	.+2      	; 0x344 <_Z9pinChangeii+0x27e>
     342:	97 9a       	sbi	0x12, 7	; 18
     344:	08 95       	ret

00000346 <_Z9Lcd4_Portc>:
     346:	cf 93       	push	r28
     348:	c8 2f       	mov	r28, r24
     34a:	80 ff       	sbrs	r24, 0
     34c:	07 c0       	rjmp	.+14     	; 0x35c <_Z9Lcd4_Portc+0x16>
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	82 e2       	ldi	r24, 0x22	; 34
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     35a:	06 c0       	rjmp	.+12     	; 0x368 <_Z9Lcd4_Portc+0x22>
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	82 e2       	ldi	r24, 0x22	; 34
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     368:	c1 ff       	sbrs	r28, 1
     36a:	07 c0       	rjmp	.+14     	; 0x37a <_Z9Lcd4_Portc+0x34>
     36c:	61 e0       	ldi	r22, 0x01	; 1
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	83 e2       	ldi	r24, 0x23	; 35
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     378:	06 c0       	rjmp	.+12     	; 0x386 <_Z9Lcd4_Portc+0x40>
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	70 e0       	ldi	r23, 0x00	; 0
     37e:	83 e2       	ldi	r24, 0x23	; 35
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     386:	c2 ff       	sbrs	r28, 2
     388:	07 c0       	rjmp	.+14     	; 0x398 <_Z9Lcd4_Portc+0x52>
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	84 e2       	ldi	r24, 0x24	; 36
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_Z9Lcd4_Portc+0x5e>
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	84 e2       	ldi	r24, 0x24	; 36
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     3a4:	c3 ff       	sbrs	r28, 3
     3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <_Z9Lcd4_Portc+0x70>
     3a8:	61 e0       	ldi	r22, 0x01	; 1
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	85 e2       	ldi	r24, 0x25	; 37
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <_Z9Lcd4_Portc+0x7c>
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	85 e2       	ldi	r24, 0x25	; 37
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <_Z8Lcd4_Cmdc>:
     3c6:	cf 93       	push	r28
     3c8:	c8 2f       	mov	r28, r24
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	8a e1       	ldi	r24, 0x1A	; 26
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     3d6:	8c 2f       	mov	r24, r28
     3d8:	0e 94 a3 01 	call	0x346	; 0x346 <_Z9Lcd4_Portc>
     3dc:	61 e0       	ldi	r22, 0x01	; 1
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	8b e1       	ldi	r24, 0x1B	; 27
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     3e8:	89 ef       	ldi	r24, 0xF9	; 249
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <_Z8Lcd4_Cmdc+0x26>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <_Z8Lcd4_Cmdc+0x2c>
     3f2:	00 00       	nop
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	8b e1       	ldi	r24, 0x1B	; 27
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     400:	89 ef       	ldi	r24, 0xF9	; 249
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     40a:	00 00       	nop
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <_Z10Lcd4_Clearv>:
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     41c:	08 95       	ret

0000041e <_Z15Lcd4_Set_Cursorcc>:
     41e:	cf 93       	push	r28
     420:	c6 2f       	mov	r28, r22
     422:	81 30       	cpi	r24, 0x01	; 1
     424:	59 f4       	brne	.+22     	; 0x43c <_Z15Lcd4_Set_Cursorcc+0x1e>
     426:	80 e8       	ldi	r24, 0x80	; 128
     428:	86 0f       	add	r24, r22
     42a:	82 95       	swap	r24
     42c:	8f 70       	andi	r24, 0x0F	; 15
     42e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     432:	8c 2f       	mov	r24, r28
     434:	8f 70       	andi	r24, 0x0F	; 15
     436:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     43a:	0c c0       	rjmp	.+24     	; 0x454 <_Z15Lcd4_Set_Cursorcc+0x36>
     43c:	82 30       	cpi	r24, 0x02	; 2
     43e:	51 f4       	brne	.+20     	; 0x454 <_Z15Lcd4_Set_Cursorcc+0x36>
     440:	80 ec       	ldi	r24, 0xC0	; 192
     442:	86 0f       	add	r24, r22
     444:	82 95       	swap	r24
     446:	8f 70       	andi	r24, 0x0F	; 15
     448:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     44c:	8c 2f       	mov	r24, r28
     44e:	8f 70       	andi	r24, 0x0F	; 15
     450:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <_Z9Lcd4_Initv>:
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	0e 94 a3 01 	call	0x346	; 0x346 <_Z9Lcd4_Portc>
     45e:	87 e8       	ldi	r24, 0x87	; 135
     460:	93 e1       	ldi	r25, 0x13	; 19
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <_Z9Lcd4_Initv+0xa>
     466:	00 c0       	rjmp	.+0      	; 0x468 <_Z9Lcd4_Initv+0x10>
     468:	00 00       	nop
     46a:	83 e0       	ldi	r24, 0x03	; 3
     46c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     470:	81 ee       	ldi	r24, 0xE1	; 225
     472:	94 e0       	ldi	r25, 0x04	; 4
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <_Z9Lcd4_Initv+0x1c>
     478:	00 c0       	rjmp	.+0      	; 0x47a <_Z9Lcd4_Initv+0x22>
     47a:	00 00       	nop
     47c:	83 e0       	ldi	r24, 0x03	; 3
     47e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     482:	8d eb       	ldi	r24, 0xBD	; 189
     484:	9a e0       	ldi	r25, 0x0A	; 10
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <_Z9Lcd4_Initv+0x2e>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <_Z9Lcd4_Initv+0x34>
     48c:	00 00       	nop
     48e:	83 e0       	ldi	r24, 0x03	; 3
     490:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     49a:	82 e0       	ldi	r24, 0x02	; 2
     49c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     4a0:	88 e0       	ldi	r24, 0x08	; 8
     4a2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     4ac:	8c e0       	ldi	r24, 0x0C	; 12
     4ae:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     4b8:	86 e0       	ldi	r24, 0x06	; 6
     4ba:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     4be:	08 95       	ret

000004c0 <_Z15Lcd4_Write_Charc>:
     4c0:	cf 93       	push	r28
     4c2:	c8 2f       	mov	r28, r24
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	8a e1       	ldi	r24, 0x1A	; 26
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     4d0:	8c 2f       	mov	r24, r28
     4d2:	82 95       	swap	r24
     4d4:	8f 70       	andi	r24, 0x0F	; 15
     4d6:	0e 94 a3 01 	call	0x346	; 0x346 <_Z9Lcd4_Portc>
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	8b e1       	ldi	r24, 0x1B	; 27
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     4e6:	89 ef       	ldi	r24, 0xF9	; 249
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <_Z15Lcd4_Write_Charc+0x2a>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <_Z15Lcd4_Write_Charc+0x30>
     4f0:	00 00       	nop
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	8b e1       	ldi	r24, 0x1B	; 27
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     4fe:	89 ef       	ldi	r24, 0xF9	; 249
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	f1 f7       	brne	.-4      	; 0x502 <_Z15Lcd4_Write_Charc+0x42>
     506:	00 c0       	rjmp	.+0      	; 0x508 <_Z15Lcd4_Write_Charc+0x48>
     508:	00 00       	nop
     50a:	8c 2f       	mov	r24, r28
     50c:	8f 70       	andi	r24, 0x0F	; 15
     50e:	0e 94 a3 01 	call	0x346	; 0x346 <_Z9Lcd4_Portc>
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	8b e1       	ldi	r24, 0x1B	; 27
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     51e:	89 ef       	ldi	r24, 0xF9	; 249
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <_Z15Lcd4_Write_Charc+0x62>
     526:	00 c0       	rjmp	.+0      	; 0x528 <_Z15Lcd4_Write_Charc+0x68>
     528:	00 00       	nop
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	8b e1       	ldi	r24, 0x1B	; 27
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     536:	89 ef       	ldi	r24, 0xF9	; 249
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	f1 f7       	brne	.-4      	; 0x53a <_Z15Lcd4_Write_Charc+0x7a>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <_Z15Lcd4_Write_Charc+0x80>
     540:	00 00       	nop
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <_Z17Lcd4_Write_StringPc>:
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	ec 01       	movw	r28, r24
     54c:	88 81       	ld	r24, Y
     54e:	88 23       	and	r24, r24
     550:	31 f0       	breq	.+12     	; 0x55e <_Z17Lcd4_Write_StringPc+0x18>
     552:	21 96       	adiw	r28, 0x01	; 1
     554:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z15Lcd4_Write_Charc>
     558:	89 91       	ld	r24, Y+
     55a:	81 11       	cpse	r24, r1
     55c:	fb cf       	rjmp	.-10     	; 0x554 <_Z17Lcd4_Write_StringPc+0xe>
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	08 95       	ret

00000564 <_ZN14GameControllerC1Ev>:

bool isGameActive() {
	return gameActive;
}

	GameController() {
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	ec 01       	movw	r28, r24
    


public:
    Player() {
        playerPosition = Position(4,BOARD_HEIGHT-1);
     572:	84 e0       	ldi	r24, 0x04	; 4
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	9f 87       	std	Y+15, r25	; 0x0f
     578:	8e 87       	std	Y+14, r24	; 0x0e
     57a:	8f e0       	ldi	r24, 0x0F	; 15
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	99 8b       	std	Y+17, r25	; 0x11
     580:	88 8b       	std	Y+16, r24	; 0x10
        readyToMove = true;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	8a 8b       	std	Y+18, r24	; 0x12
     586:	fe 01       	movw	r30, r28
     588:	73 96       	adiw	r30, 0x13	; 19
     58a:	9e 01       	movw	r18, r28
     58c:	22 5d       	subi	r18, 0xD2	; 210
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     590:	11 82       	std	Z+1, r1	; 0x01
     592:	10 82       	st	Z, r1
        y = 0;
     594:	13 82       	std	Z+3, r1	; 0x03
     596:	12 82       	std	Z+2, r1	; 0x02
    unsigned int moveTimerCounter;

public:

    Enemy() {
        alive = true;
     598:	84 83       	std	Z+4, r24	; 0x04
     59a:	39 96       	adiw	r30, 0x09	; 9
     59c:	2e 17       	cp	r18, r30
     59e:	3f 07       	cpc	r19, r31
     5a0:	b9 f7       	brne	.-18     	; 0x590 <_ZN14GameControllerC1Ev+0x2c>
     5a2:	fe 01       	movw	r30, r28
     5a4:	f2 96       	adiw	r30, 0x32	; 50
     5a6:	ce 01       	movw	r24, r28
     5a8:	8a 51       	subi	r24, 0x1A	; 26
     5aa:	9f 4f       	sbci	r25, 0xFF	; 255
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     5ac:	11 82       	std	Z+1, r1	; 0x01
     5ae:	10 82       	st	Z, r1
        y = 0;
     5b0:	13 82       	std	Z+3, r1	; 0x03
     5b2:	12 82       	std	Z+2, r1	; 0x02

public:

    NewBullet() {

        isActiveOnBoard = false;
     5b4:	14 82       	std	Z+4, r1	; 0x04
        bulletPosition = Position(0, 0);
        moveTimeCounter = 0;
     5b6:	16 82       	std	Z+6, r1	; 0x06
     5b8:	15 82       	std	Z+5, r1	; 0x05
     5ba:	39 96       	adiw	r30, 0x09	; 9
     5bc:	e8 17       	cp	r30, r24
     5be:	f9 07       	cpc	r31, r25
     5c0:	a9 f7       	brne	.-22     	; 0x5ac <_ZN14GameControllerC1Ev+0x48>
	killStreak = 0;
     5c2:	1d 82       	std	Y+5, r1	; 0x05
     5c4:	1c 82       	std	Y+4, r1	; 0x04
	enemyBulletCollisionCounter = 0;
     5c6:	19 82       	std	Y+1, r1	; 0x01
     5c8:	18 82       	st	Y, r1
	enemyPlayerCollisionCounter = 0;
     5ca:	1b 82       	std	Y+3, r1	; 0x03
     5cc:	1a 82       	std	Y+2, r1	; 0x02
	bulletReadyToShoot = true;
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	8d 87       	std	Y+13, r24	; 0x0d
	gameActive = true;
     5d2:	8e 83       	std	Y+6, r24	; 0x06
     5d4:	7e 01       	movw	r14, r28
     5d6:	00 e0       	ldi	r16, 0x00	; 0
     5d8:	10 e0       	ldi	r17, 0x00	; 0
	//Enemy enemy1, enemy2, enemy3;

	Enemy enemyPool[ENEMY_POOL_SIZE];

	 int getRandomBoardXCordinate() {
		 	return rand() % BOARD_WIDTH;
     5da:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <rand>
     5de:	f7 01       	movw	r30, r14
	gameActive = true;
	
	char score1[16], score2[16];
	
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
     5e0:	87 70       	andi	r24, 0x07	; 7
     5e2:	90 78       	andi	r25, 0x80	; 128
     5e4:	99 23       	and	r25, r25
     5e6:	24 f4       	brge	.+8      	; 0x5f0 <_ZN14GameControllerC1Ev+0x8c>
     5e8:	01 97       	sbiw	r24, 0x01	; 1
     5ea:	88 6f       	ori	r24, 0xF8	; 248
     5ec:	9f 6f       	ori	r25, 0xFF	; 255
     5ee:	01 96       	adiw	r24, 0x01	; 1
     5f0:	94 8b       	std	Z+20, r25	; 0x14
     5f2:	83 8b       	std	Z+19, r24	; 0x13
     5f4:	16 8a       	std	Z+22, r1	; 0x16
     5f6:	15 8a       	std	Z+21, r1	; 0x15
     5f8:	17 8a       	std	Z+23, r1	; 0x17
     5fa:	11 8f       	std	Z+25, r17	; 0x19
     5fc:	00 8f       	std	Z+24, r16	; 0x18
     5fe:	13 8e       	std	Z+27, r1	; 0x1b
     600:	12 8e       	std	Z+26, r1	; 0x1a
     602:	89 e0       	ldi	r24, 0x09	; 9
     604:	e8 0e       	add	r14, r24
     606:	f1 1c       	adc	r15, r1
     608:	0c 50       	subi	r16, 0x0C	; 12
     60a:	1e 4f       	sbci	r17, 0xFE	; 254
	bulletReadyToShoot = true;
	gameActive = true;
	
	char score1[16], score2[16];
	
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
     60c:	0c 3d       	cpi	r16, 0xDC	; 220
     60e:	85 e0       	ldi	r24, 0x05	; 5
     610:	18 07       	cpc	r17, r24
     612:	19 f7       	brne	.-58     	; 0x5da <_ZN14GameControllerC1Ev+0x76>
     614:	de 01       	movw	r26, r28
     616:	d2 96       	adiw	r26, 0x32	; 50
     618:	fe 01       	movw	r30, r28
     61a:	ea 51       	subi	r30, 0x1A	; 26
     61c:	ff 4f       	sbci	r31, 0xFF	; 255
		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
	}

	for(int i = 0; i < BULLET_POOL_SIZE; i++) {
		bulletPool[i] = NewBullet(0,0,0);
     61e:	11 96       	adiw	r26, 0x01	; 1
     620:	1c 92       	st	X, r1
     622:	1e 92       	st	-X, r1
     624:	13 96       	adiw	r26, 0x03	; 3
     626:	1c 92       	st	X, r1
     628:	1e 92       	st	-X, r1
     62a:	12 97       	sbiw	r26, 0x02	; 2
     62c:	14 96       	adiw	r26, 0x04	; 4
     62e:	1c 92       	st	X, r1
     630:	14 97       	sbiw	r26, 0x04	; 4
     632:	16 96       	adiw	r26, 0x06	; 6
     634:	1c 92       	st	X, r1
     636:	1e 92       	st	-X, r1
     638:	15 97       	sbiw	r26, 0x05	; 5
     63a:	18 96       	adiw	r26, 0x08	; 8
     63c:	1c 92       	st	X, r1
     63e:	1e 92       	st	-X, r1
     640:	17 97       	sbiw	r26, 0x07	; 7
     642:	19 96       	adiw	r26, 0x09	; 9
	
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
	}

	for(int i = 0; i < BULLET_POOL_SIZE; i++) {
     644:	ae 17       	cp	r26, r30
     646:	bf 07       	cpc	r27, r31
     648:	51 f7       	brne	.-44     	; 0x61e <_ZN14GameControllerC1Ev+0xba>
     64a:	9e 01       	movw	r18, r28
     64c:	2a 51       	subi	r18, 0x1A	; 26
     64e:	3e 4f       	sbci	r19, 0xFE	; 254
     650:	cf 01       	movw	r24, r30
     652:	40 96       	adiw	r24, 0x10	; 16
	}

	int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;
	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < cols; j++) {
			displayBoard[i][j] = 0;
     654:	11 92       	st	Z+, r1
     656:	11 92       	st	Z+, r1
		bulletPool[i] = NewBullet(0,0,0);
	}

	int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;
	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < cols; j++) {
     658:	e8 17       	cp	r30, r24
     65a:	f9 07       	cpc	r31, r25
     65c:	d9 f7       	brne	.-10     	; 0x654 <_ZN14GameControllerC1Ev+0xf0>
     65e:	fc 01       	movw	r30, r24
	for(int i = 0; i < BULLET_POOL_SIZE; i++) {
		bulletPool[i] = NewBullet(0,0,0);
	}

	int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;
	for (int i = 0; i < rows; i++) {
     660:	28 17       	cp	r18, r24
     662:	39 07       	cpc	r19, r25
     664:	a9 f7       	brne	.-22     	; 0x650 <_ZN14GameControllerC1Ev+0xec>
		for (int j = 0; j < cols; j++) {
			displayBoard[i][j] = 0;
		}
	}
	}
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	08 95       	ret

00000674 <_Z13softwareSetupv>:
#include "headers/game/GameController.h"
#include "headers/utils/HardwareController.h"

GameController gameController;

void softwareSetup() {
     674:	af 92       	push	r10
     676:	bf 92       	push	r11
     678:	cf 92       	push	r12
     67a:	df 92       	push	r13
     67c:	ef 92       	push	r14
     67e:	ff 92       	push	r15
     680:	0f 93       	push	r16
     682:	1f 93       	push	r17
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	c6 5e       	subi	r28, 0xE6	; 230
     68e:	d1 40       	sbci	r29, 0x01	; 1
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	de bf       	out	0x3e, r29	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	cd bf       	out	0x3d, r28	; 61
    


public:
    Player() {
        playerPosition = Position(4,BOARD_HEIGHT-1);
     69a:	84 e0       	ldi	r24, 0x04	; 4
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	98 8b       	std	Y+16, r25	; 0x10
     6a0:	8f 87       	std	Y+15, r24	; 0x0f
     6a2:	8f e0       	ldi	r24, 0x0F	; 15
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	9a 8b       	std	Y+18, r25	; 0x12
     6a8:	89 8b       	std	Y+17, r24	; 0x11
        readyToMove = true;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	8b 8b       	std	Y+19, r24	; 0x13
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     6ae:	1d 8a       	std	Y+21, r1	; 0x15
     6b0:	1c 8a       	std	Y+20, r1	; 0x14
        y = 0;
     6b2:	1f 8a       	std	Y+23, r1	; 0x17
     6b4:	1e 8a       	std	Y+22, r1	; 0x16
     6b6:	88 8f       	std	Y+24, r24	; 0x18
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     6b8:	1e 8e       	std	Y+30, r1	; 0x1e
     6ba:	1d 8e       	std	Y+29, r1	; 0x1d
        y = 0;
     6bc:	18 a2       	std	Y+32, r1	; 0x20
     6be:	1f 8e       	std	Y+31, r1	; 0x1f
     6c0:	89 a3       	std	Y+33, r24	; 0x21
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     6c2:	1f a2       	std	Y+39, r1	; 0x27
     6c4:	1e a2       	std	Y+38, r1	; 0x26
        y = 0;
     6c6:	19 a6       	std	Y+41, r1	; 0x29
     6c8:	18 a6       	std	Y+40, r1	; 0x28
     6ca:	8a a7       	std	Y+42, r24	; 0x2a
     6cc:	7e 01       	movw	r14, r28
     6ce:	83 e3       	ldi	r24, 0x33	; 51
     6d0:	e8 0e       	add	r14, r24
     6d2:	f1 1c       	adc	r15, r1
     6d4:	8e 01       	movw	r16, r28
     6d6:	09 51       	subi	r16, 0x19	; 25
     6d8:	1f 4f       	sbci	r17, 0xFF	; 255
     6da:	f7 01       	movw	r30, r14
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     6dc:	11 82       	std	Z+1, r1	; 0x01
     6de:	10 82       	st	Z, r1
        y = 0;
     6e0:	13 82       	std	Z+3, r1	; 0x03
     6e2:	12 82       	std	Z+2, r1	; 0x02

public:

    NewBullet() {

        isActiveOnBoard = false;
     6e4:	14 82       	std	Z+4, r1	; 0x04
        bulletPosition = Position(0, 0);
        moveTimeCounter = 0;
     6e6:	16 82       	std	Z+6, r1	; 0x06
     6e8:	15 82       	std	Z+5, r1	; 0x05
     6ea:	39 96       	adiw	r30, 0x09	; 9

bool isGameActive() {
	return gameActive;
}

	GameController() {
     6ec:	e0 17       	cp	r30, r16
     6ee:	f1 07       	cpc	r31, r17
     6f0:	a9 f7       	brne	.-22     	; 0x6dc <_Z13softwareSetupv+0x68>
     6f2:	81 c0       	rjmp	.+258    	; 0x7f6 <_Z13softwareSetupv+0x182>
	//Enemy enemy1, enemy2, enemy3;

	Enemy enemyPool[ENEMY_POOL_SIZE];

	 int getRandomBoardXCordinate() {
		 	return rand() % BOARD_WIDTH;
     6f4:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <rand>
     6f8:	f5 01       	movw	r30, r10
	gameActive = true;
	
	char score1[16], score2[16];
	
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
     6fa:	87 70       	andi	r24, 0x07	; 7
     6fc:	90 78       	andi	r25, 0x80	; 128
     6fe:	99 23       	and	r25, r25
     700:	24 f4       	brge	.+8      	; 0x70a <_Z13softwareSetupv+0x96>
     702:	01 97       	sbiw	r24, 0x01	; 1
     704:	88 6f       	ori	r24, 0xF8	; 248
     706:	9f 6f       	ori	r25, 0xFF	; 255
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	94 8b       	std	Z+20, r25	; 0x14
     70c:	83 8b       	std	Z+19, r24	; 0x13
     70e:	16 8a       	std	Z+22, r1	; 0x16
     710:	15 8a       	std	Z+21, r1	; 0x15
     712:	17 8a       	std	Z+23, r1	; 0x17
     714:	d1 8e       	std	Z+25, r13	; 0x19
     716:	c0 8e       	std	Z+24, r12	; 0x18
     718:	13 8e       	std	Z+27, r1	; 0x1b
     71a:	12 8e       	std	Z+26, r1	; 0x1a
     71c:	99 e0       	ldi	r25, 0x09	; 9
     71e:	a9 0e       	add	r10, r25
     720:	b1 1c       	adc	r11, r1
     722:	ec e0       	ldi	r30, 0x0C	; 12
     724:	ce 1a       	sub	r12, r30
     726:	ee ef       	ldi	r30, 0xFE	; 254
     728:	de 0a       	sbc	r13, r30
	bulletReadyToShoot = true;
	gameActive = true;
	
	char score1[16], score2[16];
	
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
     72a:	fc ed       	ldi	r31, 0xDC	; 220
     72c:	cf 16       	cp	r12, r31
     72e:	f5 e0       	ldi	r31, 0x05	; 5
     730:	df 06       	cpc	r13, r31
     732:	01 f7       	brne	.-64     	; 0x6f4 <_Z13softwareSetupv+0x80>
		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
	}

	for(int i = 0; i < BULLET_POOL_SIZE; i++) {
		bulletPool[i] = NewBullet(0,0,0);
     734:	f7 01       	movw	r30, r14
     736:	11 82       	std	Z+1, r1	; 0x01
     738:	10 82       	st	Z, r1
     73a:	13 82       	std	Z+3, r1	; 0x03
     73c:	12 82       	std	Z+2, r1	; 0x02
     73e:	14 82       	std	Z+4, r1	; 0x04
     740:	16 82       	std	Z+6, r1	; 0x06
     742:	15 82       	std	Z+5, r1	; 0x05
     744:	10 86       	std	Z+8, r1	; 0x08
     746:	17 82       	std	Z+7, r1	; 0x07
     748:	f9 e0       	ldi	r31, 0x09	; 9
     74a:	ef 0e       	add	r14, r31
     74c:	f1 1c       	adc	r15, r1
	
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
	}

	for(int i = 0; i < BULLET_POOL_SIZE; i++) {
     74e:	0e 15       	cp	r16, r14
     750:	1f 05       	cpc	r17, r15
     752:	81 f7       	brne	.-32     	; 0x734 <_Z13softwareSetupv+0xc0>
     754:	9e 01       	movw	r18, r28
     756:	29 51       	subi	r18, 0x19	; 25
     758:	3e 4f       	sbci	r19, 0xFE	; 254
     75a:	c8 01       	movw	r24, r16
     75c:	40 96       	adiw	r24, 0x10	; 16
	}

	int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;
	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < cols; j++) {
			displayBoard[i][j] = 0;
     75e:	f8 01       	movw	r30, r16
     760:	11 92       	st	Z+, r1
     762:	11 92       	st	Z+, r1
     764:	8f 01       	movw	r16, r30
		bulletPool[i] = NewBullet(0,0,0);
	}

	int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;
	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < cols; j++) {
     766:	8e 17       	cp	r24, r30
     768:	9f 07       	cpc	r25, r31
     76a:	c9 f7       	brne	.-14     	; 0x75e <_Z13softwareSetupv+0xea>
     76c:	8c 01       	movw	r16, r24
	for(int i = 0; i < BULLET_POOL_SIZE; i++) {
		bulletPool[i] = NewBullet(0,0,0);
	}

	int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;
	for (int i = 0; i < rows; i++) {
     76e:	82 17       	cp	r24, r18
     770:	93 07       	cpc	r25, r19
     772:	99 f7       	brne	.-26     	; 0x75a <_Z13softwareSetupv+0xe6>
    gameController = GameController();
     774:	86 ee       	ldi	r24, 0xE6	; 230
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	fe 01       	movw	r30, r28
     77a:	31 96       	adiw	r30, 0x01	; 1
     77c:	a6 ec       	ldi	r26, 0xC6	; 198
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	01 90       	ld	r0, Z+
     782:	0d 92       	st	X+, r0
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	e1 f7       	brne	.-8      	; 0x780 <_Z13softwareSetupv+0x10c>
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     788:	e6 ec       	ldi	r30, 0xC6	; 198
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	40 89       	ldd	r20, Z+16	; 0x10
     78e:	51 89       	ldd	r21, Z+17	; 0x11
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     790:	26 85       	ldd	r18, Z+14	; 0x0e
     792:	37 85       	ldd	r19, Z+15	; 0x0f
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     794:	ca 01       	movw	r24, r20
     796:	88 0f       	add	r24, r24
     798:	99 1f       	adc	r25, r25
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	82 0f       	add	r24, r18
     7a4:	93 1f       	adc	r25, r19
     7a6:	fc 01       	movw	r30, r24
     7a8:	ee 0f       	add	r30, r30
     7aa:	ff 1f       	adc	r31, r31
     7ac:	e4 55       	subi	r30, 0x54	; 84
     7ae:	fe 4f       	sbci	r31, 0xFE	; 254
     7b0:	63 e0       	ldi	r22, 0x03	; 3
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	71 83       	std	Z+1, r23	; 0x01
     7b6:	60 83       	st	Z, r22
     7b8:	fc 01       	movw	r30, r24
     7ba:	ee 0f       	add	r30, r30
     7bc:	ff 1f       	adc	r31, r31
     7be:	e6 55       	subi	r30, 0x56	; 86
     7c0:	fe 4f       	sbci	r31, 0xFE	; 254
     7c2:	71 83       	std	Z+1, r23	; 0x01
     7c4:	60 83       	st	Z, r22
     7c6:	88 0f       	add	r24, r24
     7c8:	99 1f       	adc	r25, r25
     7ca:	fc 01       	movw	r30, r24
     7cc:	e2 55       	subi	r30, 0x52	; 82
     7ce:	fe 4f       	sbci	r31, 0xFE	; 254
     7d0:	71 83       	std	Z+1, r23	; 0x01
     7d2:	60 83       	st	Z, r22
     7d4:	fa 01       	movw	r30, r20
     7d6:	31 97       	sbiw	r30, 0x01	; 1
     7d8:	ee 0f       	add	r30, r30
     7da:	ff 1f       	adc	r31, r31
     7dc:	ee 0f       	add	r30, r30
     7de:	ff 1f       	adc	r31, r31
     7e0:	ee 0f       	add	r30, r30
     7e2:	ff 1f       	adc	r31, r31
     7e4:	e2 0f       	add	r30, r18
     7e6:	f3 1f       	adc	r31, r19
     7e8:	ee 0f       	add	r30, r30
     7ea:	ff 1f       	adc	r31, r31
     7ec:	e4 55       	subi	r30, 0x54	; 84
     7ee:	fe 4f       	sbci	r31, 0xFE	; 254
     7f0:	71 83       	std	Z+1, r23	; 0x01
     7f2:	60 83       	st	Z, r22
    gameController.initializePlayerPosition();
   // gameController.initEnemyPositions();// int x
    
}
     7f4:	0f c0       	rjmp	.+30     	; 0x814 <_Z13softwareSetupv+0x1a0>
bool isGameActive() {
	return gameActive;
}

	GameController() {
	killStreak = 0;
     7f6:	1e 82       	std	Y+6, r1	; 0x06
     7f8:	1d 82       	std	Y+5, r1	; 0x05
	enemyBulletCollisionCounter = 0;
     7fa:	1a 82       	std	Y+2, r1	; 0x02
     7fc:	19 82       	std	Y+1, r1	; 0x01
	enemyPlayerCollisionCounter = 0;
     7fe:	1c 82       	std	Y+4, r1	; 0x04
     800:	1b 82       	std	Y+3, r1	; 0x03
	bulletReadyToShoot = true;
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	8e 87       	std	Y+14, r24	; 0x0e
	gameActive = true;
     806:	8f 83       	std	Y+7, r24	; 0x07
     808:	ce 01       	movw	r24, r28
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	5c 01       	movw	r10, r24
     80e:	c1 2c       	mov	r12, r1
     810:	d1 2c       	mov	r13, r1
     812:	70 cf       	rjmp	.-288    	; 0x6f4 <_Z13softwareSetupv+0x80>
     814:	ca 51       	subi	r28, 0x1A	; 26
     816:	de 4f       	sbci	r29, 0xFE	; 254
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	ef 90       	pop	r14
     82e:	df 90       	pop	r13
     830:	cf 90       	pop	r12
     832:	bf 90       	pop	r11
     834:	af 90       	pop	r10
     836:	08 95       	ret

00000838 <_Z5setupv>:


void setup() {
    softwareSetup();
     838:	0e 94 3a 03 	call	0x674	; 0x674 <_Z13softwareSetupv>
	}

	static void hardWareSetup()
	{
		//LED MATRIX OUTPUT
		DDRA = 0b11111000;
     83c:	88 ef       	ldi	r24, 0xF8	; 248
     83e:	8a bb       	out	0x1a, r24	; 26
		DDRB = 255;
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	87 bb       	out	0x17, r24	; 23
		//LCD DISPLAY
		DDRD = 0xFF;
     844:	81 bb       	out	0x11, r24	; 17
		DDRC = 0xFF;
     846:	84 bb       	out	0x14, r24	; 20
		Lcd4_Init();
     848:	0e 94 2c 02 	call	0x458	; 0x458 <_Z9Lcd4_Initv>
		}
	}

	static void displayLcd(char * upper,char * lower)
	{
		Lcd4_Clear();
     84c:	0e 94 08 02 	call	0x410	; 0x410 <_Z10Lcd4_Clearv>
		Lcd4_Set_Cursor(1, 0);
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z15Lcd4_Set_Cursorcc>
		Lcd4_Write_String(upper);
     858:	8c e6       	ldi	r24, 0x6C	; 108
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17Lcd4_Write_StringPc>
		Lcd4_Set_Cursor(2, 0);
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	82 e0       	ldi	r24, 0x02	; 2
     864:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z15Lcd4_Set_Cursorcc>
		Lcd4_Write_String(lower);
     868:	8b e7       	ldi	r24, 0x7B	; 123
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17Lcd4_Write_StringPc>
     870:	08 95       	ret

00000872 <_Z4loopj>:
	HardwareController::hardWareSetup();
	
}


void loop(unsigned loopNo) {
     872:	2f 92       	push	r2
     874:	3f 92       	push	r3
     876:	4f 92       	push	r4
     878:	5f 92       	push	r5
     87a:	6f 92       	push	r6
     87c:	7f 92       	push	r7
     87e:	8f 92       	push	r8
     880:	9f 92       	push	r9
     882:	af 92       	push	r10
     884:	bf 92       	push	r11
     886:	cf 92       	push	r12
     888:	df 92       	push	r13
     88a:	ef 92       	push	r14
     88c:	ff 92       	push	r15
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	a8 97       	sbiw	r28, 0x28	; 40
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	de bf       	out	0x3e, r29	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	cd bf       	out	0x3d, r28	; 61
     8a6:	9c 01       	movw	r18, r24

	if(gameController.isGameActive()) {
     8a8:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <__data_end+0x6>
     8ac:	99 23       	and	r25, r25
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <_Z4loopj+0x40>
     8b0:	10 c5       	rjmp	.+2592   	; 0x12d2 <_Z4loopj+0xa60>
	int getLoopNo() const {
		return loopNo;
	}

	void setLoopNo(int loopNo) {
		GameController::loopNo = loopNo;
     8b2:	30 93 f5 00 	sts	0x00F5, r19	; 0x8000f5 <__data_end+0x2f>
     8b6:	20 93 f4 00 	sts	0x00F4, r18	; 0x8000f4 <__data_end+0x2e>
     8ba:	0f 2e       	mov	r0, r31
     8bc:	f6 ec       	ldi	r31, 0xC6	; 198
     8be:	af 2e       	mov	r10, r31
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	bf 2e       	mov	r11, r31
     8c4:	f0 2d       	mov	r31, r0
     8c6:	75 01       	movw	r14, r10
	void updateEnemy(Enemy &enemy) {

		unsigned int currentTime = enemy.getSpawnTimerCounter();
		enemy.setSpawnTimerCounter(currentTime + 1);

		if( enemy.getSpawnTimerCounter() % ENEMY_SPAWN_TIME_NEW == 0 ) {
     8c8:	0f 2e       	mov	r0, r31
     8ca:	fc ed       	ldi	r31, 0xDC	; 220
     8cc:	cf 2e       	mov	r12, r31
     8ce:	f5 e0       	ldi	r31, 0x05	; 5
     8d0:	df 2e       	mov	r13, r31
     8d2:	f0 2d       	mov	r31, r0
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
     8d4:	77 24       	eor	r7, r7
     8d6:	73 94       	inc	r7
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     8d8:	68 94       	set
     8da:	88 24       	eor	r8, r8
     8dc:	81 f8       	bld	r8, 1
     8de:	91 2c       	mov	r9, r1
		if( enemy.getSpawnTimerCounter() % ENEMY_SPAWN_TIME_NEW == 0 ) {
			enemy.setSpawnTimerCounter(0);

			if ( !enemy.isAlive() ) {
				int newX = getRandomBoardXCordinate();
				if(newX == 3)newX++;
     8e0:	68 94       	set
     8e2:	66 24       	eor	r6, r6
     8e4:	62 f8       	bld	r6, 2
     8e6:	51 2c       	mov	r5, r1
     8e8:	87 01       	movw	r16, r14
	NewBullet bulletPool[BULLET_POOL_SIZE];

	void updateEnemy(Enemy &enemy) {

		unsigned int currentTime = enemy.getSpawnTimerCounter();
		enemy.setSpawnTimerCounter(currentTime + 1);
     8ea:	d7 01       	movw	r26, r14
     8ec:	58 96       	adiw	r26, 0x18	; 24
     8ee:	4d 91       	ld	r20, X+
     8f0:	5c 91       	ld	r21, X
     8f2:	59 97       	sbiw	r26, 0x19	; 25
     8f4:	4f 5f       	subi	r20, 0xFF	; 255
     8f6:	5f 4f       	sbci	r21, 0xFF	; 255

		if( enemy.getSpawnTimerCounter() % ENEMY_SPAWN_TIME_NEW == 0 ) {
     8f8:	9a 01       	movw	r18, r20
     8fa:	36 95       	lsr	r19
     8fc:	27 95       	ror	r18
     8fe:	36 95       	lsr	r19
     900:	27 95       	ror	r18
     902:	a1 eb       	ldi	r26, 0xB1	; 177
     904:	bb e2       	ldi	r27, 0x2B	; 43
     906:	0e 94 98 09 	call	0x1330	; 0x1330 <__umulhisi3>
     90a:	00 24       	eor	r0, r0
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	00 1c       	adc	r0, r0
     912:	88 0f       	add	r24, r24
     914:	99 1f       	adc	r25, r25
     916:	00 1c       	adc	r0, r0
     918:	89 2f       	mov	r24, r25
     91a:	90 2d       	mov	r25, r0
     91c:	8c 9d       	mul	r24, r12
     91e:	90 01       	movw	r18, r0
     920:	8d 9d       	mul	r24, r13
     922:	30 0d       	add	r19, r0
     924:	9c 9d       	mul	r25, r12
     926:	30 0d       	add	r19, r0
     928:	11 24       	eor	r1, r1
     92a:	42 17       	cp	r20, r18
     92c:	53 07       	cpc	r21, r19
     92e:	21 f0       	breq	.+8      	; 0x938 <_Z4loopj+0xc6>
    unsigned int getSpawnTimerCounter() const {
        return spawnTimerCounter;
    }

    void setSpawnTimerCounter(unsigned int spawnTimerCounter) {
        Enemy::spawnTimerCounter = spawnTimerCounter;
     930:	f7 01       	movw	r30, r14
     932:	51 8f       	std	Z+25, r21	; 0x19
     934:	40 8f       	std	Z+24, r20	; 0x18
     936:	25 c0       	rjmp	.+74     	; 0x982 <_Z4loopj+0x110>
     938:	d7 01       	movw	r26, r14
     93a:	59 96       	adiw	r26, 0x19	; 25
     93c:	1c 92       	st	X, r1
     93e:	1e 92       	st	-X, r1
     940:	58 97       	sbiw	r26, 0x18	; 24
			enemy.setSpawnTimerCounter(0);

			if ( !enemy.isAlive() ) {
     942:	57 96       	adiw	r26, 0x17	; 23
     944:	8c 91       	ld	r24, X
     946:	81 11       	cpse	r24, r1
     948:	1c c0       	rjmp	.+56     	; 0x982 <_Z4loopj+0x110>
	//Enemy enemy1, enemy2, enemy3;

	Enemy enemyPool[ENEMY_POOL_SIZE];

	 int getRandomBoardXCordinate() {
		 	return rand() % BOARD_WIDTH;
     94a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <rand>
     94e:	87 70       	andi	r24, 0x07	; 7
     950:	90 78       	andi	r25, 0x80	; 128
     952:	99 23       	and	r25, r25
     954:	24 f4       	brge	.+8      	; 0x95e <_Z4loopj+0xec>
     956:	01 97       	sbiw	r24, 0x01	; 1
     958:	88 6f       	ori	r24, 0xF8	; 248
     95a:	9f 6f       	ori	r25, 0xFF	; 255
     95c:	01 96       	adiw	r24, 0x01	; 1
		if( enemy.getSpawnTimerCounter() % ENEMY_SPAWN_TIME_NEW == 0 ) {
			enemy.setSpawnTimerCounter(0);

			if ( !enemy.isAlive() ) {
				int newX = getRandomBoardXCordinate();
				if(newX == 3)newX++;
     95e:	83 30       	cpi	r24, 0x03	; 3
     960:	91 05       	cpc	r25, r1
     962:	11 f4       	brne	.+4      	; 0x968 <_Z4loopj+0xf6>
     964:	86 2d       	mov	r24, r6
     966:	95 2d       	mov	r25, r5
    }

    void setX(int x) {
        Position::x = x;
     968:	f8 01       	movw	r30, r16
     96a:	94 8b       	std	Z+20, r25	; 0x14
     96c:	83 8b       	std	Z+19, r24	; 0x13
    int getY() const {
        return y;
    }

    void setY(int y) {
        Position::y = y;
     96e:	16 8a       	std	Z+22, r1	; 0x16
     970:	15 8a       	std	Z+21, r1	; 0x15
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
     972:	77 8a       	std	Z+23, r7	; 0x17
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	fc 01       	movw	r30, r24
     97a:	e4 55       	subi	r30, 0x54	; 84
     97c:	fe 4f       	sbci	r31, 0xFE	; 254
     97e:	91 82       	std	Z+1, r9	; 0x01
     980:	80 82       	st	Z, r8
				setIndexInBoard(enemy.getX(), enemy.getY(),2);
			}
		}
		
		
		enemy.setMoveTimeCounter(enemy.getMoveTimeCounter() + 1);
     982:	d8 01       	movw	r26, r16
     984:	5a 96       	adiw	r26, 0x1a	; 26
     986:	8d 91       	ld	r24, X+
     988:	9c 91       	ld	r25, X
     98a:	5b 97       	sbiw	r26, 0x1b	; 27
     98c:	01 96       	adiw	r24, 0x01	; 1
    unsigned int getMoveTimeCounter() const {
        return moveTimerCounter;
    }

    void setMoveTimeCounter(unsigned int moveTimerCounterarg) {
        Enemy::moveTimerCounter = moveTimerCounterarg;
     98e:	5b 96       	adiw	r26, 0x1b	; 27
     990:	9c 93       	st	X, r25
     992:	8e 93       	st	-X, r24
     994:	5a 97       	sbiw	r26, 0x1a	; 26
	

		if (enemy.getMoveTimeCounter() >= ENEMY_MOVE_TIME_NEW && enemy.isAlive()) {
     996:	8c 32       	cpi	r24, 0x2C	; 44
     998:	91 40       	sbci	r25, 0x01	; 1
     99a:	08 f4       	brcc	.+2      	; 0x99e <_Z4loopj+0x12c>
     99c:	4f c0       	rjmp	.+158    	; 0xa3c <_Z4loopj+0x1ca>
     99e:	f8 01       	movw	r30, r16
     9a0:	87 89       	ldd	r24, Z+23	; 0x17
     9a2:	88 23       	and	r24, r24
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <_Z4loopj+0x136>
     9a6:	4a c0       	rjmp	.+148    	; 0xa3c <_Z4loopj+0x1ca>
    int getY() const {
        return enemyPosition.getY();
    }

    const Position getEnemyPosition() const {
        return enemyPosition;
     9a8:	83 89       	ldd	r24, Z+19	; 0x13
     9aa:	94 89       	ldd	r25, Z+20	; 0x14
     9ac:	a5 89       	ldd	r26, Z+21	; 0x15
     9ae:	b6 89       	ldd	r27, Z+22	; 0x16
     9b0:	9d 01       	movw	r18, r26
    int getX() const {
        return x;
    }

    void setX(int x) {
        Position::x = x;
     9b2:	94 8b       	std	Z+20, r25	; 0x14
     9b4:	83 8b       	std	Z+19, r24	; 0x13
    int getY() const {
        return y;
    }

    void setY(int y) {
        Position::y = y;
     9b6:	ad 01       	movw	r20, r26
     9b8:	4f 5f       	subi	r20, 0xFF	; 255
     9ba:	5f 4f       	sbci	r21, 0xFF	; 255
     9bc:	4f 70       	andi	r20, 0x0F	; 15
     9be:	50 78       	andi	r21, 0x80	; 128
     9c0:	55 23       	and	r21, r21
     9c2:	34 f4       	brge	.+12     	; 0x9d0 <_Z4loopj+0x15e>
     9c4:	41 50       	subi	r20, 0x01	; 1
     9c6:	51 09       	sbc	r21, r1
     9c8:	40 6f       	ori	r20, 0xF0	; 240
     9ca:	5f 6f       	ori	r21, 0xFF	; 255
     9cc:	4f 5f       	subi	r20, 0xFF	; 255
     9ce:	5f 4f       	sbci	r21, 0xFF	; 255
     9d0:	f8 01       	movw	r30, r16
     9d2:	56 8b       	std	Z+22, r21	; 0x16
     9d4:	45 8b       	std	Z+21, r20	; 0x15
    unsigned int getMoveTimeCounter() const {
        return moveTimerCounter;
    }

    void setMoveTimeCounter(unsigned int moveTimerCounterarg) {
        Enemy::moveTimerCounter = moveTimerCounterarg;
     9d6:	13 8e       	std	Z+27, r1	; 0x1b
     9d8:	12 8e       	std	Z+26, r1	; 0x1a
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     9da:	fd 01       	movw	r30, r26
     9dc:	ee 0f       	add	r30, r30
     9de:	ff 1f       	adc	r31, r31
     9e0:	ee 0f       	add	r30, r30
     9e2:	ff 1f       	adc	r31, r31
     9e4:	ee 0f       	add	r30, r30
     9e6:	ff 1f       	adc	r31, r31
     9e8:	8e 0f       	add	r24, r30
     9ea:	9f 1f       	adc	r25, r31
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	fc 01       	movw	r30, r24
     9f2:	e4 55       	subi	r30, 0x54	; 84
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	11 82       	std	Z+1, r1	; 0x01
     9f8:	10 82       	st	Z, r1
			enemy.setEnemyPosition(prevX,(prevY+1)%BOARD_HEIGHT);
			////printStringToConsole("Enemy "+to_string(enemyNo)+"("+to_string(enemy.getX())+","+to_string(enemy.getY())+")");
			enemy.setMoveTimeCounter(0);
			resetIndexInBoard(prevX,prevY);

			if(prevY == BOARD_HEIGHT - 1) {
     9fa:	2f 30       	cpi	r18, 0x0F	; 15
     9fc:	31 05       	cpc	r19, r1
     9fe:	21 f4       	brne	.+8      	; 0xa08 <_Z4loopj+0x196>
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
     a00:	d8 01       	movw	r26, r16
     a02:	57 96       	adiw	r26, 0x17	; 23
     a04:	1c 92       	st	X, r1
     a06:	1a c0       	rjmp	.+52     	; 0xa3c <_Z4loopj+0x1ca>
				enemy.setIsAlive(false);
			}
		
		if(enemy.isAlive())	setIndexInBoard(enemy.getX(),enemy.getY(), ENEMY_STATUS_IN_BOARD); // no need to display if dead
     a08:	f8 01       	movw	r30, r16
     a0a:	87 89       	ldd	r24, Z+23	; 0x17
     a0c:	88 23       	and	r24, r24
     a0e:	b1 f0       	breq	.+44     	; 0xa3c <_Z4loopj+0x1ca>
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     a10:	05 88       	ldd	r0, Z+21	; 0x15
     a12:	f6 89       	ldd	r31, Z+22	; 0x16
     a14:	e0 2d       	mov	r30, r0
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     a16:	d8 01       	movw	r26, r16
     a18:	53 96       	adiw	r26, 0x13	; 19
     a1a:	8d 91       	ld	r24, X+
     a1c:	9c 91       	ld	r25, X
     a1e:	54 97       	sbiw	r26, 0x14	; 20
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     a20:	ee 0f       	add	r30, r30
     a22:	ff 1f       	adc	r31, r31
     a24:	ee 0f       	add	r30, r30
     a26:	ff 1f       	adc	r31, r31
     a28:	ee 0f       	add	r30, r30
     a2a:	ff 1f       	adc	r31, r31
     a2c:	e8 0f       	add	r30, r24
     a2e:	f9 1f       	adc	r31, r25
     a30:	ee 0f       	add	r30, r30
     a32:	ff 1f       	adc	r31, r31
     a34:	e4 55       	subi	r30, 0x54	; 84
     a36:	fe 4f       	sbci	r31, 0xFE	; 254
     a38:	91 82       	std	Z+1, r9	; 0x01
     a3a:	80 82       	st	Z, r8
     a3c:	b9 e0       	ldi	r27, 0x09	; 9
     a3e:	eb 0e       	add	r14, r27
     a40:	f1 1c       	adc	r15, r1
	void updateEnemyPositions(){
		// updateEnemy(enemy1,1);
		// updateEnemy(enemy2,2);
		// updateEnemy(enemy3,3);

		for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
     a42:	e1 ee       	ldi	r30, 0xE1	; 225
     a44:	ee 16       	cp	r14, r30
     a46:	e0 e0       	ldi	r30, 0x00	; 0
     a48:	fe 06       	cpc	r15, r30
     a4a:	09 f0       	breq	.+2      	; 0xa4e <_Z4loopj+0x1dc>
     a4c:	4d cf       	rjmp	.-358    	; 0x8e8 <_Z4loopj+0x76>

	}

	void playerMovementUpdateWithGyro() {

		if(loopNo % PLAYER_MOVE_SPEED_GYRO == 0) {
     a4e:	40 91 f4 00 	lds	r20, 0x00F4	; 0x8000f4 <__data_end+0x2e>
     a52:	50 91 f5 00 	lds	r21, 0x00F5	; 0x8000f5 <__data_end+0x2f>
     a56:	9a 01       	movw	r18, r20
     a58:	36 95       	lsr	r19
     a5a:	27 95       	ror	r18
     a5c:	36 95       	lsr	r19
     a5e:	27 95       	ror	r18
     a60:	ab e7       	ldi	r26, 0x7B	; 123
     a62:	b4 e1       	ldi	r27, 0x14	; 20
     a64:	0e 94 98 09 	call	0x1330	; 0x1330 <__umulhisi3>
     a68:	96 95       	lsr	r25
     a6a:	87 95       	ror	r24
     a6c:	64 e6       	ldi	r22, 0x64	; 100
     a6e:	68 9f       	mul	r22, r24
     a70:	90 01       	movw	r18, r0
     a72:	69 9f       	mul	r22, r25
     a74:	30 0d       	add	r19, r0
     a76:	11 24       	eor	r1, r1
     a78:	42 17       	cp	r20, r18
     a7a:	53 07       	cpc	r21, r19
     a7c:	21 f4       	brne	.+8      	; 0xa86 <_Z4loopj+0x214>
    bool isReadyToMove() const {
        return readyToMove;
    }

    void setIsReadyToMove(bool ready) {
        Player::readyToMove = ready;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end+0x12>
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <_Z4loopj+0x21e>
			player.setIsReadyToMove(true);
		}


		if(player.isReadyToMove()) {
     a86:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__data_end+0x12>
     a8a:	88 23       	and	r24, r24
     a8c:	09 f4       	brne	.+2      	; 0xa90 <_Z4loopj+0x21e>
     a8e:	ed c0       	rjmp	.+474    	; 0xc6a <_Z4loopj+0x3f8>
			_delay_us(10);
		}
	}

	static int getGyroReading() {
		char rawInput = PINA; 
     a90:	89 b3       	in	r24, 0x19	; 25

		char inputLSB = rawInput & 0b00000011 ;
		

		switch(inputLSB) {
     a92:	83 70       	andi	r24, 0x03	; 3
     a94:	81 30       	cpi	r24, 0x01	; 1
     a96:	09 f4       	brne	.+2      	; 0xa9a <_Z4loopj+0x228>
     a98:	75 c0       	rjmp	.+234    	; 0xb84 <_Z4loopj+0x312>
     a9a:	82 30       	cpi	r24, 0x02	; 2
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <_Z4loopj+0x22e>
     a9e:	e5 c0       	rjmp	.+458    	; 0xc6a <_Z4loopj+0x3f8>
     aa0:	e6 ec       	ldi	r30, 0xC6	; 198
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	26 85       	ldd	r18, Z+14	; 0x0e
     aa6:	37 85       	ldd	r19, Z+15	; 0x0f
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     aa8:	80 88       	ldd	r8, Z+16	; 0x10
     aaa:	91 88       	ldd	r9, Z+17	; 0x11

	void shiftPlayerLeft (int shiftPositions) {
		int prevX = player.getX();
		int prevY = player.getY();

		int maxLeftMovement = (prevX - 1);
     aac:	f9 01       	movw	r30, r18
     aae:	31 97       	sbiw	r30, 0x01	; 1
		if(shiftPositions > maxLeftMovement) shiftPositions = maxLeftMovement;
     ab0:	1e 16       	cp	r1, r30
     ab2:	1f 06       	cpc	r1, r31
     ab4:	14 f0       	brlt	.+4      	; 0xaba <_Z4loopj+0x248>
     ab6:	cf 01       	movw	r24, r30
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <_Z4loopj+0x24c>
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	90 e0       	ldi	r25, 0x00	; 0

		movePlayer( prevX - shiftPositions, prevY);
     abe:	b9 01       	movw	r22, r18
     ac0:	68 1b       	sub	r22, r24
     ac2:	79 0b       	sbc	r23, r25
    int getX() const {
        return x;
    }

    void setX(int x) {
        Position::x = x;
     ac4:	0f 2e       	mov	r0, r31
     ac6:	f6 ec       	ldi	r31, 0xC6	; 198
     ac8:	cf 2e       	mov	r12, r31
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	df 2e       	mov	r13, r31
     ace:	f0 2d       	mov	r31, r0
     ad0:	d6 01       	movw	r26, r12
     ad2:	1f 96       	adiw	r26, 0x0f	; 15
     ad4:	7c 93       	st	X, r23
     ad6:	6e 93       	st	-X, r22
     ad8:	1e 97       	sbiw	r26, 0x0e	; 14
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     ada:	c4 01       	movw	r24, r8
     adc:	88 0f       	add	r24, r24
     ade:	99 1f       	adc	r25, r25
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	88 0f       	add	r24, r24
     ae6:	99 1f       	adc	r25, r25
     ae8:	8c 01       	movw	r16, r24
     aea:	02 0f       	add	r16, r18
     aec:	13 1f       	adc	r17, r19
     aee:	78 01       	movw	r14, r16
     af0:	ee 0c       	add	r14, r14
     af2:	ff 1c       	adc	r15, r15
     af4:	d7 01       	movw	r26, r14
     af6:	a4 55       	subi	r26, 0x54	; 84
     af8:	be 4f       	sbci	r27, 0xFE	; 254
     afa:	1d 92       	st	X+, r1
     afc:	1c 92       	st	X, r1
     afe:	e8 0f       	add	r30, r24
     b00:	f9 1f       	adc	r31, r25
     b02:	ee 0f       	add	r30, r30
     b04:	ff 1f       	adc	r31, r31
     b06:	e4 55       	subi	r30, 0x54	; 84
     b08:	fe 4f       	sbci	r31, 0xFE	; 254
     b0a:	11 82       	std	Z+1, r1	; 0x01
     b0c:	10 82       	st	Z, r1
     b0e:	f7 01       	movw	r30, r14
     b10:	e2 55       	subi	r30, 0x52	; 82
     b12:	fe 4f       	sbci	r31, 0xFE	; 254
     b14:	11 82       	std	Z+1, r1	; 0x01
     b16:	10 82       	st	Z, r1

	void resetPlayerPosition(int x, int y) {
		resetIndexInBoard(x, y);
		resetIndexInBoard(x - 1, y);
		resetIndexInBoard(x + 1, y);
		resetIndexInBoard(x, y - 1);
     b18:	d4 01       	movw	r26, r8
     b1a:	11 97       	sbiw	r26, 0x01	; 1
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     b1c:	aa 0f       	add	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	aa 0f       	add	r26, r26
     b22:	bb 1f       	adc	r27, r27
     b24:	aa 0f       	add	r26, r26
     b26:	bb 1f       	adc	r27, r27
     b28:	fd 01       	movw	r30, r26
     b2a:	e2 0f       	add	r30, r18
     b2c:	f3 1f       	adc	r31, r19
     b2e:	ee 0f       	add	r30, r30
     b30:	ff 1f       	adc	r31, r31
     b32:	e4 55       	subi	r30, 0x54	; 84
     b34:	fe 4f       	sbci	r31, 0xFE	; 254
     b36:	11 82       	std	Z+1, r1	; 0x01
     b38:	10 82       	st	Z, r1
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     b3a:	86 0f       	add	r24, r22
     b3c:	97 1f       	adc	r25, r23
     b3e:	fc 01       	movw	r30, r24
     b40:	ee 0f       	add	r30, r30
     b42:	ff 1f       	adc	r31, r31
     b44:	e4 55       	subi	r30, 0x54	; 84
     b46:	fe 4f       	sbci	r31, 0xFE	; 254
     b48:	23 e0       	ldi	r18, 0x03	; 3
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	31 83       	std	Z+1, r19	; 0x01
     b4e:	20 83       	st	Z, r18
     b50:	fc 01       	movw	r30, r24
     b52:	ee 0f       	add	r30, r30
     b54:	ff 1f       	adc	r31, r31
     b56:	e6 55       	subi	r30, 0x56	; 86
     b58:	fe 4f       	sbci	r31, 0xFE	; 254
     b5a:	31 83       	std	Z+1, r19	; 0x01
     b5c:	20 83       	st	Z, r18
     b5e:	88 0f       	add	r24, r24
     b60:	99 1f       	adc	r25, r25
     b62:	fc 01       	movw	r30, r24
     b64:	e2 55       	subi	r30, 0x52	; 82
     b66:	fe 4f       	sbci	r31, 0xFE	; 254
     b68:	31 83       	std	Z+1, r19	; 0x01
     b6a:	20 83       	st	Z, r18
     b6c:	fd 01       	movw	r30, r26
     b6e:	e6 0f       	add	r30, r22
     b70:	f7 1f       	adc	r31, r23
     b72:	ee 0f       	add	r30, r30
     b74:	ff 1f       	adc	r31, r31
     b76:	e4 55       	subi	r30, 0x54	; 84
     b78:	fe 4f       	sbci	r31, 0xFE	; 254
     b7a:	31 83       	std	Z+1, r19	; 0x01
     b7c:	20 83       	st	Z, r18
     b7e:	f6 01       	movw	r30, r12
     b80:	12 8a       	std	Z+18, r1	; 0x12
     b82:	73 c0       	rjmp	.+230    	; 0xc6a <_Z4loopj+0x3f8>
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     b84:	e6 ec       	ldi	r30, 0xC6	; 198
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	66 85       	ldd	r22, Z+14	; 0x0e
     b8a:	77 85       	ldd	r23, Z+15	; 0x0f
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     b8c:	c0 88       	ldd	r12, Z+16	; 0x10
     b8e:	d1 88       	ldd	r13, Z+17	; 0x11

	void shiftPlayerRight (int shiftPositions) {
		int prevX = player.getX();
		int prevY = player.getY();

		int maxRightMovement = (BOARD_WIDTH - prevX - 2);
     b90:	86 e0       	ldi	r24, 0x06	; 6
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	86 1b       	sub	r24, r22
     b96:	97 0b       	sbc	r25, r23
		if(shiftPositions > maxRightMovement) shiftPositions = maxRightMovement;
     b98:	18 16       	cp	r1, r24
     b9a:	19 06       	cpc	r1, r25
     b9c:	14 f4       	brge	.+4      	; 0xba2 <_Z4loopj+0x330>
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0

		movePlayer( prevX + shiftPositions, prevY);
     ba2:	86 0f       	add	r24, r22
     ba4:	97 1f       	adc	r25, r23
    int getX() const {
        return x;
    }

    void setX(int x) {
        Position::x = x;
     ba6:	0f 2e       	mov	r0, r31
     ba8:	f6 ec       	ldi	r31, 0xC6	; 198
     baa:	ef 2e       	mov	r14, r31
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	ff 2e       	mov	r15, r31
     bb0:	f0 2d       	mov	r31, r0
     bb2:	d7 01       	movw	r26, r14
     bb4:	1f 96       	adiw	r26, 0x0f	; 15
     bb6:	9c 93       	st	X, r25
     bb8:	8e 93       	st	-X, r24
     bba:	1e 97       	sbiw	r26, 0x0e	; 14
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     bbc:	96 01       	movw	r18, r12
     bbe:	22 0f       	add	r18, r18
     bc0:	33 1f       	adc	r19, r19
     bc2:	22 0f       	add	r18, r18
     bc4:	33 1f       	adc	r19, r19
     bc6:	22 0f       	add	r18, r18
     bc8:	33 1f       	adc	r19, r19
     bca:	d9 01       	movw	r26, r18
     bcc:	a6 0f       	add	r26, r22
     bce:	b7 1f       	adc	r27, r23
     bd0:	8d 01       	movw	r16, r26
     bd2:	00 0f       	add	r16, r16
     bd4:	11 1f       	adc	r17, r17
     bd6:	04 55       	subi	r16, 0x54	; 84
     bd8:	1e 4f       	sbci	r17, 0xFE	; 254
     bda:	f8 01       	movw	r30, r16
     bdc:	11 82       	std	Z+1, r1	; 0x01
     bde:	10 82       	st	Z, r1
     be0:	8d 01       	movw	r16, r26
     be2:	00 0f       	add	r16, r16
     be4:	11 1f       	adc	r17, r17
     be6:	06 55       	subi	r16, 0x56	; 86
     be8:	1e 4f       	sbci	r17, 0xFE	; 254
     bea:	f8 01       	movw	r30, r16
     bec:	11 82       	std	Z+1, r1	; 0x01
     bee:	10 82       	st	Z, r1
     bf0:	aa 0f       	add	r26, r26
     bf2:	bb 1f       	adc	r27, r27
     bf4:	a2 55       	subi	r26, 0x52	; 82
     bf6:	be 4f       	sbci	r27, 0xFE	; 254
     bf8:	1d 92       	st	X+, r1
     bfa:	1c 92       	st	X, r1

	void resetPlayerPosition(int x, int y) {
		resetIndexInBoard(x, y);
		resetIndexInBoard(x - 1, y);
		resetIndexInBoard(x + 1, y);
		resetIndexInBoard(x, y - 1);
     bfc:	f6 01       	movw	r30, r12
     bfe:	31 97       	sbiw	r30, 0x01	; 1
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     c00:	df 01       	movw	r26, r30
     c02:	aa 0f       	add	r26, r26
     c04:	bb 1f       	adc	r27, r27
     c06:	aa 0f       	add	r26, r26
     c08:	bb 1f       	adc	r27, r27
     c0a:	aa 0f       	add	r26, r26
     c0c:	bb 1f       	adc	r27, r27
     c0e:	fd 01       	movw	r30, r26
     c10:	e6 0f       	add	r30, r22
     c12:	f7 1f       	adc	r31, r23
     c14:	ee 0f       	add	r30, r30
     c16:	ff 1f       	adc	r31, r31
     c18:	e4 55       	subi	r30, 0x54	; 84
     c1a:	fe 4f       	sbci	r31, 0xFE	; 254
     c1c:	11 82       	std	Z+1, r1	; 0x01
     c1e:	10 82       	st	Z, r1
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     c20:	28 0f       	add	r18, r24
     c22:	39 1f       	adc	r19, r25
     c24:	f9 01       	movw	r30, r18
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	e4 55       	subi	r30, 0x54	; 84
     c2c:	fe 4f       	sbci	r31, 0xFE	; 254
     c2e:	63 e0       	ldi	r22, 0x03	; 3
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	71 83       	std	Z+1, r23	; 0x01
     c34:	60 83       	st	Z, r22
     c36:	f9 01       	movw	r30, r18
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	e6 55       	subi	r30, 0x56	; 86
     c3e:	fe 4f       	sbci	r31, 0xFE	; 254
     c40:	71 83       	std	Z+1, r23	; 0x01
     c42:	60 83       	st	Z, r22
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	f9 01       	movw	r30, r18
     c4a:	e2 55       	subi	r30, 0x52	; 82
     c4c:	fe 4f       	sbci	r31, 0xFE	; 254
     c4e:	71 83       	std	Z+1, r23	; 0x01
     c50:	60 83       	st	Z, r22
     c52:	fd 01       	movw	r30, r26
     c54:	e8 0f       	add	r30, r24
     c56:	f9 1f       	adc	r31, r25
     c58:	ee 0f       	add	r30, r30
     c5a:	ff 1f       	adc	r31, r31
     c5c:	e4 55       	subi	r30, 0x54	; 84
     c5e:	fe 4f       	sbci	r31, 0xFE	; 254
     c60:	71 83       	std	Z+1, r23	; 0x01
     c62:	60 83       	st	Z, r22
     c64:	d7 01       	movw	r26, r14
     c66:	52 96       	adiw	r26, 0x12	; 18
     c68:	1c 92       	st	X, r1
	}


	void bulletPoll() {

		if(loopNo % BULLET_SHOOT_DELAY == 0) {
     c6a:	9a 01       	movw	r18, r20
     c6c:	32 95       	swap	r19
     c6e:	22 95       	swap	r18
     c70:	2f 70       	andi	r18, 0x0F	; 15
     c72:	23 27       	eor	r18, r19
     c74:	3f 70       	andi	r19, 0x0F	; 15
     c76:	23 27       	eor	r18, r19
     c78:	ae e3       	ldi	r26, 0x3E	; 62
     c7a:	ba e0       	ldi	r27, 0x0A	; 10
     c7c:	0e 94 98 09 	call	0x1330	; 0x1330 <__umulhisi3>
     c80:	20 e9       	ldi	r18, 0x90	; 144
     c82:	31 e0       	ldi	r19, 0x01	; 1
     c84:	fc 01       	movw	r30, r24
     c86:	e2 9f       	mul	r30, r18
     c88:	c0 01       	movw	r24, r0
     c8a:	e3 9f       	mul	r30, r19
     c8c:	90 0d       	add	r25, r0
     c8e:	f2 9f       	mul	r31, r18
     c90:	90 0d       	add	r25, r0
     c92:	11 24       	eor	r1, r1
     c94:	48 17       	cp	r20, r24
     c96:	59 07       	cpc	r21, r25
     c98:	21 f4       	brne	.+8      	; 0xca2 <_Z4loopj+0x430>
			bulletReadyToShoot = true;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <__data_end+0xd>
     ca0:	05 c0       	rjmp	.+10     	; 0xcac <_Z4loopj+0x43a>
		}

		if(bulletReadyToShoot && HardwareController::isShootButtonPressed()) {
     ca2:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <__data_end+0xd>
     ca6:	88 23       	and	r24, r24
     ca8:	09 f4       	brne	.+2      	; 0xcac <_Z4loopj+0x43a>
     caa:	4a c0       	rjmp	.+148    	; 0xd40 <_Z4loopj+0x4ce>
		Lcd4_Set_Cursor(2, 0);
		Lcd4_Write_String(lower);
	}

	static bool isShootButtonPressed() {
		char res = PINA;
     cac:	89 b3       	in	r24, 0x19	; 25
     cae:	ca 99       	sbic	0x19, 2	; 25
     cb0:	ef c2       	rjmp	.+1502   	; 0x1290 <_Z4loopj+0xa1e>
     cb2:	46 c0       	rjmp	.+140    	; 0xd40 <_Z4loopj+0x4ce>
	void shootNewBullet() {
		

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
			if(bulletPool[i].IsAlive() == false) {
     cb4:	20 81       	ld	r18, Z
     cb6:	21 11       	cpse	r18, r1
     cb8:	3d c0       	rjmp	.+122    	; 0xd34 <_Z4loopj+0x4c2>
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <_Z4loopj+0x44e>
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
				activeBulletForShooting(bulletPool[i]);
     cc0:	fc 01       	movw	r30, r24
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	ee 0f       	add	r30, r30
     cc8:	ff 1f       	adc	r31, r31
     cca:	ee 0f       	add	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	8e 0f       	add	r24, r30
     cd0:	9f 1f       	adc	r25, r31
     cd2:	ac 01       	movw	r20, r24
     cd4:	48 50       	subi	r20, 0x08	; 8
     cd6:	5f 4f       	sbci	r21, 0xFF	; 255
    unsigned int getRespawnTimeCounter() const {
        return respawnTimeCounter;
    }

    void setRespawnTimeCounter(unsigned int respawnTimeCounter) {
        NewBullet::respawnTimeCounter = respawnTimeCounter;
     cd8:	a6 ec       	ldi	r26, 0xC6	; 198
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	fc 01       	movw	r30, r24
     cde:	ea 53       	subi	r30, 0x3A	; 58
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	12 ae       	std	Z+58, r1	; 0x3a
     ce4:	11 ae       	std	Z+57, r1	; 0x39
    unsigned int getMoveTimeCounter() const {
        return moveTimeCounter;
    }

    void setMoveTimeCounter(unsigned int spawnTimerCounter) {
        NewBullet::moveTimeCounter = spawnTimerCounter;
     ce6:	10 ae       	std	Z+56, r1	; 0x38
     ce8:	17 aa       	std	Z+55, r1	; 0x37
    bool IsAlive() const {
        return isActiveOnBoard;
    }

    void setIsAlive(bool isAlive) {
        NewBullet::isActiveOnBoard = isAlive;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	86 ab       	std	Z+54, r24	; 0x36
	void activeBulletForShooting(NewBullet &newBullet) {
		
			newBullet.setRespawnTimeCounter(0);
			newBullet.setMoveTimeCounter(0);
	        newBullet.setIsAlive(true);
	        newBullet.setBulletPosition(player.getX(), player.getY() - 2);
     cee:	50 96       	adiw	r26, 0x10	; 16
     cf0:	2d 91       	ld	r18, X+
     cf2:	3c 91       	ld	r19, X
     cf4:	51 97       	sbiw	r26, 0x11	; 17
     cf6:	22 50       	subi	r18, 0x02	; 2
     cf8:	31 09       	sbc	r19, r1
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     cfa:	1e 96       	adiw	r26, 0x0e	; 14
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	1f 97       	sbiw	r26, 0x0f	; 15
    }

    void setX(int x) {
        Position::x = x;
     d02:	fa 01       	movw	r30, r20
     d04:	91 83       	std	Z+1, r25	; 0x01
     d06:	80 83       	st	Z, r24
    int getY() const {
        return y;
    }

    void setY(int y) {
        Position::y = y;
     d08:	33 83       	std	Z+3, r19	; 0x03
     d0a:	22 83       	std	Z+2, r18	; 0x02
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     d0c:	f9 01       	movw	r30, r18
     d0e:	ee 0f       	add	r30, r30
     d10:	ff 1f       	adc	r31, r31
     d12:	ee 0f       	add	r30, r30
     d14:	ff 1f       	adc	r31, r31
     d16:	ee 0f       	add	r30, r30
     d18:	ff 1f       	adc	r31, r31
     d1a:	e8 0f       	add	r30, r24
     d1c:	f9 1f       	adc	r31, r25
     d1e:	ee 0f       	add	r30, r30
     d20:	ff 1f       	adc	r31, r31
     d22:	e4 55       	subi	r30, 0x54	; 84
     d24:	fe 4f       	sbci	r31, 0xFE	; 254
     d26:	83 e0       	ldi	r24, 0x03	; 3
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	80 83       	st	Z, r24

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
			if(bulletPool[i].IsAlive() == false) {
				activeBulletForShooting(bulletPool[i]);
				bulletReadyToShoot = false;
     d2e:	1d 96       	adiw	r26, 0x0d	; 13
     d30:	1c 92       	st	X, r1
     d32:	06 c0       	rjmp	.+12     	; 0xd40 <_Z4loopj+0x4ce>

	void shootNewBullet() {
		

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	39 96       	adiw	r30, 0x09	; 9
     d38:	84 31       	cpi	r24, 0x14	; 20
     d3a:	91 05       	cpc	r25, r1
     d3c:	09 f0       	breq	.+2      	; 0xd40 <_Z4loopj+0x4ce>
     d3e:	ba cf       	rjmp	.-140    	; 0xcb4 <_Z4loopj+0x442>
     d40:	0f 2e       	mov	r0, r31
     d42:	f8 ef       	ldi	r31, 0xF8	; 248
     d44:	8f 2e       	mov	r8, r31
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	9f 2e       	mov	r9, r31
     d4a:	f0 2d       	mov	r31, r0
     d4c:	8c ea       	ldi	r24, 0xAC	; 172
     d4e:	91 e0       	ldi	r25, 0x01	; 1
			if(bulletPool[i].IsAlive() == false) {
     d50:	f4 01       	movw	r30, r8
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     d52:	0f 2e       	mov	r0, r31
     d54:	f3 e0       	ldi	r31, 0x03	; 3
     d56:	6f 2e       	mov	r6, r31
     d58:	71 2c       	mov	r7, r1
     d5a:	f0 2d       	mov	r31, r0
            int newY = p.getY() - 1;

            if(newY == -1) {
				if(newBullet.IsAlive()) resetIndexInBoard(prevX, prevY);
                newBullet.setIsAlive(false);
                newY = BOARD_HEIGHT - 1;
     d5c:	0f 2e       	mov	r0, r31
     d5e:	ff e0       	ldi	r31, 0x0F	; 15
     d60:	ef 2e       	mov	r14, r31
     d62:	f0 2d       	mov	r31, r0
     d64:	f1 2c       	mov	r15, r1
     d66:	6f 01       	movw	r12, r30
		//newBullet.setRespawnTimeCounter( newBullet.getRespawnTimeCounter() + 1);


        unsigned int moveTime= BULLET_MOVE_TIME;
        unsigned int currentTime = newBullet.getMoveTimeCounter();
        newBullet.setMoveTimeCounter(currentTime + 1);
     d68:	25 81       	ldd	r18, Z+5	; 0x05
     d6a:	36 81       	ldd	r19, Z+6	; 0x06
     d6c:	2f 5f       	subi	r18, 0xFF	; 255
     d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    unsigned int getMoveTimeCounter() const {
        return moveTimeCounter;
    }

    void setMoveTimeCounter(unsigned int spawnTimerCounter) {
        NewBullet::moveTimeCounter = spawnTimerCounter;
     d70:	36 83       	std	Z+6, r19	; 0x06
     d72:	25 83       	std	Z+5, r18	; 0x05

        if (newBullet.getMoveTimeCounter() >= moveTime) {
     d74:	26 39       	cpi	r18, 0x96	; 150
     d76:	31 05       	cpc	r19, r1
     d78:	08 f4       	brcc	.+2      	; 0xd7c <_Z4loopj+0x50a>
     d7a:	56 c0       	rjmp	.+172    	; 0xe28 <_Z4loopj+0x5b6>
    int getY() const {
        return bulletPosition.getY();
    }

    const Position getBulletPosition() const {
        return bulletPosition;
     d7c:	40 81       	ld	r20, Z
     d7e:	51 81       	ldd	r21, Z+1	; 0x01
     d80:	62 81       	ldd	r22, Z+2	; 0x02
     d82:	73 81       	ldd	r23, Z+3	; 0x03
            Position p = newBullet.getBulletPosition();
            int prevX = p.getX(),prevY = p.getY();

            int newX = p.getX();
            int newY = p.getY() - 1;
     d84:	9b 01       	movw	r18, r22
     d86:	21 50       	subi	r18, 0x01	; 1
     d88:	31 09       	sbc	r19, r1
     d8a:	c0 f4       	brcc	.+48     	; 0xdbc <_Z4loopj+0x54a>

            if(newY == -1) {
				if(newBullet.IsAlive()) resetIndexInBoard(prevX, prevY);
     d8c:	24 81       	ldd	r18, Z+4	; 0x04
     d8e:	22 23       	and	r18, r18
     d90:	81 f0       	breq	.+32     	; 0xdb2 <_Z4loopj+0x540>
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     d92:	9b 01       	movw	r18, r22
     d94:	22 0f       	add	r18, r18
     d96:	33 1f       	adc	r19, r19
     d98:	22 0f       	add	r18, r18
     d9a:	33 1f       	adc	r19, r19
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	24 0f       	add	r18, r20
     da2:	35 1f       	adc	r19, r21
     da4:	22 0f       	add	r18, r18
     da6:	33 1f       	adc	r19, r19
     da8:	24 55       	subi	r18, 0x54	; 84
     daa:	3e 4f       	sbci	r19, 0xFE	; 254
     dac:	d9 01       	movw	r26, r18
     dae:	1d 92       	st	X+, r1
     db0:	1c 92       	st	X, r1
    bool IsAlive() const {
        return isActiveOnBoard;
    }

    void setIsAlive(bool isAlive) {
        NewBullet::isActiveOnBoard = isAlive;
     db2:	d6 01       	movw	r26, r12
     db4:	14 96       	adiw	r26, 0x04	; 4
     db6:	1c 92       	st	X, r1
            int newY = p.getY() - 1;

            if(newY == -1) {
				if(newBullet.IsAlive()) resetIndexInBoard(prevX, prevY);
                newBullet.setIsAlive(false);
                newY = BOARD_HEIGHT - 1;
     db8:	2e 2d       	mov	r18, r14
     dba:	3f 2d       	mov	r19, r15
    int getX() const {
        return x;
    }

    void setX(int x) {
        Position::x = x;
     dbc:	d6 01       	movw	r26, r12
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	5c 93       	st	X, r21
     dc2:	4e 93       	st	-X, r20
    int getY() const {
        return y;
    }

    void setY(int y) {
        Position::y = y;
     dc4:	13 96       	adiw	r26, 0x03	; 3
     dc6:	3c 93       	st	X, r19
     dc8:	2e 93       	st	-X, r18
     dca:	12 97       	sbiw	r26, 0x02	; 2
    unsigned int getMoveTimeCounter() const {
        return moveTimeCounter;
    }

    void setMoveTimeCounter(unsigned int spawnTimerCounter) {
        NewBullet::moveTimeCounter = spawnTimerCounter;
     dcc:	16 96       	adiw	r26, 0x06	; 6
     dce:	1c 92       	st	X, r1
     dd0:	1e 92       	st	-X, r1
     dd2:	15 97       	sbiw	r26, 0x05	; 5
            newBullet.setBulletPosition(newX, newY);

            ////printStringToConsole("Enemy "+to_string(enemyNo)+"("+to_string(enemy.getX())+","+to_string(enemy.getY())+")");
            newBullet.setMoveTimeCounter(0);

            if(newBullet.IsAlive()) resetIndexInBoard(prevX, prevY);
     dd4:	14 96       	adiw	r26, 0x04	; 4
     dd6:	2c 91       	ld	r18, X
     dd8:	22 23       	and	r18, r18
     dda:	31 f1       	breq	.+76     	; 0xe28 <_Z4loopj+0x5b6>
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     ddc:	9b 01       	movw	r18, r22
     dde:	22 0f       	add	r18, r18
     de0:	33 1f       	adc	r19, r19
     de2:	22 0f       	add	r18, r18
     de4:	33 1f       	adc	r19, r19
     de6:	22 0f       	add	r18, r18
     de8:	33 1f       	adc	r19, r19
     dea:	42 0f       	add	r20, r18
     dec:	53 1f       	adc	r21, r19
     dee:	44 0f       	add	r20, r20
     df0:	55 1f       	adc	r21, r21
     df2:	44 55       	subi	r20, 0x54	; 84
     df4:	5e 4f       	sbci	r21, 0xFE	; 254
     df6:	da 01       	movw	r26, r20
     df8:	1d 92       	st	X+, r1
     dfa:	1c 92       	st	X, r1
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     dfc:	d6 01       	movw	r26, r12
     dfe:	12 96       	adiw	r26, 0x02	; 2
     e00:	4d 91       	ld	r20, X+
     e02:	5c 91       	ld	r21, X
     e04:	13 97       	sbiw	r26, 0x03	; 3
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     e06:	2d 91       	ld	r18, X+
     e08:	3c 91       	ld	r19, X
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     e0a:	da 01       	movw	r26, r20
     e0c:	aa 0f       	add	r26, r26
     e0e:	bb 1f       	adc	r27, r27
     e10:	aa 0f       	add	r26, r26
     e12:	bb 1f       	adc	r27, r27
     e14:	aa 0f       	add	r26, r26
     e16:	bb 1f       	adc	r27, r27
     e18:	a2 0f       	add	r26, r18
     e1a:	b3 1f       	adc	r27, r19
     e1c:	aa 0f       	add	r26, r26
     e1e:	bb 1f       	adc	r27, r27
     e20:	a4 55       	subi	r26, 0x54	; 84
     e22:	be 4f       	sbci	r27, 0xFE	; 254
     e24:	6d 92       	st	X+, r6
     e26:	7c 92       	st	X, r7
     e28:	39 96       	adiw	r30, 0x09	; 9
	}


    void updateNewBulletPositions() {
			
		for(int i = 0; i < BULLET_POOL_SIZE; i++) {
     e2a:	8e 17       	cp	r24, r30
     e2c:	9f 07       	cpc	r25, r31
     e2e:	09 f0       	breq	.+2      	; 0xe32 <_Z4loopj+0x5c0>
     e30:	9a cf       	rjmp	.-204    	; 0xd66 <_Z4loopj+0x4f4>
	}

	// for all objects, check for collision, update collision count and reset boards
	void updateBasedOnCollisions() {

		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
     e32:	e6 ec       	ldi	r30, 0xC6	; 198
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	20 81       	ld	r18, Z
     e38:	31 81       	ldd	r19, Z+1	; 0x01
     e3a:	38 a7       	std	Y+40, r19	; 0x28
     e3c:	2f a3       	std	Y+39, r18	; 0x27
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
     e3e:	22 80       	ldd	r2, Z+2	; 0x02
     e40:	33 80       	ldd	r3, Z+3	; 0x03
     e42:	bf 01       	movw	r22, r30
	
		// checking for bullet and enemy collisions		
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
			for (unsigned int bulletCounter = 0; bulletCounter < BULLET_POOL_SIZE; bulletCounter++) {
				if (doesCollide(enemyPool[enemyCounter], bulletPool[bulletCounter])) {
					enemyBulletCollisionCounter++;
     e44:	9f 01       	movw	r18, r30

	// for all objects, check for collision, update collision count and reset boards
	void updateBasedOnCollisions() {

		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
     e46:	f4 01       	movw	r30, r8
     e48:	7e a3       	std	Y+38, r23	; 0x26
     e4a:	6d a3       	std	Y+37, r22	; 0x25
	}

	
	bool doesCollide(const Enemy &enemy, const NewBullet &bullet) {
		
		if (!enemy.isAlive() || !bullet.IsAlive())
     e4c:	db 01       	movw	r26, r22
     e4e:	57 96       	adiw	r26, 0x17	; 23
     e50:	4c 91       	ld	r20, X
     e52:	44 23       	and	r20, r20
     e54:	09 f4       	brne	.+2      	; 0xe58 <_Z4loopj+0x5e6>
     e56:	47 c0       	rjmp	.+142    	; 0xee6 <_Z4loopj+0x674>
     e58:	14 81       	ldd	r17, Z+4	; 0x04
     e5a:	11 23       	and	r17, r17
     e5c:	09 f4       	brne	.+2      	; 0xe60 <_Z4loopj+0x5ee>
     e5e:	43 c0       	rjmp	.+134    	; 0xee6 <_Z4loopj+0x674>
    int getY() const {
        return bulletPosition.getY();
    }

    const Position getBulletPosition() const {
        return bulletPosition;
     e60:	c0 80       	ld	r12, Z
     e62:	d1 80       	ldd	r13, Z+1	; 0x01
     e64:	e2 80       	ldd	r14, Z+2	; 0x02
     e66:	f3 80       	ldd	r15, Z+3	; 0x03
    int getY() const {
        return enemyPosition.getY();
    }

    const Position getEnemyPosition() const {
        return enemyPosition;
     e68:	ad a1       	ldd	r26, Y+37	; 0x25
     e6a:	be a1       	ldd	r27, Y+38	; 0x26
     e6c:	53 96       	adiw	r26, 0x13	; 19
     e6e:	4d 90       	ld	r4, X+
     e70:	5d 90       	ld	r5, X+
     e72:	6d 90       	ld	r6, X+
     e74:	7c 90       	ld	r7, X
     e76:	56 97       	sbiw	r26, 0x16	; 22
    void setY(int y) {
        Position::y = y;
    }

    bool operator==(const Position other) const {
        return x == other.x && y == other.y;
     e78:	c4 14       	cp	r12, r4
     e7a:	d5 04       	cpc	r13, r5
     e7c:	a1 f5       	brne	.+104    	; 0xee6 <_Z4loopj+0x674>
     e7e:	e6 14       	cp	r14, r6
     e80:	f7 04       	cpc	r15, r7
     e82:	89 f5       	brne	.+98     	; 0xee6 <_Z4loopj+0x674>
	
		// checking for bullet and enemy collisions		
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
			for (unsigned int bulletCounter = 0; bulletCounter < BULLET_POOL_SIZE; bulletCounter++) {
				if (doesCollide(enemyPool[enemyCounter], bulletPool[bulletCounter])) {
					enemyBulletCollisionCounter++;
     e84:	d9 01       	movw	r26, r18
     e86:	0d 91       	ld	r16, X+
     e88:	1c 91       	ld	r17, X
     e8a:	11 97       	sbiw	r26, 0x01	; 1
     e8c:	0f 5f       	subi	r16, 0xFF	; 255
     e8e:	1f 4f       	sbci	r17, 0xFF	; 255
     e90:	11 96       	adiw	r26, 0x01	; 1
     e92:	1c 93       	st	X, r17
     e94:	0e 93       	st	-X, r16
					killStreak++;
     e96:	14 96       	adiw	r26, 0x04	; 4
     e98:	0d 91       	ld	r16, X+
     e9a:	1c 91       	ld	r17, X
     e9c:	15 97       	sbiw	r26, 0x05	; 5
     e9e:	0f 5f       	subi	r16, 0xFF	; 255
     ea0:	1f 4f       	sbci	r17, 0xFF	; 255
     ea2:	15 96       	adiw	r26, 0x05	; 5
     ea4:	1c 93       	st	X, r17
     ea6:	0e 93       	st	-X, r16
     ea8:	14 97       	sbiw	r26, 0x04	; 4
     eaa:	ad a1       	ldd	r26, Y+37	; 0x25
     eac:	be a1       	ldd	r27, Y+38	; 0x26
     eae:	53 96       	adiw	r26, 0x13	; 19
     eb0:	cd 90       	ld	r12, X+
     eb2:	dd 90       	ld	r13, X+
     eb4:	ed 90       	ld	r14, X+
     eb6:	fc 90       	ld	r15, X
     eb8:	56 97       	sbiw	r26, 0x16	; 22
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     eba:	87 01       	movw	r16, r14
     ebc:	00 0f       	add	r16, r16
     ebe:	11 1f       	adc	r17, r17
     ec0:	00 0f       	add	r16, r16
     ec2:	11 1f       	adc	r17, r17
     ec4:	00 0f       	add	r16, r16
     ec6:	11 1f       	adc	r17, r17
     ec8:	c0 0e       	add	r12, r16
     eca:	d1 1e       	adc	r13, r17
     ecc:	86 01       	movw	r16, r12
     ece:	00 0f       	add	r16, r16
     ed0:	11 1f       	adc	r17, r17
     ed2:	04 55       	subi	r16, 0x54	; 84
     ed4:	1e 4f       	sbci	r17, 0xFE	; 254
     ed6:	d8 01       	movw	r26, r16
     ed8:	1d 92       	st	X+, r1
     eda:	1c 92       	st	X, r1
    bool IsAlive() const {
        return isActiveOnBoard;
    }

    void setIsAlive(bool isAlive) {
        NewBullet::isActiveOnBoard = isAlive;
     edc:	14 82       	std	Z+4, r1	; 0x04
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
     ede:	ad a1       	ldd	r26, Y+37	; 0x25
     ee0:	be a1       	ldd	r27, Y+38	; 0x26
     ee2:	57 96       	adiw	r26, 0x17	; 23
     ee4:	1c 92       	st	X, r1
     ee6:	39 96       	adiw	r30, 0x09	; 9
		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
	
		// checking for bullet and enemy collisions		
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
			for (unsigned int bulletCounter = 0; bulletCounter < BULLET_POOL_SIZE; bulletCounter++) {
     ee8:	8e 17       	cp	r24, r30
     eea:	9f 07       	cpc	r25, r31
     eec:	09 f0       	breq	.+2      	; 0xef0 <_Z4loopj+0x67e>
     eee:	ae cf       	rjmp	.-164    	; 0xe4c <_Z4loopj+0x5da>
     ef0:	67 5f       	subi	r22, 0xF7	; 247
     ef2:	7f 4f       	sbci	r23, 0xFF	; 255

		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
	
		// checking for bullet and enemy collisions		
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	61 3e       	cpi	r22, 0xE1	; 225
     ef8:	7b 07       	cpc	r23, r27
     efa:	09 f0       	breq	.+2      	; 0xefe <_Z4loopj+0x68c>
     efc:	a4 cf       	rjmp	.-184    	; 0xe46 <_Z4loopj+0x5d4>
		if (!enemy.isAlive()) return false;
		
		// dx and dy contains the change in x and y co-ordinate from origin of player position to get all the 
		// points needed by player.
		const int dx[] = {0, 0, -1, 1};
		const int dy[] = {0, -1, 0, 0};
     efe:	66 24       	eor	r6, r6
     f00:	6a 94       	dec	r6
     f02:	76 2c       	mov	r7, r6
    int getY() const {
        return playerPosition.getY();
    }

    const Position getPlayerPosition() const {
        return playerPosition;
     f04:	0f 2e       	mov	r0, r31
     f06:	f6 ec       	ldi	r31, 0xC6	; 198
     f08:	4f 2e       	mov	r4, r31
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	5f 2e       	mov	r5, r31
     f0e:	f0 2d       	mov	r31, r0
     f10:	4e 01       	movw	r8, r28
     f12:	e9 e1       	ldi	r30, 0x19	; 25
     f14:	8e 0e       	add	r8, r30
     f16:	91 1c       	adc	r9, r1
     f18:	be a2       	std	Y+38, r11	; 0x26
     f1a:	ad a2       	std	Y+37, r10	; 0x25
		return false;
	}


	bool doesCollide(const Enemy &enemy) {
		if (!enemy.isAlive()) return false;
     f1c:	d5 01       	movw	r26, r10
     f1e:	57 96       	adiw	r26, 0x17	; 23
     f20:	2c 91       	ld	r18, X
     f22:	22 23       	and	r18, r18
     f24:	09 f4       	brne	.+2      	; 0xf28 <_Z4loopj+0x6b6>
     f26:	98 c0       	rjmp	.+304    	; 0x1058 <_Z4loopj+0x7e6>
		
		// dx and dy contains the change in x and y co-ordinate from origin of player position to get all the 
		// points needed by player.
		const int dx[] = {0, 0, -1, 1};
     f28:	28 e0       	ldi	r18, 0x08	; 8
     f2a:	e4 e6       	ldi	r30, 0x64	; 100
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	de 01       	movw	r26, r28
     f30:	51 96       	adiw	r26, 0x11	; 17
     f32:	01 90       	ld	r0, Z+
     f34:	0d 92       	st	X+, r0
     f36:	2a 95       	dec	r18
     f38:	e1 f7       	brne	.-8      	; 0xf32 <_Z4loopj+0x6c0>
		const int dy[] = {0, -1, 0, 0};
     f3a:	1a 82       	std	Y+2, r1	; 0x02
     f3c:	19 82       	std	Y+1, r1	; 0x01
     f3e:	7c 82       	std	Y+4, r7	; 0x04
     f40:	6b 82       	std	Y+3, r6	; 0x03
     f42:	1e 82       	std	Y+6, r1	; 0x06
     f44:	1d 82       	std	Y+5, r1	; 0x05
     f46:	18 86       	std	Y+8, r1	; 0x08
     f48:	1f 82       	std	Y+7, r1	; 0x07
     f4a:	f2 01       	movw	r30, r4
     f4c:	06 85       	ldd	r16, Z+14	; 0x0e
     f4e:	17 85       	ldd	r17, Z+15	; 0x0f
     f50:	20 89       	ldd	r18, Z+16	; 0x10
     f52:	31 89       	ldd	r19, Z+17	; 0x11
     f54:	b8 01       	movw	r22, r16
     f56:	89 01       	movw	r16, r18
    int getY() const {
        return enemyPosition.getY();
    }

    const Position getEnemyPosition() const {
        return enemyPosition;
     f58:	d5 01       	movw	r26, r10
     f5a:	53 96       	adiw	r26, 0x13	; 19
     f5c:	cd 90       	ld	r12, X+
     f5e:	dd 90       	ld	r13, X+
     f60:	ed 90       	ld	r14, X+
     f62:	fc 90       	ld	r15, X
     f64:	56 97       	sbiw	r26, 0x16	; 22
     f66:	a6 01       	movw	r20, r12
     f68:	fe 01       	movw	r30, r28
     f6a:	71 96       	adiw	r30, 0x11	; 17
     f6c:	de 01       	movw	r26, r28
     f6e:	11 96       	adiw	r26, 0x01	; 1
			
		const Position player_pos = player.getPlayerPosition();
		const Position enemy_pos = enemy.getEnemyPosition();
			
		for (int i = 0; i < 4; i++) {
			if (enemy_pos.getX() == player_pos.getX()+dx[i] && enemy_pos.getY() == player_pos.getY()+dy[i]) {
     f70:	21 91       	ld	r18, Z+
     f72:	31 91       	ld	r19, Z+
     f74:	26 0f       	add	r18, r22
     f76:	37 1f       	adc	r19, r23
     f78:	24 17       	cp	r18, r20
     f7a:	35 07       	cpc	r19, r21
     f7c:	49 f4       	brne	.+18     	; 0xf90 <_Z4loopj+0x71e>
     f7e:	2d 91       	ld	r18, X+
     f80:	3c 91       	ld	r19, X
     f82:	11 97       	sbiw	r26, 0x01	; 1
     f84:	20 0f       	add	r18, r16
     f86:	31 1f       	adc	r19, r17
     f88:	e2 16       	cp	r14, r18
     f8a:	f3 06       	cpc	r15, r19
     f8c:	09 f4       	brne	.+2      	; 0xf90 <_Z4loopj+0x71e>
     f8e:	8a c1       	rjmp	.+788    	; 0x12a4 <_Z4loopj+0xa32>
     f90:	12 96       	adiw	r26, 0x02	; 2
		const int dy[] = {0, -1, 0, 0};
			
		const Position player_pos = player.getPlayerPosition();
		const Position enemy_pos = enemy.getEnemyPosition();
			
		for (int i = 0; i < 4; i++) {
     f92:	8e 16       	cp	r8, r30
     f94:	9f 06       	cpc	r9, r31
     f96:	61 f7       	brne	.-40     	; 0xf70 <_Z4loopj+0x6fe>
     f98:	5f c0       	rjmp	.+190    	; 0x1058 <_Z4loopj+0x7e6>
		}
	}
	

	void initiateGameOver() {
		gameActive = false;
     f9a:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end+0x6>
     f9e:	4c ea       	ldi	r20, 0xAC	; 172
     fa0:	52 e0       	ldi	r21, 0x02	; 2
     fa2:	9c 01       	movw	r18, r24
     fa4:	20 5f       	subi	r18, 0xF0	; 240
     fa6:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	void resetAllIndexInBoard(){
		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				displayBoard[i][j] = 0;
     fa8:	fc 01       	movw	r30, r24
     faa:	11 92       	st	Z+, r1
     fac:	11 92       	st	Z+, r1
     fae:	cf 01       	movw	r24, r30
		 	return rand() % BOARD_WIDTH;
	}
	void resetAllIndexInBoard(){
		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
     fb0:	e2 17       	cp	r30, r18
     fb2:	f3 07       	cpc	r31, r19
     fb4:	c9 f7       	brne	.-14     	; 0xfa8 <_Z4loopj+0x736>
     fb6:	c9 01       	movw	r24, r18
	 int getRandomBoardXCordinate() {
		 	return rand() % BOARD_WIDTH;
	}
	void resetAllIndexInBoard(){
		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;
		for (int i = 0; i < rows; i++) {
     fb8:	42 17       	cp	r20, r18
     fba:	53 07       	cpc	r21, r19
     fbc:	91 f7       	brne	.-28     	; 0xfa2 <_Z4loopj+0x730>
		}
	}

	static void displayLcd(char * upper,char * lower)
	{
		Lcd4_Clear();
     fbe:	0e 94 08 02 	call	0x410	; 0x410 <_Z10Lcd4_Clearv>
		Lcd4_Set_Cursor(1, 0);
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z15Lcd4_Set_Cursorcc>
		Lcd4_Write_String(upper);
     fca:	8b e8       	ldi	r24, 0x8B	; 139
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17Lcd4_Write_StringPc>
		Lcd4_Set_Cursor(2, 0);
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	82 e0       	ldi	r24, 0x02	; 2
     fd6:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z15Lcd4_Set_Cursorcc>
		Lcd4_Write_String(lower);
     fda:	85 e9       	ldi	r24, 0x95	; 149
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17Lcd4_Write_StringPc>
	}


	void setIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 1;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <__data_end+0x119>
     fea:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <__data_end+0x118>
     fee:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <__data_end+0x11b>
     ff2:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end+0x11a>
     ff6:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <__data_end+0x121>
     ffa:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <__data_end+0x120>
     ffe:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <__data_end+0x123>
    1002:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <__data_end+0x122>
    1006:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__data_end+0x14d>
    100a:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end+0x14c>
    100e:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x14f>
    1012:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end+0x14e>
    1016:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <__data_end+0x15d>
    101a:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end+0x15c>
    101e:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <__data_end+0x15f>
    1022:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <__data_end+0x15e>
    1026:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <__data_end+0x17d>
    102a:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end+0x17c>
    102e:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <__data_end+0x17f>
    1032:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <__data_end+0x17e>
    1036:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <__data_end+0x18b>
    103a:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <__data_end+0x18a>
    103e:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <__data_end+0x191>
    1042:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <__data_end+0x190>
    1046:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <__data_end+0x199>
    104a:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <__data_end+0x198>
    104e:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <__data_end+0x1a3>
    1052:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <__data_end+0x1a2>
    1056:	3d c1       	rjmp	.+634    	; 0x12d2 <_Z4loopj+0xa60>
    1058:	f9 e0       	ldi	r31, 0x09	; 9
    105a:	af 0e       	add	r10, r31
    105c:	b1 1c       	adc	r11, r1
				}
			}
		}

		// checking for collision of enemy with the player
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
    105e:	11 ee       	ldi	r17, 0xE1	; 225
    1060:	a1 16       	cp	r10, r17
    1062:	10 e0       	ldi	r17, 0x00	; 0
    1064:	b1 06       	cpc	r11, r17
    1066:	09 f0       	breq	.+2      	; 0x106a <_Z4loopj+0x7f8>
    1068:	57 cf       	rjmp	.-338    	; 0xf18 <_Z4loopj+0x6a6>
					return;
				}
			}
		}
		
		if (lastEnemyPlayerCollisionCounter != enemyPlayerCollisionCounter 
    106a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__data_end+0x2>
    106e:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <__data_end+0x3>
    1072:	28 16       	cp	r2, r24
    1074:	39 06       	cpc	r3, r25
    1076:	51 f4       	brne	.+20     	; 0x108c <_Z4loopj+0x81a>
			|| lastEnemyBulletCollisionCounter != enemyBulletCollisionCounter) {
    1078:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__data_end>
    107c:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <__data_end+0x1>
    1080:	2f a1       	ldd	r18, Y+39	; 0x27
    1082:	38 a5       	ldd	r19, Y+40	; 0x28
    1084:	28 17       	cp	r18, r24
    1086:	39 07       	cpc	r19, r25
    1088:	09 f4       	brne	.+2      	; 0x108c <_Z4loopj+0x81a>
    108a:	23 c1       	rjmp	.+582    	; 0x12d2 <_Z4loopj+0xa60>
		    char comboString[16], tempString[16];




		if(killStreak > 0 && killStreak % 5 == 0) {
    108c:	00 91 ca 00 	lds	r16, 0x00CA	; 0x8000ca <__data_end+0x4>
    1090:	10 91 cb 00 	lds	r17, 0x00CB	; 0x8000cb <__data_end+0x5>
    1094:	01 15       	cp	r16, r1
    1096:	11 05       	cpc	r17, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <_Z4loopj+0x82a>
    109a:	4b c0       	rjmp	.+150    	; 0x1132 <_Z4loopj+0x8c0>
    109c:	98 01       	movw	r18, r16
    109e:	ad ec       	ldi	r26, 0xCD	; 205
    10a0:	bc ec       	ldi	r27, 0xCC	; 204
    10a2:	0e 94 98 09 	call	0x1330	; 0x1330 <__umulhisi3>
    10a6:	96 95       	lsr	r25
    10a8:	87 95       	ror	r24
    10aa:	96 95       	lsr	r25
    10ac:	87 95       	ror	r24
    10ae:	9c 01       	movw	r18, r24
    10b0:	22 0f       	add	r18, r18
    10b2:	33 1f       	adc	r19, r19
    10b4:	22 0f       	add	r18, r18
    10b6:	33 1f       	adc	r19, r19
    10b8:	82 0f       	add	r24, r18
    10ba:	93 1f       	adc	r25, r19
    10bc:	08 17       	cp	r16, r24
    10be:	19 07       	cpc	r17, r25
    10c0:	c1 f5       	brne	.+112    	; 0x1132 <_Z4loopj+0x8c0>

			
			strcpy(comboString, "Combo:");
    10c2:	87 e0       	ldi	r24, 0x07	; 7
    10c4:	e3 ea       	ldi	r30, 0xA3	; 163
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	de 01       	movw	r26, r28
    10ca:	51 96       	adiw	r26, 0x11	; 17
    10cc:	01 90       	ld	r0, Z+
    10ce:	0d 92       	st	X+, r0
    10d0:	8a 95       	dec	r24
    10d2:	e1 f7       	brne	.-8      	; 0x10cc <_Z4loopj+0x85a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    10d4:	4a e0       	ldi	r20, 0x0A	; 10
    10d6:	be 01       	movw	r22, r28
    10d8:	6f 5f       	subi	r22, 0xFF	; 255
    10da:	7f 4f       	sbci	r23, 0xFF	; 255
    10dc:	c8 01       	movw	r24, r16
    10de:	0e 94 14 0a 	call	0x1428	; 0x1428 <__itoa_ncheck>
		itoa (killStreak,tempString,10);

		char temp[4] = "   ";
    10e2:	80 e2       	ldi	r24, 0x20	; 32
    10e4:	90 e2       	ldi	r25, 0x20	; 32
    10e6:	9a a3       	std	Y+34, r25	; 0x22
    10e8:	89 a3       	std	Y+33, r24	; 0x21
    10ea:	80 e2       	ldi	r24, 0x20	; 32
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	9c a3       	std	Y+36, r25	; 0x24
    10f0:	8b a3       	std	Y+35, r24	; 0x23
    10f2:	de 01       	movw	r26, r28
    10f4:	11 96       	adiw	r26, 0x01	; 1
    10f6:	ae 01       	movw	r20, r28
    10f8:	4f 5d       	subi	r20, 0xDF	; 223
    10fa:	5f 4f       	sbci	r21, 0xFF	; 255
		for (int i = 0; i < strlen(tempString); i++) {
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9d 01       	movw	r18, r26
    1102:	f9 01       	movw	r30, r18
    1104:	01 90       	ld	r0, Z+
    1106:	00 20       	and	r0, r0
    1108:	e9 f7       	brne	.-6      	; 0x1104 <_Z4loopj+0x892>
    110a:	31 97       	sbiw	r30, 0x01	; 1
    110c:	e2 1b       	sub	r30, r18
    110e:	f3 0b       	sbc	r31, r19
    1110:	8e 17       	cp	r24, r30
    1112:	9f 07       	cpc	r25, r31
    1114:	30 f4       	brcc	.+12     	; 0x1122 <_Z4loopj+0x8b0>
			temp[i] = tempString[i];
    1116:	6d 91       	ld	r22, X+
    1118:	fa 01       	movw	r30, r20
    111a:	61 93       	st	Z+, r22
    111c:	af 01       	movw	r20, r30
			
			strcpy(comboString, "Combo:");
		itoa (killStreak,tempString,10);

		char temp[4] = "   ";
		for (int i = 0; i < strlen(tempString); i++) {
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	f0 cf       	rjmp	.-32     	; 0x1102 <_Z4loopj+0x890>
			temp[i] = tempString[i];
		}

		strcat(comboString, temp);
    1122:	be 01       	movw	r22, r28
    1124:	6f 5d       	subi	r22, 0xDF	; 223
    1126:	7f 4f       	sbci	r23, 0xFF	; 255
    1128:	ce 01       	movw	r24, r28
    112a:	41 96       	adiw	r24, 0x11	; 17
    112c:	0e 94 09 0a 	call	0x1412	; 0x1412 <strcat>
    1130:	09 c0       	rjmp	.+18     	; 0x1144 <_Z4loopj+0x8d2>
		} else {
			strcpy(comboString, "Enemy spotted");
    1132:	8e e0       	ldi	r24, 0x0E	; 14
    1134:	ea ea       	ldi	r30, 0xAA	; 170
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	de 01       	movw	r26, r28
    113a:	51 96       	adiw	r26, 0x11	; 17
    113c:	01 90       	ld	r0, Z+
    113e:	0d 92       	st	X+, r0
    1140:	8a 95       	dec	r24
    1142:	e1 f7       	brne	.-8      	; 0x113c <_Z4loopj+0x8ca>
	}
	
	char* getScoreString(){
		
		// adding number of kills
		strcpy(score1, "Kills:");
    1144:	06 ec       	ldi	r16, 0xC6	; 198
    1146:	10 e0       	ldi	r17, 0x00	; 0
    1148:	f8 01       	movw	r30, r16
    114a:	a7 81       	ldd	r26, Z+7	; 0x07
    114c:	b0 85       	ldd	r27, Z+8	; 0x08
    114e:	87 e0       	ldi	r24, 0x07	; 7
    1150:	e8 eb       	ldi	r30, 0xB8	; 184
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	01 90       	ld	r0, Z+
    1156:	0d 92       	st	X+, r0
    1158:	8a 95       	dec	r24
    115a:	e1 f7       	brne	.-8      	; 0x1154 <_Z4loopj+0x8e2>
    115c:	d8 01       	movw	r26, r16
    115e:	19 96       	adiw	r26, 0x09	; 9
    1160:	6d 91       	ld	r22, X+
    1162:	7c 91       	ld	r23, X
    1164:	1a 97       	sbiw	r26, 0x0a	; 10
    1166:	4a e0       	ldi	r20, 0x0A	; 10
    1168:	8d 91       	ld	r24, X+
    116a:	9c 91       	ld	r25, X
    116c:	0e 94 14 0a 	call	0x1428	; 0x1428 <__itoa_ncheck>
		itoa (enemyBulletCollisionCounter,score2,10);
		
		char temp[4] = "   ";
    1170:	80 e2       	ldi	r24, 0x20	; 32
    1172:	90 e2       	ldi	r25, 0x20	; 32
    1174:	9a a3       	std	Y+34, r25	; 0x22
    1176:	89 a3       	std	Y+33, r24	; 0x21
    1178:	80 e2       	ldi	r24, 0x20	; 32
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	9c a3       	std	Y+36, r25	; 0x24
    117e:	8b a3       	std	Y+35, r24	; 0x23
		for (int i = 0; i < strlen(score2); i++) {
    1180:	f8 01       	movw	r30, r16
    1182:	a1 85       	ldd	r26, Z+9	; 0x09
    1184:	b2 85       	ldd	r27, Z+10	; 0x0a
    1186:	ad 01       	movw	r20, r26
    1188:	9e 01       	movw	r18, r28
    118a:	2f 5d       	subi	r18, 0xDF	; 223
    118c:	3f 4f       	sbci	r19, 0xFF	; 255
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	fd 01       	movw	r30, r26
    1194:	01 90       	ld	r0, Z+
    1196:	00 20       	and	r0, r0
    1198:	e9 f7       	brne	.-6      	; 0x1194 <_Z4loopj+0x922>
    119a:	31 97       	sbiw	r30, 0x01	; 1
    119c:	ea 1b       	sub	r30, r26
    119e:	fb 0b       	sbc	r31, r27
    11a0:	8e 17       	cp	r24, r30
    11a2:	9f 07       	cpc	r25, r31
    11a4:	40 f4       	brcc	.+16     	; 0x11b6 <_Z4loopj+0x944>
			temp[i] = score2[i];
    11a6:	fa 01       	movw	r30, r20
    11a8:	61 91       	ld	r22, Z+
    11aa:	af 01       	movw	r20, r30
    11ac:	f9 01       	movw	r30, r18
    11ae:	61 93       	st	Z+, r22
    11b0:	9f 01       	movw	r18, r30
		// adding number of kills
		strcpy(score1, "Kills:");
		itoa (enemyBulletCollisionCounter,score2,10);
		
		char temp[4] = "   ";
		for (int i = 0; i < strlen(score2); i++) {
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	ee cf       	rjmp	.-36     	; 0x1192 <_Z4loopj+0x920>
			temp[i] = score2[i];
		}		
		strcat(score1, temp);
    11b6:	06 ec       	ldi	r16, 0xC6	; 198
    11b8:	10 e0       	ldi	r17, 0x00	; 0
    11ba:	be 01       	movw	r22, r28
    11bc:	6f 5d       	subi	r22, 0xDF	; 223
    11be:	7f 4f       	sbci	r23, 0xFF	; 255
    11c0:	d8 01       	movw	r26, r16
    11c2:	17 96       	adiw	r26, 0x07	; 7
    11c4:	8d 91       	ld	r24, X+
    11c6:	9c 91       	ld	r25, X
    11c8:	18 97       	sbiw	r26, 0x08	; 8
    11ca:	0e 94 09 0a 	call	0x1412	; 0x1412 <strcat>

		strcpy(score2,"     ");
    11ce:	f8 01       	movw	r30, r16
    11d0:	a1 85       	ldd	r26, Z+9	; 0x09
    11d2:	b2 85       	ldd	r27, Z+10	; 0x0a
    11d4:	86 e0       	ldi	r24, 0x06	; 6
    11d6:	ef eb       	ldi	r30, 0xBF	; 191
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	01 90       	ld	r0, Z+
    11dc:	0d 92       	st	X+, r0
    11de:	8a 95       	dec	r24
    11e0:	e1 f7       	brne	.-8      	; 0x11da <_Z4loopj+0x968>
		for (int i = enemyPlayerCollisionCounter; i < 5; i++) {
    11e2:	d8 01       	movw	r26, r16
    11e4:	12 96       	adiw	r26, 0x02	; 2
    11e6:	8d 91       	ld	r24, X+
    11e8:	9c 91       	ld	r25, X
    11ea:	13 97       	sbiw	r26, 0x03	; 3
    11ec:	85 30       	cpi	r24, 0x05	; 5
    11ee:	91 05       	cpc	r25, r1
    11f0:	64 f4       	brge	.+24     	; 0x120a <_Z4loopj+0x998>
		    score2[i] = '+';
    11f2:	2b e2       	ldi	r18, 0x2B	; 43
    11f4:	19 96       	adiw	r26, 0x09	; 9
    11f6:	ed 91       	ld	r30, X+
    11f8:	fc 91       	ld	r31, X
    11fa:	1a 97       	sbiw	r26, 0x0a	; 10
    11fc:	e8 0f       	add	r30, r24
    11fe:	f9 1f       	adc	r31, r25
    1200:	20 83       	st	Z, r18
			temp[i] = score2[i];
		}		
		strcat(score1, temp);

		strcpy(score2,"     ");
		for (int i = enemyPlayerCollisionCounter; i < 5; i++) {
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	85 30       	cpi	r24, 0x05	; 5
    1206:	91 05       	cpc	r25, r1
    1208:	a9 f7       	brne	.-22     	; 0x11f4 <_Z4loopj+0x982>
		    score2[i] = '+';
		}

		strcat(score1, score2);
    120a:	06 ec       	ldi	r16, 0xC6	; 198
    120c:	10 e0       	ldi	r17, 0x00	; 0
    120e:	f8 01       	movw	r30, r16
    1210:	61 85       	ldd	r22, Z+9	; 0x09
    1212:	72 85       	ldd	r23, Z+10	; 0x0a
    1214:	87 81       	ldd	r24, Z+7	; 0x07
    1216:	90 85       	ldd	r25, Z+8	; 0x08
    1218:	0e 94 09 0a 	call	0x1412	; 0x1412 <strcat>
		        
		return score1;
    121c:	d8 01       	movw	r26, r16
    121e:	17 96       	adiw	r26, 0x07	; 7
    1220:	0d 91       	ld	r16, X+
    1222:	1c 91       	ld	r17, X
    1224:	18 97       	sbiw	r26, 0x08	; 8
		}
	}

	static void displayLcd(char * upper,char * lower)
	{
		Lcd4_Clear();
    1226:	0e 94 08 02 	call	0x410	; 0x410 <_Z10Lcd4_Clearv>
		Lcd4_Set_Cursor(1, 0);
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z15Lcd4_Set_Cursorcc>
		Lcd4_Write_String(upper);
    1232:	c8 01       	movw	r24, r16
    1234:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17Lcd4_Write_StringPc>
		Lcd4_Set_Cursor(2, 0);
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	82 e0       	ldi	r24, 0x02	; 2
    123c:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z15Lcd4_Set_Cursorcc>
		Lcd4_Write_String(lower);
    1240:	ce 01       	movw	r24, r28
    1242:	41 96       	adiw	r24, 0x11	; 17
    1244:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17Lcd4_Write_StringPc>
    1248:	44 c0       	rjmp	.+136    	; 0x12d2 <_Z4loopj+0xa60>
		// adding number of kills
		strcpy(score1, "Kills:");
		itoa (enemyBulletCollisionCounter,score2,10);
		
		char temp[4] = "   ";
		for (int i = 0; i < strlen(score2); i++) {
    124a:	76 01       	movw	r14, r12
    124c:	10 e0       	ldi	r17, 0x00	; 0

		for (int i = 0; i < rows; i++)
		{
			for (int j = 0; j < cols; j++)
			{
				if (board[i][j])
    124e:	f7 01       	movw	r30, r14
    1250:	81 91       	ld	r24, Z+
    1252:	91 91       	ld	r25, Z+
    1254:	7f 01       	movw	r14, r30
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	89 f0       	breq	.+34     	; 0x127c <_Z4loopj+0xa0a>
				{
					//   ledPrint(j, 'B', i, 'A');  Moving to decoder printing
					//   //ledPrint(j, 'B', i, 'A');
					
					 if(board[i][j] == ENEMY_STATUS_IN_BOARD) {
    125a:	02 97       	sbiw	r24, 0x02	; 2
    125c:	31 f4       	brne	.+12     	; 0x126a <_Z4loopj+0x9f8>
						ledPrintUsingTwoDecoder(j, i,'R');
    125e:	42 e5       	ldi	r20, 0x52	; 82
    1260:	60 2f       	mov	r22, r16
    1262:	81 2f       	mov	r24, r17
    1264:	0e 94 55 00 	call	0xaa	; 0xaa <_Z23ledPrintUsingTwoDecoderccc>
    1268:	05 c0       	rjmp	.+10     	; 0x1274 <_Z4loopj+0xa02>
					 } else {
					 	ledPrintUsingTwoDecoder(j, i,'G');
    126a:	47 e4       	ldi	r20, 0x47	; 71
    126c:	60 2f       	mov	r22, r16
    126e:	81 2f       	mov	r24, r17
    1270:	0e 94 55 00 	call	0xaa	; 0xaa <_Z23ledPrintUsingTwoDecoderccc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1274:	f1 e2       	ldi	r31, 0x21	; 33
    1276:	fa 95       	dec	r31
    1278:	f1 f7       	brne	.-4      	; 0x1276 <_Z4loopj+0xa04>
    127a:	00 00       	nop
    127c:	1f 5f       	subi	r17, 0xFF	; 255
	{
		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++)
		{
			for (int j = 0; j < cols; j++)
    127e:	18 30       	cpi	r17, 0x08	; 8
    1280:	31 f7       	brne	.-52     	; 0x124e <_Z4loopj+0x9dc>
    1282:	10 e1       	ldi	r17, 0x10	; 16
    1284:	c1 0e       	add	r12, r17
    1286:	d1 1c       	adc	r13, r1
    1288:	0f 5f       	subi	r16, 0xFF	; 255
	//point by point scan
	static void displayBoardMatrixBackup(int board[BOARD_HEIGHT][BOARD_WIDTH])
	{
		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++)
    128a:	00 31       	cpi	r16, 0x10	; 16
    128c:	f1 f6       	brne	.-68     	; 0x124a <_Z4loopj+0x9d8>
    128e:	29 c0       	rjmp	.+82     	; 0x12e2 <_Z4loopj+0xa70>
	void shootNewBullet() {
		

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
			if(bulletPool[i].IsAlive() == false) {
    1290:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__data_end+0x36>
    1294:	88 23       	and	r24, r24
    1296:	09 f4       	brne	.+2      	; 0x129a <_Z4loopj+0xa28>
    1298:	11 cd       	rjmp	.-1502   	; 0xcbc <_Z4loopj+0x44a>
    129a:	e5 e0       	ldi	r30, 0x05	; 5
    129c:	f1 e0       	ldi	r31, 0x01	; 1

	void shootNewBullet() {
		

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	08 cd       	rjmp	.-1520   	; 0xcb4 <_Z4loopj+0x442>
		}

		// checking for collision of enemy with the player
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
			if (doesCollide(enemyPool[enemyCounter])) {
				enemyPlayerCollisionCounter++;
    12a4:	d2 01       	movw	r26, r4
    12a6:	12 96       	adiw	r26, 0x02	; 2
    12a8:	2d 91       	ld	r18, X+
    12aa:	3c 91       	ld	r19, X
    12ac:	13 97       	sbiw	r26, 0x03	; 3
    12ae:	2f 5f       	subi	r18, 0xFF	; 255
    12b0:	3f 4f       	sbci	r19, 0xFF	; 255
    12b2:	13 96       	adiw	r26, 0x03	; 3
    12b4:	3c 93       	st	X, r19
    12b6:	2e 93       	st	-X, r18
    12b8:	12 97       	sbiw	r26, 0x02	; 2
				
				
				killStreak = 0;
    12ba:	15 96       	adiw	r26, 0x05	; 5
    12bc:	1c 92       	st	X, r1
    12be:	1e 92       	st	-X, r1
    12c0:	14 97       	sbiw	r26, 0x04	; 4
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
    12c2:	ed a1       	ldd	r30, Y+37	; 0x25
    12c4:	fe a1       	ldd	r31, Y+38	; 0x26
    12c6:	17 8a       	std	Z+23, r1	; 0x17
				enemyPool[enemyCounter].setIsAlive(false);

				if(enemyPlayerCollisionCounter == 5) {
    12c8:	25 30       	cpi	r18, 0x05	; 5
    12ca:	31 05       	cpc	r19, r1
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <_Z4loopj+0xa5e>
    12ce:	c4 ce       	rjmp	.-632    	; 0x1058 <_Z4loopj+0x7e6>
    12d0:	64 ce       	rjmp	.-824    	; 0xf9a <_Z4loopj+0x728>
    12d2:	0f 2e       	mov	r0, r31
    12d4:	fc ea       	ldi	r31, 0xAC	; 172
    12d6:	cf 2e       	mov	r12, r31
    12d8:	f1 e0       	ldi	r31, 0x01	; 1
    12da:	df 2e       	mov	r13, r31
    12dc:	f0 2d       	mov	r31, r0
		// adding number of kills
		strcpy(score1, "Kills:");
		itoa (enemyBulletCollisionCounter,score2,10);
		
		char temp[4] = "   ";
		for (int i = 0; i < strlen(score2); i++) {
    12de:	00 e0       	ldi	r16, 0x00	; 0
    12e0:	b4 cf       	rjmp	.-152    	; 0x124a <_Z4loopj+0x9d8>
		gameController.updateBasedOnCollisions();//includes LCD updates
	}
	HardwareController::displayBoardMatrixBackup(gameController.displayBoard);


}
    12e2:	a8 96       	adiw	r28, 0x28	; 40
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	bf 90       	pop	r11
    1300:	af 90       	pop	r10
    1302:	9f 90       	pop	r9
    1304:	8f 90       	pop	r8
    1306:	7f 90       	pop	r7
    1308:	6f 90       	pop	r6
    130a:	5f 90       	pop	r5
    130c:	4f 90       	pop	r4
    130e:	3f 90       	pop	r3
    1310:	2f 90       	pop	r2
    1312:	08 95       	ret

00001314 <main>:

int main() {
	setup();
    1314:	0e 94 1c 04 	call	0x838	; 0x838 <_Z5setupv>
	unsigned int loopCount = 0;
    1318:	c0 e0       	ldi	r28, 0x00	; 0
    131a:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (true) {
		loopCount++;
    131c:	21 96       	adiw	r28, 0x01	; 1
	    loop(loopCount);
    131e:	ce 01       	movw	r24, r28
    1320:	0e 94 39 04 	call	0x872	; 0x872 <_Z4loopj>
    1324:	fb cf       	rjmp	.-10     	; 0x131c <main+0x8>

00001326 <_GLOBAL__sub_I__Z8ledPrintcccc>:
#include "headers/game/GameController.h"
#include "headers/utils/HardwareController.h"

GameController gameController;
    1326:	86 ec       	ldi	r24, 0xC6	; 198
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	0e 94 b2 02 	call	0x564	; 0x564 <_ZN14GameControllerC1Ev>
    132e:	08 95       	ret

00001330 <__umulhisi3>:
    1330:	a2 9f       	mul	r26, r18
    1332:	b0 01       	movw	r22, r0
    1334:	b3 9f       	mul	r27, r19
    1336:	c0 01       	movw	r24, r0
    1338:	a3 9f       	mul	r26, r19
    133a:	70 0d       	add	r23, r0
    133c:	81 1d       	adc	r24, r1
    133e:	11 24       	eor	r1, r1
    1340:	91 1d       	adc	r25, r1
    1342:	b2 9f       	mul	r27, r18
    1344:	70 0d       	add	r23, r0
    1346:	81 1d       	adc	r24, r1
    1348:	11 24       	eor	r1, r1
    134a:	91 1d       	adc	r25, r1
    134c:	08 95       	ret

0000134e <__tablejump2__>:
    134e:	ee 0f       	add	r30, r30
    1350:	ff 1f       	adc	r31, r31
    1352:	05 90       	lpm	r0, Z+
    1354:	f4 91       	lpm	r31, Z
    1356:	e0 2d       	mov	r30, r0
    1358:	09 94       	ijmp

0000135a <do_rand>:
    135a:	8f 92       	push	r8
    135c:	9f 92       	push	r9
    135e:	af 92       	push	r10
    1360:	bf 92       	push	r11
    1362:	cf 92       	push	r12
    1364:	df 92       	push	r13
    1366:	ef 92       	push	r14
    1368:	ff 92       	push	r15
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	ec 01       	movw	r28, r24
    1370:	68 81       	ld	r22, Y
    1372:	79 81       	ldd	r23, Y+1	; 0x01
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	9b 81       	ldd	r25, Y+3	; 0x03
    1378:	61 15       	cp	r22, r1
    137a:	71 05       	cpc	r23, r1
    137c:	81 05       	cpc	r24, r1
    137e:	91 05       	cpc	r25, r1
    1380:	21 f4       	brne	.+8      	; 0x138a <do_rand+0x30>
    1382:	64 e2       	ldi	r22, 0x24	; 36
    1384:	79 ed       	ldi	r23, 0xD9	; 217
    1386:	8b e5       	ldi	r24, 0x5B	; 91
    1388:	97 e0       	ldi	r25, 0x07	; 7
    138a:	2d e1       	ldi	r18, 0x1D	; 29
    138c:	33 ef       	ldi	r19, 0xF3	; 243
    138e:	41 e0       	ldi	r20, 0x01	; 1
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	0e 94 49 0a 	call	0x1492	; 0x1492 <__divmodsi4>
    1396:	49 01       	movw	r8, r18
    1398:	5a 01       	movw	r10, r20
    139a:	9b 01       	movw	r18, r22
    139c:	ac 01       	movw	r20, r24
    139e:	a7 ea       	ldi	r26, 0xA7	; 167
    13a0:	b1 e4       	ldi	r27, 0x41	; 65
    13a2:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__muluhisi3>
    13a6:	6b 01       	movw	r12, r22
    13a8:	7c 01       	movw	r14, r24
    13aa:	ac ee       	ldi	r26, 0xEC	; 236
    13ac:	b4 ef       	ldi	r27, 0xF4	; 244
    13ae:	a5 01       	movw	r20, r10
    13b0:	94 01       	movw	r18, r8
    13b2:	0e 94 76 0a 	call	0x14ec	; 0x14ec <__mulohisi3>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	8c 0d       	add	r24, r12
    13bc:	9d 1d       	adc	r25, r13
    13be:	ae 1d       	adc	r26, r14
    13c0:	bf 1d       	adc	r27, r15
    13c2:	b7 ff       	sbrs	r27, 7
    13c4:	03 c0       	rjmp	.+6      	; 0x13cc <do_rand+0x72>
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	a1 09       	sbc	r26, r1
    13ca:	b0 48       	sbci	r27, 0x80	; 128
    13cc:	88 83       	st	Y, r24
    13ce:	99 83       	std	Y+1, r25	; 0x01
    13d0:	aa 83       	std	Y+2, r26	; 0x02
    13d2:	bb 83       	std	Y+3, r27	; 0x03
    13d4:	9f 77       	andi	r25, 0x7F	; 127
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	ff 90       	pop	r15
    13dc:	ef 90       	pop	r14
    13de:	df 90       	pop	r13
    13e0:	cf 90       	pop	r12
    13e2:	bf 90       	pop	r11
    13e4:	af 90       	pop	r10
    13e6:	9f 90       	pop	r9
    13e8:	8f 90       	pop	r8
    13ea:	08 95       	ret

000013ec <rand_r>:
    13ec:	0e 94 ad 09 	call	0x135a	; 0x135a <do_rand>
    13f0:	08 95       	ret

000013f2 <rand>:
    13f2:	80 e6       	ldi	r24, 0x60	; 96
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	0e 94 ad 09 	call	0x135a	; 0x135a <do_rand>
    13fa:	08 95       	ret

000013fc <srand>:
    13fc:	a0 e0       	ldi	r26, 0x00	; 0
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    1404:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
    1408:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
    140c:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
    1410:	08 95       	ret

00001412 <strcat>:
    1412:	fb 01       	movw	r30, r22
    1414:	dc 01       	movw	r26, r24
    1416:	0d 90       	ld	r0, X+
    1418:	00 20       	and	r0, r0
    141a:	e9 f7       	brne	.-6      	; 0x1416 <strcat+0x4>
    141c:	11 97       	sbiw	r26, 0x01	; 1
    141e:	01 90       	ld	r0, Z+
    1420:	0d 92       	st	X+, r0
    1422:	00 20       	and	r0, r0
    1424:	e1 f7       	brne	.-8      	; 0x141e <strcat+0xc>
    1426:	08 95       	ret

00001428 <__itoa_ncheck>:
    1428:	bb 27       	eor	r27, r27
    142a:	4a 30       	cpi	r20, 0x0A	; 10
    142c:	31 f4       	brne	.+12     	; 0x143a <__itoa_ncheck+0x12>
    142e:	99 23       	and	r25, r25
    1430:	22 f4       	brpl	.+8      	; 0x143a <__itoa_ncheck+0x12>
    1432:	bd e2       	ldi	r27, 0x2D	; 45
    1434:	90 95       	com	r25
    1436:	81 95       	neg	r24
    1438:	9f 4f       	sbci	r25, 0xFF	; 255
    143a:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__utoa_common>

0000143e <__utoa_ncheck>:
    143e:	bb 27       	eor	r27, r27

00001440 <__utoa_common>:
    1440:	fb 01       	movw	r30, r22
    1442:	55 27       	eor	r21, r21
    1444:	aa 27       	eor	r26, r26
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	aa 1f       	adc	r26, r26
    144c:	a4 17       	cp	r26, r20
    144e:	10 f0       	brcs	.+4      	; 0x1454 <__utoa_common+0x14>
    1450:	a4 1b       	sub	r26, r20
    1452:	83 95       	inc	r24
    1454:	50 51       	subi	r21, 0x10	; 16
    1456:	b9 f7       	brne	.-18     	; 0x1446 <__utoa_common+0x6>
    1458:	a0 5d       	subi	r26, 0xD0	; 208
    145a:	aa 33       	cpi	r26, 0x3A	; 58
    145c:	08 f0       	brcs	.+2      	; 0x1460 <__utoa_common+0x20>
    145e:	a9 5d       	subi	r26, 0xD9	; 217
    1460:	a1 93       	st	Z+, r26
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	79 f7       	brne	.-34     	; 0x1444 <__utoa_common+0x4>
    1466:	b1 11       	cpse	r27, r1
    1468:	b1 93       	st	Z+, r27
    146a:	11 92       	st	Z+, r1
    146c:	cb 01       	movw	r24, r22
    146e:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <strrev>

00001472 <strrev>:
    1472:	dc 01       	movw	r26, r24
    1474:	fc 01       	movw	r30, r24
    1476:	67 2f       	mov	r22, r23
    1478:	71 91       	ld	r23, Z+
    147a:	77 23       	and	r23, r23
    147c:	e1 f7       	brne	.-8      	; 0x1476 <strrev+0x4>
    147e:	32 97       	sbiw	r30, 0x02	; 2
    1480:	04 c0       	rjmp	.+8      	; 0x148a <strrev+0x18>
    1482:	7c 91       	ld	r23, X
    1484:	6d 93       	st	X+, r22
    1486:	70 83       	st	Z, r23
    1488:	62 91       	ld	r22, -Z
    148a:	ae 17       	cp	r26, r30
    148c:	bf 07       	cpc	r27, r31
    148e:	c8 f3       	brcs	.-14     	; 0x1482 <strrev+0x10>
    1490:	08 95       	ret

00001492 <__divmodsi4>:
    1492:	05 2e       	mov	r0, r21
    1494:	97 fb       	bst	r25, 7
    1496:	1e f4       	brtc	.+6      	; 0x149e <__divmodsi4+0xc>
    1498:	00 94       	com	r0
    149a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__negsi2>
    149e:	57 fd       	sbrc	r21, 7
    14a0:	07 d0       	rcall	.+14     	; 0x14b0 <__divmodsi4_neg2>
    14a2:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__udivmodsi4>
    14a6:	07 fc       	sbrc	r0, 7
    14a8:	03 d0       	rcall	.+6      	; 0x14b0 <__divmodsi4_neg2>
    14aa:	4e f4       	brtc	.+18     	; 0x14be <__divmodsi4_exit>
    14ac:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__negsi2>

000014b0 <__divmodsi4_neg2>:
    14b0:	50 95       	com	r21
    14b2:	40 95       	com	r20
    14b4:	30 95       	com	r19
    14b6:	21 95       	neg	r18
    14b8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ba:	4f 4f       	sbci	r20, 0xFF	; 255
    14bc:	5f 4f       	sbci	r21, 0xFF	; 255

000014be <__divmodsi4_exit>:
    14be:	08 95       	ret

000014c0 <__negsi2>:
    14c0:	90 95       	com	r25
    14c2:	80 95       	com	r24
    14c4:	70 95       	com	r23
    14c6:	61 95       	neg	r22
    14c8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ca:	8f 4f       	sbci	r24, 0xFF	; 255
    14cc:	9f 4f       	sbci	r25, 0xFF	; 255
    14ce:	08 95       	ret

000014d0 <__muluhisi3>:
    14d0:	0e 94 98 09 	call	0x1330	; 0x1330 <__umulhisi3>
    14d4:	a5 9f       	mul	r26, r21
    14d6:	90 0d       	add	r25, r0
    14d8:	b4 9f       	mul	r27, r20
    14da:	90 0d       	add	r25, r0
    14dc:	a4 9f       	mul	r26, r20
    14de:	80 0d       	add	r24, r0
    14e0:	91 1d       	adc	r25, r1
    14e2:	11 24       	eor	r1, r1
    14e4:	08 95       	ret

000014e6 <__mulshisi3>:
    14e6:	b7 ff       	sbrs	r27, 7
    14e8:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__muluhisi3>

000014ec <__mulohisi3>:
    14ec:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__muluhisi3>
    14f0:	82 1b       	sub	r24, r18
    14f2:	93 0b       	sbc	r25, r19
    14f4:	08 95       	ret

000014f6 <__udivmodsi4>:
    14f6:	a1 e2       	ldi	r26, 0x21	; 33
    14f8:	1a 2e       	mov	r1, r26
    14fa:	aa 1b       	sub	r26, r26
    14fc:	bb 1b       	sub	r27, r27
    14fe:	fd 01       	movw	r30, r26
    1500:	0d c0       	rjmp	.+26     	; 0x151c <__udivmodsi4_ep>

00001502 <__udivmodsi4_loop>:
    1502:	aa 1f       	adc	r26, r26
    1504:	bb 1f       	adc	r27, r27
    1506:	ee 1f       	adc	r30, r30
    1508:	ff 1f       	adc	r31, r31
    150a:	a2 17       	cp	r26, r18
    150c:	b3 07       	cpc	r27, r19
    150e:	e4 07       	cpc	r30, r20
    1510:	f5 07       	cpc	r31, r21
    1512:	20 f0       	brcs	.+8      	; 0x151c <__udivmodsi4_ep>
    1514:	a2 1b       	sub	r26, r18
    1516:	b3 0b       	sbc	r27, r19
    1518:	e4 0b       	sbc	r30, r20
    151a:	f5 0b       	sbc	r31, r21

0000151c <__udivmodsi4_ep>:
    151c:	66 1f       	adc	r22, r22
    151e:	77 1f       	adc	r23, r23
    1520:	88 1f       	adc	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	1a 94       	dec	r1
    1526:	69 f7       	brne	.-38     	; 0x1502 <__udivmodsi4_loop>
    1528:	60 95       	com	r22
    152a:	70 95       	com	r23
    152c:	80 95       	com	r24
    152e:	90 95       	com	r25
    1530:	9b 01       	movw	r18, r22
    1532:	ac 01       	movw	r20, r24
    1534:	bd 01       	movw	r22, r26
    1536:	cf 01       	movw	r24, r30
    1538:	08 95       	ret

0000153a <_exit>:
    153a:	f8 94       	cli

0000153c <__stop_program>:
    153c:	ff cf       	rjmp	.-2      	; 0x153c <__stop_program>
