
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001424  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00001424  000014b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001e1  008000c6  008000c6  0000151e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000151e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001550  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004711  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a15  00000000  00000000  00005d95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001288  00000000  00000000  000067aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00007a34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018db  00000000  00000000  00007d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f44  00000000  00000000  000095ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000b533  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	06 09       	sbc	r16, r6

00000056 <__ctors_end>:
      56:	11 24       	eor	r1, r1
      58:	1f be       	out	0x3f, r1	; 63
      5a:	cf e5       	ldi	r28, 0x5F	; 95
      5c:	d8 e0       	ldi	r29, 0x08	; 8
      5e:	de bf       	out	0x3e, r29	; 62
      60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
      62:	10 e0       	ldi	r17, 0x00	; 0
      64:	a0 e6       	ldi	r26, 0x60	; 96
      66:	b0 e0       	ldi	r27, 0x00	; 0
      68:	e4 e2       	ldi	r30, 0x24	; 36
      6a:	f4 e1       	ldi	r31, 0x14	; 20
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
      6e:	05 90       	lpm	r0, Z+
      70:	0d 92       	st	X+, r0
      72:	a6 3c       	cpi	r26, 0xC6	; 198
      74:	b1 07       	cpc	r27, r17
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
      78:	22 e0       	ldi	r18, 0x02	; 2
      7a:	a6 ec       	ldi	r26, 0xC6	; 198
      7c:	b0 e0       	ldi	r27, 0x00	; 0
      7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
      80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
      82:	a7 3a       	cpi	r26, 0xA7	; 167
      84:	b2 07       	cpc	r27, r18
      86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
      88:	10 e0       	ldi	r17, 0x00	; 0
      8a:	cb e2       	ldi	r28, 0x2B	; 43
      8c:	d0 e0       	ldi	r29, 0x00	; 0
      8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
      90:	21 97       	sbiw	r28, 0x01	; 1
      92:	fe 01       	movw	r30, r28
      94:	0e 94 1a 09 	call	0x1234	; 0x1234 <__tablejump2__>
      98:	ca 32       	cpi	r28, 0x2A	; 42
      9a:	d1 07       	cpc	r29, r17
      9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
      9e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <main>
      a2:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <_exit>

000000a6 <__bad_interrupt>:
      a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z23ledPrintUsingTwoDecoderccc>:
}

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
	Lcd4_Cmd(0x08);
      aa:	9f e0       	ldi	r25, 0x0F	; 15
      ac:	96 1b       	sub	r25, r22
      ae:	42 35       	cpi	r20, 0x52	; 82
      b0:	21 f4       	brne	.+8      	; 0xba <_Z23ledPrintUsingTwoDecoderccc+0x10>
      b2:	88 60       	ori	r24, 0x08	; 8
      b4:	82 95       	swap	r24
      b6:	80 7f       	andi	r24, 0xF0	; 240
      b8:	03 c0       	rjmp	.+6      	; 0xc0 <_Z23ledPrintUsingTwoDecoderccc+0x16>
      ba:	87 7f       	andi	r24, 0xF7	; 247
      bc:	82 95       	swap	r24
      be:	80 7f       	andi	r24, 0xF0	; 240
      c0:	89 2b       	or	r24, r25
      c2:	88 bb       	out	0x18, r24	; 24
      c4:	08 95       	ret

000000c6 <_Z9pinChangeii>:
      c6:	67 2b       	or	r22, r23
      c8:	09 f0       	breq	.+2      	; 0xcc <_Z9pinChangeii+0x6>
      ca:	9f c0       	rjmp	.+318    	; 0x20a <_Z9pinChangeii+0x144>
      cc:	00 97       	sbiw	r24, 0x00	; 0
      ce:	11 f4       	brne	.+4      	; 0xd4 <_Z9pinChangeii+0xe>
      d0:	d8 98       	cbi	0x1b, 0	; 27
      d2:	08 95       	ret
      d4:	81 30       	cpi	r24, 0x01	; 1
      d6:	91 05       	cpc	r25, r1
      d8:	11 f4       	brne	.+4      	; 0xde <_Z9pinChangeii+0x18>
      da:	d9 98       	cbi	0x1b, 1	; 27
      dc:	08 95       	ret
      de:	82 30       	cpi	r24, 0x02	; 2
      e0:	91 05       	cpc	r25, r1
      e2:	11 f4       	brne	.+4      	; 0xe8 <_Z9pinChangeii+0x22>
      e4:	da 98       	cbi	0x1b, 2	; 27
      e6:	08 95       	ret
      e8:	83 30       	cpi	r24, 0x03	; 3
      ea:	91 05       	cpc	r25, r1
      ec:	11 f4       	brne	.+4      	; 0xf2 <_Z9pinChangeii+0x2c>
      ee:	db 98       	cbi	0x1b, 3	; 27
      f0:	08 95       	ret
      f2:	84 30       	cpi	r24, 0x04	; 4
      f4:	91 05       	cpc	r25, r1
      f6:	11 f4       	brne	.+4      	; 0xfc <_Z9pinChangeii+0x36>
      f8:	dc 98       	cbi	0x1b, 4	; 27
      fa:	08 95       	ret
      fc:	85 30       	cpi	r24, 0x05	; 5
      fe:	91 05       	cpc	r25, r1
     100:	11 f4       	brne	.+4      	; 0x106 <_Z9pinChangeii+0x40>
     102:	dd 98       	cbi	0x1b, 5	; 27
     104:	08 95       	ret
     106:	86 30       	cpi	r24, 0x06	; 6
     108:	91 05       	cpc	r25, r1
     10a:	11 f4       	brne	.+4      	; 0x110 <_Z9pinChangeii+0x4a>
     10c:	de 98       	cbi	0x1b, 6	; 27
     10e:	08 95       	ret
     110:	87 30       	cpi	r24, 0x07	; 7
     112:	91 05       	cpc	r25, r1
     114:	11 f4       	brne	.+4      	; 0x11a <_Z9pinChangeii+0x54>
     116:	df 98       	cbi	0x1b, 7	; 27
     118:	08 95       	ret
     11a:	8a 30       	cpi	r24, 0x0A	; 10
     11c:	91 05       	cpc	r25, r1
     11e:	11 f4       	brne	.+4      	; 0x124 <_Z9pinChangeii+0x5e>
     120:	c0 98       	cbi	0x18, 0	; 24
     122:	08 95       	ret
     124:	8b 30       	cpi	r24, 0x0B	; 11
     126:	91 05       	cpc	r25, r1
     128:	11 f4       	brne	.+4      	; 0x12e <_Z9pinChangeii+0x68>
     12a:	c1 98       	cbi	0x18, 1	; 24
     12c:	08 95       	ret
     12e:	8c 30       	cpi	r24, 0x0C	; 12
     130:	91 05       	cpc	r25, r1
     132:	11 f4       	brne	.+4      	; 0x138 <_Z9pinChangeii+0x72>
     134:	c2 98       	cbi	0x18, 2	; 24
     136:	08 95       	ret
     138:	8d 30       	cpi	r24, 0x0D	; 13
     13a:	91 05       	cpc	r25, r1
     13c:	11 f4       	brne	.+4      	; 0x142 <_Z9pinChangeii+0x7c>
     13e:	c3 98       	cbi	0x18, 3	; 24
     140:	08 95       	ret
     142:	8e 30       	cpi	r24, 0x0E	; 14
     144:	91 05       	cpc	r25, r1
     146:	11 f4       	brne	.+4      	; 0x14c <_Z9pinChangeii+0x86>
     148:	c4 98       	cbi	0x18, 4	; 24
     14a:	08 95       	ret
     14c:	8f 30       	cpi	r24, 0x0F	; 15
     14e:	91 05       	cpc	r25, r1
     150:	11 f4       	brne	.+4      	; 0x156 <_Z9pinChangeii+0x90>
     152:	c5 98       	cbi	0x18, 5	; 24
     154:	08 95       	ret
     156:	80 31       	cpi	r24, 0x10	; 16
     158:	91 05       	cpc	r25, r1
     15a:	11 f4       	brne	.+4      	; 0x160 <_Z9pinChangeii+0x9a>
     15c:	c6 98       	cbi	0x18, 6	; 24
     15e:	08 95       	ret
     160:	81 31       	cpi	r24, 0x11	; 17
     162:	91 05       	cpc	r25, r1
     164:	11 f4       	brne	.+4      	; 0x16a <_Z9pinChangeii+0xa4>
     166:	c7 98       	cbi	0x18, 7	; 24
     168:	08 95       	ret
     16a:	84 31       	cpi	r24, 0x14	; 20
     16c:	91 05       	cpc	r25, r1
     16e:	11 f4       	brne	.+4      	; 0x174 <_Z9pinChangeii+0xae>
     170:	a8 98       	cbi	0x15, 0	; 21
     172:	08 95       	ret
     174:	85 31       	cpi	r24, 0x15	; 21
     176:	91 05       	cpc	r25, r1
     178:	11 f4       	brne	.+4      	; 0x17e <_Z9pinChangeii+0xb8>
     17a:	a9 98       	cbi	0x15, 1	; 21
     17c:	08 95       	ret
     17e:	86 31       	cpi	r24, 0x16	; 22
     180:	91 05       	cpc	r25, r1
     182:	11 f4       	brne	.+4      	; 0x188 <_Z9pinChangeii+0xc2>
     184:	aa 98       	cbi	0x15, 2	; 21
     186:	08 95       	ret
     188:	87 31       	cpi	r24, 0x17	; 23
     18a:	91 05       	cpc	r25, r1
     18c:	11 f4       	brne	.+4      	; 0x192 <_Z9pinChangeii+0xcc>
     18e:	ab 98       	cbi	0x15, 3	; 21
     190:	08 95       	ret
     192:	88 31       	cpi	r24, 0x18	; 24
     194:	91 05       	cpc	r25, r1
     196:	11 f4       	brne	.+4      	; 0x19c <_Z9pinChangeii+0xd6>
     198:	ac 98       	cbi	0x15, 4	; 21
     19a:	08 95       	ret
     19c:	89 31       	cpi	r24, 0x19	; 25
     19e:	91 05       	cpc	r25, r1
     1a0:	11 f4       	brne	.+4      	; 0x1a6 <_Z9pinChangeii+0xe0>
     1a2:	ad 98       	cbi	0x15, 5	; 21
     1a4:	08 95       	ret
     1a6:	8a 31       	cpi	r24, 0x1A	; 26
     1a8:	91 05       	cpc	r25, r1
     1aa:	11 f4       	brne	.+4      	; 0x1b0 <_Z9pinChangeii+0xea>
     1ac:	ae 98       	cbi	0x15, 6	; 21
     1ae:	08 95       	ret
     1b0:	8b 31       	cpi	r24, 0x1B	; 27
     1b2:	91 05       	cpc	r25, r1
     1b4:	11 f4       	brne	.+4      	; 0x1ba <_Z9pinChangeii+0xf4>
     1b6:	af 98       	cbi	0x15, 7	; 21
     1b8:	08 95       	ret
     1ba:	8e 31       	cpi	r24, 0x1E	; 30
     1bc:	91 05       	cpc	r25, r1
     1be:	11 f4       	brne	.+4      	; 0x1c4 <_Z9pinChangeii+0xfe>
     1c0:	90 98       	cbi	0x12, 0	; 18
     1c2:	08 95       	ret
     1c4:	8f 31       	cpi	r24, 0x1F	; 31
     1c6:	91 05       	cpc	r25, r1
     1c8:	11 f4       	brne	.+4      	; 0x1ce <_Z9pinChangeii+0x108>
     1ca:	91 98       	cbi	0x12, 1	; 18
     1cc:	08 95       	ret
     1ce:	80 32       	cpi	r24, 0x20	; 32
     1d0:	91 05       	cpc	r25, r1
     1d2:	11 f4       	brne	.+4      	; 0x1d8 <_Z9pinChangeii+0x112>
     1d4:	92 98       	cbi	0x12, 2	; 18
     1d6:	08 95       	ret
     1d8:	81 32       	cpi	r24, 0x21	; 33
     1da:	91 05       	cpc	r25, r1
     1dc:	11 f4       	brne	.+4      	; 0x1e2 <_Z9pinChangeii+0x11c>
     1de:	93 98       	cbi	0x12, 3	; 18
     1e0:	08 95       	ret
     1e2:	82 32       	cpi	r24, 0x22	; 34
     1e4:	91 05       	cpc	r25, r1
     1e6:	11 f4       	brne	.+4      	; 0x1ec <_Z9pinChangeii+0x126>
     1e8:	94 98       	cbi	0x12, 4	; 18
     1ea:	08 95       	ret
     1ec:	83 32       	cpi	r24, 0x23	; 35
     1ee:	91 05       	cpc	r25, r1
     1f0:	11 f4       	brne	.+4      	; 0x1f6 <_Z9pinChangeii+0x130>
     1f2:	95 98       	cbi	0x12, 5	; 18
     1f4:	08 95       	ret
     1f6:	84 32       	cpi	r24, 0x24	; 36
     1f8:	91 05       	cpc	r25, r1
     1fa:	11 f4       	brne	.+4      	; 0x200 <_Z9pinChangeii+0x13a>
     1fc:	96 98       	cbi	0x12, 6	; 18
     1fe:	08 95       	ret
     200:	85 97       	sbiw	r24, 0x25	; 37
     202:	09 f0       	breq	.+2      	; 0x206 <_Z9pinChangeii+0x140>
     204:	9f c0       	rjmp	.+318    	; 0x344 <_Z9pinChangeii+0x27e>
     206:	97 98       	cbi	0x12, 7	; 18
     208:	08 95       	ret
     20a:	00 97       	sbiw	r24, 0x00	; 0
     20c:	11 f4       	brne	.+4      	; 0x212 <_Z9pinChangeii+0x14c>
     20e:	d8 9a       	sbi	0x1b, 0	; 27
     210:	08 95       	ret
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	91 05       	cpc	r25, r1
     216:	11 f4       	brne	.+4      	; 0x21c <_Z9pinChangeii+0x156>
     218:	d9 9a       	sbi	0x1b, 1	; 27
     21a:	08 95       	ret
     21c:	82 30       	cpi	r24, 0x02	; 2
     21e:	91 05       	cpc	r25, r1
     220:	11 f4       	brne	.+4      	; 0x226 <_Z9pinChangeii+0x160>
     222:	da 9a       	sbi	0x1b, 2	; 27
     224:	08 95       	ret
     226:	83 30       	cpi	r24, 0x03	; 3
     228:	91 05       	cpc	r25, r1
     22a:	11 f4       	brne	.+4      	; 0x230 <_Z9pinChangeii+0x16a>
     22c:	db 9a       	sbi	0x1b, 3	; 27
     22e:	08 95       	ret
     230:	84 30       	cpi	r24, 0x04	; 4
     232:	91 05       	cpc	r25, r1
     234:	11 f4       	brne	.+4      	; 0x23a <_Z9pinChangeii+0x174>
     236:	dc 9a       	sbi	0x1b, 4	; 27
     238:	08 95       	ret
     23a:	85 30       	cpi	r24, 0x05	; 5
     23c:	91 05       	cpc	r25, r1
     23e:	11 f4       	brne	.+4      	; 0x244 <_Z9pinChangeii+0x17e>
     240:	dd 9a       	sbi	0x1b, 5	; 27
     242:	08 95       	ret
     244:	86 30       	cpi	r24, 0x06	; 6
     246:	91 05       	cpc	r25, r1
     248:	11 f4       	brne	.+4      	; 0x24e <_Z9pinChangeii+0x188>
     24a:	de 9a       	sbi	0x1b, 6	; 27
     24c:	08 95       	ret
     24e:	87 30       	cpi	r24, 0x07	; 7
     250:	91 05       	cpc	r25, r1
     252:	11 f4       	brne	.+4      	; 0x258 <_Z9pinChangeii+0x192>
     254:	df 9a       	sbi	0x1b, 7	; 27
     256:	08 95       	ret
     258:	8a 30       	cpi	r24, 0x0A	; 10
     25a:	91 05       	cpc	r25, r1
     25c:	11 f4       	brne	.+4      	; 0x262 <_Z9pinChangeii+0x19c>
     25e:	c0 9a       	sbi	0x18, 0	; 24
     260:	08 95       	ret
     262:	8b 30       	cpi	r24, 0x0B	; 11
     264:	91 05       	cpc	r25, r1
     266:	11 f4       	brne	.+4      	; 0x26c <_Z9pinChangeii+0x1a6>
     268:	c1 9a       	sbi	0x18, 1	; 24
     26a:	08 95       	ret
     26c:	8c 30       	cpi	r24, 0x0C	; 12
     26e:	91 05       	cpc	r25, r1
     270:	11 f4       	brne	.+4      	; 0x276 <_Z9pinChangeii+0x1b0>
     272:	c2 9a       	sbi	0x18, 2	; 24
     274:	08 95       	ret
     276:	8d 30       	cpi	r24, 0x0D	; 13
     278:	91 05       	cpc	r25, r1
     27a:	11 f4       	brne	.+4      	; 0x280 <_Z9pinChangeii+0x1ba>
     27c:	c3 9a       	sbi	0x18, 3	; 24
     27e:	08 95       	ret
     280:	8e 30       	cpi	r24, 0x0E	; 14
     282:	91 05       	cpc	r25, r1
     284:	11 f4       	brne	.+4      	; 0x28a <_Z9pinChangeii+0x1c4>
     286:	c4 9a       	sbi	0x18, 4	; 24
     288:	08 95       	ret
     28a:	8f 30       	cpi	r24, 0x0F	; 15
     28c:	91 05       	cpc	r25, r1
     28e:	11 f4       	brne	.+4      	; 0x294 <_Z9pinChangeii+0x1ce>
     290:	c5 9a       	sbi	0x18, 5	; 24
     292:	08 95       	ret
     294:	80 31       	cpi	r24, 0x10	; 16
     296:	91 05       	cpc	r25, r1
     298:	11 f4       	brne	.+4      	; 0x29e <_Z9pinChangeii+0x1d8>
     29a:	c6 9a       	sbi	0x18, 6	; 24
     29c:	08 95       	ret
     29e:	81 31       	cpi	r24, 0x11	; 17
     2a0:	91 05       	cpc	r25, r1
     2a2:	11 f4       	brne	.+4      	; 0x2a8 <_Z9pinChangeii+0x1e2>
     2a4:	c7 9a       	sbi	0x18, 7	; 24
     2a6:	08 95       	ret
     2a8:	84 31       	cpi	r24, 0x14	; 20
     2aa:	91 05       	cpc	r25, r1
     2ac:	11 f4       	brne	.+4      	; 0x2b2 <_Z9pinChangeii+0x1ec>
     2ae:	a8 9a       	sbi	0x15, 0	; 21
     2b0:	08 95       	ret
     2b2:	85 31       	cpi	r24, 0x15	; 21
     2b4:	91 05       	cpc	r25, r1
     2b6:	11 f4       	brne	.+4      	; 0x2bc <_Z9pinChangeii+0x1f6>
     2b8:	a9 9a       	sbi	0x15, 1	; 21
     2ba:	08 95       	ret
     2bc:	86 31       	cpi	r24, 0x16	; 22
     2be:	91 05       	cpc	r25, r1
     2c0:	11 f4       	brne	.+4      	; 0x2c6 <_Z9pinChangeii+0x200>
     2c2:	aa 9a       	sbi	0x15, 2	; 21
     2c4:	08 95       	ret
     2c6:	87 31       	cpi	r24, 0x17	; 23
     2c8:	91 05       	cpc	r25, r1
     2ca:	11 f4       	brne	.+4      	; 0x2d0 <_Z9pinChangeii+0x20a>
     2cc:	ab 9a       	sbi	0x15, 3	; 21
     2ce:	08 95       	ret
     2d0:	88 31       	cpi	r24, 0x18	; 24
     2d2:	91 05       	cpc	r25, r1
     2d4:	11 f4       	brne	.+4      	; 0x2da <_Z9pinChangeii+0x214>
     2d6:	ac 9a       	sbi	0x15, 4	; 21
     2d8:	08 95       	ret
     2da:	89 31       	cpi	r24, 0x19	; 25
     2dc:	91 05       	cpc	r25, r1
     2de:	11 f4       	brne	.+4      	; 0x2e4 <_Z9pinChangeii+0x21e>
     2e0:	ad 9a       	sbi	0x15, 5	; 21
     2e2:	08 95       	ret
     2e4:	8a 31       	cpi	r24, 0x1A	; 26
     2e6:	91 05       	cpc	r25, r1
     2e8:	11 f4       	brne	.+4      	; 0x2ee <_Z9pinChangeii+0x228>
     2ea:	ae 9a       	sbi	0x15, 6	; 21
     2ec:	08 95       	ret
     2ee:	8b 31       	cpi	r24, 0x1B	; 27
     2f0:	91 05       	cpc	r25, r1
     2f2:	11 f4       	brne	.+4      	; 0x2f8 <_Z9pinChangeii+0x232>
     2f4:	af 9a       	sbi	0x15, 7	; 21
     2f6:	08 95       	ret
     2f8:	8e 31       	cpi	r24, 0x1E	; 30
     2fa:	91 05       	cpc	r25, r1
     2fc:	11 f4       	brne	.+4      	; 0x302 <_Z9pinChangeii+0x23c>
     2fe:	90 9a       	sbi	0x12, 0	; 18
     300:	08 95       	ret
     302:	8f 31       	cpi	r24, 0x1F	; 31
     304:	91 05       	cpc	r25, r1
     306:	11 f4       	brne	.+4      	; 0x30c <_Z9pinChangeii+0x246>
     308:	91 9a       	sbi	0x12, 1	; 18
     30a:	08 95       	ret
     30c:	80 32       	cpi	r24, 0x20	; 32
     30e:	91 05       	cpc	r25, r1
     310:	11 f4       	brne	.+4      	; 0x316 <_Z9pinChangeii+0x250>
     312:	92 9a       	sbi	0x12, 2	; 18
     314:	08 95       	ret
     316:	81 32       	cpi	r24, 0x21	; 33
     318:	91 05       	cpc	r25, r1
     31a:	11 f4       	brne	.+4      	; 0x320 <_Z9pinChangeii+0x25a>
     31c:	93 9a       	sbi	0x12, 3	; 18
     31e:	08 95       	ret
     320:	82 32       	cpi	r24, 0x22	; 34
     322:	91 05       	cpc	r25, r1
     324:	11 f4       	brne	.+4      	; 0x32a <_Z9pinChangeii+0x264>
     326:	94 9a       	sbi	0x12, 4	; 18
     328:	08 95       	ret
     32a:	83 32       	cpi	r24, 0x23	; 35
     32c:	91 05       	cpc	r25, r1
     32e:	11 f4       	brne	.+4      	; 0x334 <_Z9pinChangeii+0x26e>
     330:	95 9a       	sbi	0x12, 5	; 18
     332:	08 95       	ret
     334:	84 32       	cpi	r24, 0x24	; 36
     336:	91 05       	cpc	r25, r1
     338:	11 f4       	brne	.+4      	; 0x33e <_Z9pinChangeii+0x278>
     33a:	96 9a       	sbi	0x12, 6	; 18
     33c:	08 95       	ret
     33e:	85 97       	sbiw	r24, 0x25	; 37
     340:	09 f4       	brne	.+2      	; 0x344 <_Z9pinChangeii+0x27e>
     342:	97 9a       	sbi	0x12, 7	; 18
     344:	08 95       	ret

00000346 <_Z9Lcd4_Portc>:
     346:	cf 93       	push	r28
     348:	c8 2f       	mov	r28, r24
     34a:	80 ff       	sbrs	r24, 0
     34c:	07 c0       	rjmp	.+14     	; 0x35c <_Z9Lcd4_Portc+0x16>
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	82 e2       	ldi	r24, 0x22	; 34
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     35a:	06 c0       	rjmp	.+12     	; 0x368 <_Z9Lcd4_Portc+0x22>
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	82 e2       	ldi	r24, 0x22	; 34
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     368:	c1 ff       	sbrs	r28, 1
     36a:	07 c0       	rjmp	.+14     	; 0x37a <_Z9Lcd4_Portc+0x34>
     36c:	61 e0       	ldi	r22, 0x01	; 1
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	83 e2       	ldi	r24, 0x23	; 35
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     378:	06 c0       	rjmp	.+12     	; 0x386 <_Z9Lcd4_Portc+0x40>
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	70 e0       	ldi	r23, 0x00	; 0
     37e:	83 e2       	ldi	r24, 0x23	; 35
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     386:	c2 ff       	sbrs	r28, 2
     388:	07 c0       	rjmp	.+14     	; 0x398 <_Z9Lcd4_Portc+0x52>
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	84 e2       	ldi	r24, 0x24	; 36
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_Z9Lcd4_Portc+0x5e>
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	84 e2       	ldi	r24, 0x24	; 36
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     3a4:	c3 ff       	sbrs	r28, 3
     3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <_Z9Lcd4_Portc+0x70>
     3a8:	61 e0       	ldi	r22, 0x01	; 1
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	85 e2       	ldi	r24, 0x25	; 37
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <_Z9Lcd4_Portc+0x7c>
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	85 e2       	ldi	r24, 0x25	; 37
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <_Z8Lcd4_Cmdc>:
     3c6:	cf 93       	push	r28
     3c8:	c8 2f       	mov	r28, r24
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	8a e1       	ldi	r24, 0x1A	; 26
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     3d6:	8c 2f       	mov	r24, r28
     3d8:	0e 94 a3 01 	call	0x346	; 0x346 <_Z9Lcd4_Portc>
     3dc:	61 e0       	ldi	r22, 0x01	; 1
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	8b e1       	ldi	r24, 0x1B	; 27
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     3e8:	89 ef       	ldi	r24, 0xF9	; 249
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <_Z8Lcd4_Cmdc+0x26>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <_Z8Lcd4_Cmdc+0x2c>
     3f2:	00 00       	nop
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	8b e1       	ldi	r24, 0x1B	; 27
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     400:	89 ef       	ldi	r24, 0xF9	; 249
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     40a:	00 00       	nop
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <_Z10Lcd4_Clearv>:
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     41c:	08 95       	ret

0000041e <_Z15Lcd4_Set_Cursorcc>:
     41e:	cf 93       	push	r28
     420:	c6 2f       	mov	r28, r22
     422:	81 30       	cpi	r24, 0x01	; 1
     424:	59 f4       	brne	.+22     	; 0x43c <_Z15Lcd4_Set_Cursorcc+0x1e>
     426:	80 e8       	ldi	r24, 0x80	; 128
     428:	86 0f       	add	r24, r22
     42a:	82 95       	swap	r24
     42c:	8f 70       	andi	r24, 0x0F	; 15
     42e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     432:	8c 2f       	mov	r24, r28
     434:	8f 70       	andi	r24, 0x0F	; 15
     436:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     43a:	0c c0       	rjmp	.+24     	; 0x454 <_Z15Lcd4_Set_Cursorcc+0x36>
     43c:	82 30       	cpi	r24, 0x02	; 2
     43e:	51 f4       	brne	.+20     	; 0x454 <_Z15Lcd4_Set_Cursorcc+0x36>
     440:	80 ec       	ldi	r24, 0xC0	; 192
     442:	86 0f       	add	r24, r22
     444:	82 95       	swap	r24
     446:	8f 70       	andi	r24, 0x0F	; 15
     448:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     44c:	8c 2f       	mov	r24, r28
     44e:	8f 70       	andi	r24, 0x0F	; 15
     450:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <_Z9Lcd4_Initv>:
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	0e 94 a3 01 	call	0x346	; 0x346 <_Z9Lcd4_Portc>
     45e:	87 e8       	ldi	r24, 0x87	; 135
     460:	93 e1       	ldi	r25, 0x13	; 19
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <_Z9Lcd4_Initv+0xa>
     466:	00 c0       	rjmp	.+0      	; 0x468 <_Z9Lcd4_Initv+0x10>
     468:	00 00       	nop
     46a:	83 e0       	ldi	r24, 0x03	; 3
     46c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     470:	81 ee       	ldi	r24, 0xE1	; 225
     472:	94 e0       	ldi	r25, 0x04	; 4
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <_Z9Lcd4_Initv+0x1c>
     478:	00 c0       	rjmp	.+0      	; 0x47a <_Z9Lcd4_Initv+0x22>
     47a:	00 00       	nop
     47c:	83 e0       	ldi	r24, 0x03	; 3
     47e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     482:	8d eb       	ldi	r24, 0xBD	; 189
     484:	9a e0       	ldi	r25, 0x0A	; 10
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <_Z9Lcd4_Initv+0x2e>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <_Z9Lcd4_Initv+0x34>
     48c:	00 00       	nop
     48e:	83 e0       	ldi	r24, 0x03	; 3
     490:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     49a:	82 e0       	ldi	r24, 0x02	; 2
     49c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     4a0:	88 e0       	ldi	r24, 0x08	; 8
     4a2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     4ac:	8c e0       	ldi	r24, 0x0C	; 12
     4ae:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     4b8:	86 e0       	ldi	r24, 0x06	; 6
     4ba:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z8Lcd4_Cmdc>
     4be:	08 95       	ret

000004c0 <_Z15Lcd4_Write_Charc>:
     4c0:	cf 93       	push	r28
     4c2:	c8 2f       	mov	r28, r24
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	8a e1       	ldi	r24, 0x1A	; 26
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     4d0:	8c 2f       	mov	r24, r28
     4d2:	82 95       	swap	r24
     4d4:	8f 70       	andi	r24, 0x0F	; 15
     4d6:	0e 94 a3 01 	call	0x346	; 0x346 <_Z9Lcd4_Portc>
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	8b e1       	ldi	r24, 0x1B	; 27
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     4e6:	89 ef       	ldi	r24, 0xF9	; 249
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <_Z15Lcd4_Write_Charc+0x2a>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <_Z15Lcd4_Write_Charc+0x30>
     4f0:	00 00       	nop
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	8b e1       	ldi	r24, 0x1B	; 27
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     4fe:	89 ef       	ldi	r24, 0xF9	; 249
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	f1 f7       	brne	.-4      	; 0x502 <_Z15Lcd4_Write_Charc+0x42>
     506:	00 c0       	rjmp	.+0      	; 0x508 <_Z15Lcd4_Write_Charc+0x48>
     508:	00 00       	nop
     50a:	8c 2f       	mov	r24, r28
     50c:	8f 70       	andi	r24, 0x0F	; 15
     50e:	0e 94 a3 01 	call	0x346	; 0x346 <_Z9Lcd4_Portc>
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	8b e1       	ldi	r24, 0x1B	; 27
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     51e:	89 ef       	ldi	r24, 0xF9	; 249
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <_Z15Lcd4_Write_Charc+0x62>
     526:	00 c0       	rjmp	.+0      	; 0x528 <_Z15Lcd4_Write_Charc+0x68>
     528:	00 00       	nop
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	8b e1       	ldi	r24, 0x1B	; 27
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9pinChangeii>
     536:	89 ef       	ldi	r24, 0xF9	; 249
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	f1 f7       	brne	.-4      	; 0x53a <_Z15Lcd4_Write_Charc+0x7a>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <_Z15Lcd4_Write_Charc+0x80>
     540:	00 00       	nop
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <_Z17Lcd4_Write_StringPc>:
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	ec 01       	movw	r28, r24
     54c:	88 81       	ld	r24, Y
     54e:	88 23       	and	r24, r24
     550:	31 f0       	breq	.+12     	; 0x55e <_Z17Lcd4_Write_StringPc+0x18>
     552:	21 96       	adiw	r28, 0x01	; 1
     554:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z15Lcd4_Write_Charc>
     558:	89 91       	ld	r24, Y+
     55a:	81 11       	cpse	r24, r1
     55c:	fb cf       	rjmp	.-10     	; 0x554 <_Z17Lcd4_Write_StringPc+0xe>
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	08 95       	ret

00000564 <_ZN14GameControllerC1Ev>:
	public:
	int displayBoard[BOARD_HEIGHT][BOARD_WIDTH];



	GameController() {
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	ec 01       	movw	r28, r24
    


public:
    Player() {
        playerPosition = Position(4,BOARD_HEIGHT-1);
     572:	84 e0       	ldi	r24, 0x04	; 4
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	9a 87       	std	Y+10, r25	; 0x0a
     578:	89 87       	std	Y+9, r24	; 0x09
     57a:	8f e0       	ldi	r24, 0x0F	; 15
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	9c 87       	std	Y+12, r25	; 0x0c
     580:	8b 87       	std	Y+11, r24	; 0x0b
        readyToMove = true;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	8d 87       	std	Y+13, r24	; 0x0d
     586:	fe 01       	movw	r30, r28
     588:	3e 96       	adiw	r30, 0x0e	; 14
     58a:	9e 01       	movw	r18, r28
     58c:	27 5d       	subi	r18, 0xD7	; 215
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     590:	11 82       	std	Z+1, r1	; 0x01
     592:	10 82       	st	Z, r1
        y = 0;
     594:	13 82       	std	Z+3, r1	; 0x03
     596:	12 82       	std	Z+2, r1	; 0x02
    unsigned int moveTimerCounter;

public:

    Enemy() {
        alive = true;
     598:	84 83       	std	Z+4, r24	; 0x04
     59a:	39 96       	adiw	r30, 0x09	; 9
     59c:	2e 17       	cp	r18, r30
     59e:	3f 07       	cpc	r19, r31
     5a0:	b9 f7       	brne	.-18     	; 0x590 <_ZN14GameControllerC1Ev+0x2c>
     5a2:	fe 01       	movw	r30, r28
     5a4:	bd 96       	adiw	r30, 0x2d	; 45
     5a6:	ce 01       	movw	r24, r28
     5a8:	8f 51       	subi	r24, 0x1F	; 31
     5aa:	9f 4f       	sbci	r25, 0xFF	; 255
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     5ac:	11 82       	std	Z+1, r1	; 0x01
     5ae:	10 82       	st	Z, r1
        y = 0;
     5b0:	13 82       	std	Z+3, r1	; 0x03
     5b2:	12 82       	std	Z+2, r1	; 0x02

public:

    NewBullet() {

        isActiveOnBoard = false;
     5b4:	14 82       	std	Z+4, r1	; 0x04
        bulletPosition = Position(0, 0);
        moveTimeCounter = 0;
     5b6:	16 82       	std	Z+6, r1	; 0x06
     5b8:	15 82       	std	Z+5, r1	; 0x05
     5ba:	39 96       	adiw	r30, 0x09	; 9
     5bc:	e8 17       	cp	r30, r24
     5be:	f9 07       	cpc	r31, r25
     5c0:	a9 f7       	brne	.-22     	; 0x5ac <_ZN14GameControllerC1Ev+0x48>
    //    newBullet1 = NewBullet(0, 0,0);
    //    newBullet2 = NewBullet(2000, 0,0);
    //    newBullet3 = NewBullet(4000, 0,0);
    //    newBullet4 = NewBullet(6000, 0,0);

	enemyBulletCollisionCounter = 0;
     5c2:	19 82       	std	Y+1, r1	; 0x01
     5c4:	18 82       	st	Y, r1
	enemyPlayerCollisionCounter = 0;
     5c6:	1b 82       	std	Y+3, r1	; 0x03
     5c8:	1a 82       	std	Y+2, r1	; 0x02
	bulletReadyToShoot = true;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	88 87       	std	Y+8, r24	; 0x08
     5ce:	7e 01       	movw	r14, r28
     5d0:	00 e0       	ldi	r16, 0x00	; 0
     5d2:	10 e0       	ldi	r17, 0x00	; 0
	//Enemy enemy1, enemy2, enemy3;

	Enemy enemyPool[ENEMY_POOL_SIZE];

	 int getRandomBoardXCordinate() {
		 	return rand() % BOARD_WIDTH;
     5d4:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <rand>
     5d8:	f7 01       	movw	r30, r14
	bulletReadyToShoot = true;
	
	char score1[16], score2[16];
	
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
     5da:	87 70       	andi	r24, 0x07	; 7
     5dc:	90 78       	andi	r25, 0x80	; 128
     5de:	99 23       	and	r25, r25
     5e0:	24 f4       	brge	.+8      	; 0x5ea <_ZN14GameControllerC1Ev+0x86>
     5e2:	01 97       	sbiw	r24, 0x01	; 1
     5e4:	88 6f       	ori	r24, 0xF8	; 248
     5e6:	9f 6f       	ori	r25, 0xFF	; 255
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	97 87       	std	Z+15, r25	; 0x0f
     5ec:	86 87       	std	Z+14, r24	; 0x0e
     5ee:	11 8a       	std	Z+17, r1	; 0x11
     5f0:	10 8a       	std	Z+16, r1	; 0x10
     5f2:	12 8a       	std	Z+18, r1	; 0x12
     5f4:	14 8b       	std	Z+20, r17	; 0x14
     5f6:	03 8b       	std	Z+19, r16	; 0x13
     5f8:	16 8a       	std	Z+22, r1	; 0x16
     5fa:	15 8a       	std	Z+21, r1	; 0x15
     5fc:	89 e0       	ldi	r24, 0x09	; 9
     5fe:	e8 0e       	add	r14, r24
     600:	f1 1c       	adc	r15, r1
     602:	0c 50       	subi	r16, 0x0C	; 12
     604:	1e 4f       	sbci	r17, 0xFE	; 254
	enemyPlayerCollisionCounter = 0;
	bulletReadyToShoot = true;
	
	char score1[16], score2[16];
	
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
     606:	0c 3d       	cpi	r16, 0xDC	; 220
     608:	85 e0       	ldi	r24, 0x05	; 5
     60a:	18 07       	cpc	r17, r24
     60c:	19 f7       	brne	.-58     	; 0x5d4 <_ZN14GameControllerC1Ev+0x70>
     60e:	de 01       	movw	r26, r28
     610:	9d 96       	adiw	r26, 0x2d	; 45
     612:	fe 01       	movw	r30, r28
     614:	ef 51       	subi	r30, 0x1F	; 31
     616:	ff 4f       	sbci	r31, 0xFF	; 255
		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
	}


	    for(int i = 0; i < BULLET_POOL_SIZE; i++) {
		    bulletPool[i] = NewBullet(0,0,0);
     618:	11 96       	adiw	r26, 0x01	; 1
     61a:	1c 92       	st	X, r1
     61c:	1e 92       	st	-X, r1
     61e:	13 96       	adiw	r26, 0x03	; 3
     620:	1c 92       	st	X, r1
     622:	1e 92       	st	-X, r1
     624:	12 97       	sbiw	r26, 0x02	; 2
     626:	14 96       	adiw	r26, 0x04	; 4
     628:	1c 92       	st	X, r1
     62a:	14 97       	sbiw	r26, 0x04	; 4
     62c:	16 96       	adiw	r26, 0x06	; 6
     62e:	1c 92       	st	X, r1
     630:	1e 92       	st	-X, r1
     632:	15 97       	sbiw	r26, 0x05	; 5
     634:	18 96       	adiw	r26, 0x08	; 8
     636:	1c 92       	st	X, r1
     638:	1e 92       	st	-X, r1
     63a:	17 97       	sbiw	r26, 0x07	; 7
     63c:	19 96       	adiw	r26, 0x09	; 9
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
	}


	    for(int i = 0; i < BULLET_POOL_SIZE; i++) {
     63e:	ae 17       	cp	r26, r30
     640:	bf 07       	cpc	r27, r31
     642:	51 f7       	brne	.-44     	; 0x618 <_ZN14GameControllerC1Ev+0xb4>
     644:	9e 01       	movw	r18, r28
     646:	2f 51       	subi	r18, 0x1F	; 31
     648:	3e 4f       	sbci	r19, 0xFE	; 254
     64a:	cf 01       	movw	r24, r30
     64c:	40 96       	adiw	r24, 0x10	; 16


		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				displayBoard[i][j] = 0;
     64e:	11 92       	st	Z+, r1
     650:	11 92       	st	Z+, r1
	    }


		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
     652:	e8 17       	cp	r30, r24
     654:	f9 07       	cpc	r31, r25
     656:	d9 f7       	brne	.-10     	; 0x64e <_ZN14GameControllerC1Ev+0xea>
     658:	fc 01       	movw	r30, r24
		    bulletPool[i] = NewBullet(0,0,0);
	    }


		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;
		for (int i = 0; i < rows; i++) {
     65a:	28 17       	cp	r18, r24
     65c:	39 07       	cpc	r19, r25
     65e:	a9 f7       	brne	.-22     	; 0x64a <_ZN14GameControllerC1Ev+0xe6>
			for (int j = 0; j < cols; j++) {
				displayBoard[i][j] = 0;
			}
		}
	}
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	08 95       	ret

0000066e <_Z13softwareSetupv>:
#include "headers/game/GameController.h"
#include "headers/utils/HardwareController.h"

GameController gameController;

void softwareSetup() {
     66e:	af 92       	push	r10
     670:	bf 92       	push	r11
     672:	cf 92       	push	r12
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	c1 5e       	subi	r28, 0xE1	; 225
     688:	d1 40       	sbci	r29, 0x01	; 1
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	f8 94       	cli
     68e:	de bf       	out	0x3e, r29	; 62
     690:	0f be       	out	0x3f, r0	; 63
     692:	cd bf       	out	0x3d, r28	; 61
    


public:
    Player() {
        playerPosition = Position(4,BOARD_HEIGHT-1);
     694:	84 e0       	ldi	r24, 0x04	; 4
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	9b 87       	std	Y+11, r25	; 0x0b
     69a:	8a 87       	std	Y+10, r24	; 0x0a
     69c:	8f e0       	ldi	r24, 0x0F	; 15
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	9d 87       	std	Y+13, r25	; 0x0d
     6a2:	8c 87       	std	Y+12, r24	; 0x0c
        readyToMove = true;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	8e 87       	std	Y+14, r24	; 0x0e
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     6a8:	18 8a       	std	Y+16, r1	; 0x10
     6aa:	1f 86       	std	Y+15, r1	; 0x0f
        y = 0;
     6ac:	1a 8a       	std	Y+18, r1	; 0x12
     6ae:	19 8a       	std	Y+17, r1	; 0x11
     6b0:	8b 8b       	std	Y+19, r24	; 0x13
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     6b2:	19 8e       	std	Y+25, r1	; 0x19
     6b4:	18 8e       	std	Y+24, r1	; 0x18
        y = 0;
     6b6:	1b 8e       	std	Y+27, r1	; 0x1b
     6b8:	1a 8e       	std	Y+26, r1	; 0x1a
     6ba:	8c 8f       	std	Y+28, r24	; 0x1c
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     6bc:	1a a2       	std	Y+34, r1	; 0x22
     6be:	19 a2       	std	Y+33, r1	; 0x21
        y = 0;
     6c0:	1c a2       	std	Y+36, r1	; 0x24
     6c2:	1b a2       	std	Y+35, r1	; 0x23
     6c4:	8d a3       	std	Y+37, r24	; 0x25
     6c6:	7e 01       	movw	r14, r28
     6c8:	8e e2       	ldi	r24, 0x2E	; 46
     6ca:	e8 0e       	add	r14, r24
     6cc:	f1 1c       	adc	r15, r1
     6ce:	8e 01       	movw	r16, r28
     6d0:	0e 51       	subi	r16, 0x1E	; 30
     6d2:	1f 4f       	sbci	r17, 0xFF	; 255
     6d4:	f7 01       	movw	r30, r14
    Position(int x, int y) : x(x), y(y) {

    }

    Position() {
        x = 0;
     6d6:	11 82       	std	Z+1, r1	; 0x01
     6d8:	10 82       	st	Z, r1
        y = 0;
     6da:	13 82       	std	Z+3, r1	; 0x03
     6dc:	12 82       	std	Z+2, r1	; 0x02

public:

    NewBullet() {

        isActiveOnBoard = false;
     6de:	14 82       	std	Z+4, r1	; 0x04
        bulletPosition = Position(0, 0);
        moveTimeCounter = 0;
     6e0:	16 82       	std	Z+6, r1	; 0x06
     6e2:	15 82       	std	Z+5, r1	; 0x05
     6e4:	39 96       	adiw	r30, 0x09	; 9
	public:
	int displayBoard[BOARD_HEIGHT][BOARD_WIDTH];



	GameController() {
     6e6:	0e 17       	cp	r16, r30
     6e8:	1f 07       	cpc	r17, r31
     6ea:	a9 f7       	brne	.-22     	; 0x6d6 <_Z13softwareSetupv+0x68>
     6ec:	88 c0       	rjmp	.+272    	; 0x7fe <_Z13softwareSetupv+0x190>
	//Enemy enemy1, enemy2, enemy3;

	Enemy enemyPool[ENEMY_POOL_SIZE];

	 int getRandomBoardXCordinate() {
		 	return rand() % BOARD_WIDTH;
     6ee:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <rand>
     6f2:	f5 01       	movw	r30, r10
	bulletReadyToShoot = true;
	
	char score1[16], score2[16];
	
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
     6f4:	87 70       	andi	r24, 0x07	; 7
     6f6:	90 78       	andi	r25, 0x80	; 128
     6f8:	99 23       	and	r25, r25
     6fa:	24 f4       	brge	.+8      	; 0x704 <_Z13softwareSetupv+0x96>
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	88 6f       	ori	r24, 0xF8	; 248
     700:	9f 6f       	ori	r25, 0xFF	; 255
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	97 87       	std	Z+15, r25	; 0x0f
     706:	86 87       	std	Z+14, r24	; 0x0e
     708:	11 8a       	std	Z+17, r1	; 0x11
     70a:	10 8a       	std	Z+16, r1	; 0x10
     70c:	12 8a       	std	Z+18, r1	; 0x12
     70e:	d4 8a       	std	Z+20, r13	; 0x14
     710:	c3 8a       	std	Z+19, r12	; 0x13
     712:	16 8a       	std	Z+22, r1	; 0x16
     714:	15 8a       	std	Z+21, r1	; 0x15
     716:	99 e0       	ldi	r25, 0x09	; 9
     718:	a9 0e       	add	r10, r25
     71a:	b1 1c       	adc	r11, r1
     71c:	ec e0       	ldi	r30, 0x0C	; 12
     71e:	ce 1a       	sub	r12, r30
     720:	ee ef       	ldi	r30, 0xFE	; 254
     722:	de 0a       	sbc	r13, r30
	enemyPlayerCollisionCounter = 0;
	bulletReadyToShoot = true;
	
	char score1[16], score2[16];
	
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
     724:	fc ed       	ldi	r31, 0xDC	; 220
     726:	cf 16       	cp	r12, r31
     728:	f5 e0       	ldi	r31, 0x05	; 5
     72a:	df 06       	cpc	r13, r31
     72c:	01 f7       	brne	.-64     	; 0x6ee <_Z13softwareSetupv+0x80>
		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
	}


	    for(int i = 0; i < BULLET_POOL_SIZE; i++) {
		    bulletPool[i] = NewBullet(0,0,0);
     72e:	f7 01       	movw	r30, r14
     730:	11 82       	std	Z+1, r1	; 0x01
     732:	10 82       	st	Z, r1
     734:	13 82       	std	Z+3, r1	; 0x03
     736:	12 82       	std	Z+2, r1	; 0x02
     738:	14 82       	std	Z+4, r1	; 0x04
     73a:	16 82       	std	Z+6, r1	; 0x06
     73c:	15 82       	std	Z+5, r1	; 0x05
     73e:	10 86       	std	Z+8, r1	; 0x08
     740:	17 82       	std	Z+7, r1	; 0x07
     742:	f9 e0       	ldi	r31, 0x09	; 9
     744:	ef 0e       	add	r14, r31
     746:	f1 1c       	adc	r15, r1
	for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
		enemyPool[i] = Enemy(i * 500, getRandomBoardXCordinate() , 0);
	}


	    for(int i = 0; i < BULLET_POOL_SIZE; i++) {
     748:	0e 15       	cp	r16, r14
     74a:	1f 05       	cpc	r17, r15
     74c:	81 f7       	brne	.-32     	; 0x72e <_Z13softwareSetupv+0xc0>
     74e:	9e 01       	movw	r18, r28
     750:	2e 51       	subi	r18, 0x1E	; 30
     752:	3e 4f       	sbci	r19, 0xFE	; 254
     754:	c8 01       	movw	r24, r16
     756:	40 96       	adiw	r24, 0x10	; 16


		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				displayBoard[i][j] = 0;
     758:	f8 01       	movw	r30, r16
     75a:	11 92       	st	Z+, r1
     75c:	11 92       	st	Z+, r1
     75e:	8f 01       	movw	r16, r30
	    }


		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
     760:	8e 17       	cp	r24, r30
     762:	9f 07       	cpc	r25, r31
     764:	c9 f7       	brne	.-14     	; 0x758 <_Z13softwareSetupv+0xea>
     766:	8c 01       	movw	r16, r24
		    bulletPool[i] = NewBullet(0,0,0);
	    }


		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;
		for (int i = 0; i < rows; i++) {
     768:	28 17       	cp	r18, r24
     76a:	39 07       	cpc	r19, r25
     76c:	99 f7       	brne	.-26     	; 0x754 <_Z13softwareSetupv+0xe6>
    gameController = GameController();
     76e:	81 ee       	ldi	r24, 0xE1	; 225
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	fe 01       	movw	r30, r28
     774:	31 96       	adiw	r30, 0x01	; 1
     776:	a6 ec       	ldi	r26, 0xC6	; 198
     778:	b0 e0       	ldi	r27, 0x00	; 0
     77a:	01 90       	ld	r0, Z+
     77c:	0d 92       	st	X+, r0
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	e1 f7       	brne	.-8      	; 0x77a <_Z13softwareSetupv+0x10c>
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     782:	e6 ec       	ldi	r30, 0xC6	; 198
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	63 85       	ldd	r22, Z+11	; 0x0b
     788:	74 85       	ldd	r23, Z+12	; 0x0c
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     78a:	81 85       	ldd	r24, Z+9	; 0x09
     78c:	92 85       	ldd	r25, Z+10	; 0x0a
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     78e:	fb 01       	movw	r30, r22
     790:	ee 0f       	add	r30, r30
     792:	ff 1f       	adc	r31, r31
     794:	ee 0f       	add	r30, r30
     796:	ff 1f       	adc	r31, r31
     798:	ee 0f       	add	r30, r30
     79a:	ff 1f       	adc	r31, r31
     79c:	df 01       	movw	r26, r30
     79e:	a8 0f       	add	r26, r24
     7a0:	b9 1f       	adc	r27, r25
     7a2:	aa 0f       	add	r26, r26
     7a4:	bb 1f       	adc	r27, r27
     7a6:	a9 55       	subi	r26, 0x59	; 89
     7a8:	be 4f       	sbci	r27, 0xFE	; 254
     7aa:	43 e0       	ldi	r20, 0x03	; 3
     7ac:	50 e0       	ldi	r21, 0x00	; 0
     7ae:	4d 93       	st	X+, r20
     7b0:	5c 93       	st	X, r21
     7b2:	dc 01       	movw	r26, r24
     7b4:	11 97       	sbiw	r26, 0x01	; 1
     7b6:	ae 0f       	add	r26, r30
     7b8:	bf 1f       	adc	r27, r31
     7ba:	aa 0f       	add	r26, r26
     7bc:	bb 1f       	adc	r27, r27
     7be:	a9 55       	subi	r26, 0x59	; 89
     7c0:	be 4f       	sbci	r27, 0xFE	; 254
     7c2:	4d 93       	st	X+, r20
     7c4:	5c 93       	st	X, r21
     7c6:	9c 01       	movw	r18, r24
     7c8:	2f 5f       	subi	r18, 0xFF	; 255
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	e2 0f       	add	r30, r18
     7ce:	f3 1f       	adc	r31, r19
     7d0:	ee 0f       	add	r30, r30
     7d2:	ff 1f       	adc	r31, r31
     7d4:	e9 55       	subi	r30, 0x59	; 89
     7d6:	fe 4f       	sbci	r31, 0xFE	; 254
     7d8:	51 83       	std	Z+1, r21	; 0x01
     7da:	40 83       	st	Z, r20
     7dc:	fb 01       	movw	r30, r22
     7de:	31 97       	sbiw	r30, 0x01	; 1
     7e0:	ee 0f       	add	r30, r30
     7e2:	ff 1f       	adc	r31, r31
     7e4:	ee 0f       	add	r30, r30
     7e6:	ff 1f       	adc	r31, r31
     7e8:	ee 0f       	add	r30, r30
     7ea:	ff 1f       	adc	r31, r31
     7ec:	e8 0f       	add	r30, r24
     7ee:	f9 1f       	adc	r31, r25
     7f0:	ee 0f       	add	r30, r30
     7f2:	ff 1f       	adc	r31, r31
     7f4:	e9 55       	subi	r30, 0x59	; 89
     7f6:	fe 4f       	sbci	r31, 0xFE	; 254
     7f8:	51 83       	std	Z+1, r21	; 0x01
     7fa:	40 83       	st	Z, r20
    gameController.initializePlayerPosition();
   // gameController.initEnemyPositions();// int x
    
}
     7fc:	0c c0       	rjmp	.+24     	; 0x816 <_Z13softwareSetupv+0x1a8>
    //    newBullet1 = NewBullet(0, 0,0);
    //    newBullet2 = NewBullet(2000, 0,0);
    //    newBullet3 = NewBullet(4000, 0,0);
    //    newBullet4 = NewBullet(6000, 0,0);

	enemyBulletCollisionCounter = 0;
     7fe:	1a 82       	std	Y+2, r1	; 0x02
     800:	19 82       	std	Y+1, r1	; 0x01
	enemyPlayerCollisionCounter = 0;
     802:	1c 82       	std	Y+4, r1	; 0x04
     804:	1b 82       	std	Y+3, r1	; 0x03
	bulletReadyToShoot = true;
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	89 87       	std	Y+9, r24	; 0x09
     80a:	ce 01       	movw	r24, r28
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	5c 01       	movw	r10, r24
     810:	c1 2c       	mov	r12, r1
     812:	d1 2c       	mov	r13, r1
     814:	6c cf       	rjmp	.-296    	; 0x6ee <_Z13softwareSetupv+0x80>
     816:	cf 51       	subi	r28, 0x1F	; 31
     818:	de 4f       	sbci	r29, 0xFE	; 254
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	df 90       	pop	r13
     832:	cf 90       	pop	r12
     834:	bf 90       	pop	r11
     836:	af 90       	pop	r10
     838:	08 95       	ret

0000083a <_Z5setupv>:


void setup() {
    softwareSetup();
     83a:	0e 94 37 03 	call	0x66e	; 0x66e <_Z13softwareSetupv>
	}

	static void hardWareSetup()
	{
		//LED MATRIX OUTPUT
		DDRA = 0b11111000;
     83e:	88 ef       	ldi	r24, 0xF8	; 248
     840:	8a bb       	out	0x1a, r24	; 26
		DDRB = 255;
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	87 bb       	out	0x17, r24	; 23
		//LCD DISPLAY
		DDRD = 0xFF;
     846:	81 bb       	out	0x11, r24	; 17
		DDRC = 0xFF;
     848:	84 bb       	out	0x14, r24	; 20
		Lcd4_Init();
     84a:	0e 94 2c 02 	call	0x458	; 0x458 <_Z9Lcd4_Initv>
		}
	}

	static void displayLcd(char * upper,char * lower)
	{
		Lcd4_Clear();
     84e:	0e 94 08 02 	call	0x410	; 0x410 <_Z10Lcd4_Clearv>
		Lcd4_Set_Cursor(1, 0);
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z15Lcd4_Set_Cursorcc>
		Lcd4_Write_String(upper);
     85a:	8c e6       	ldi	r24, 0x6C	; 108
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17Lcd4_Write_StringPc>
		Lcd4_Set_Cursor(2, 0);
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z15Lcd4_Set_Cursorcc>
		Lcd4_Write_String(lower);
     86a:	85 e7       	ldi	r24, 0x75	; 117
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17Lcd4_Write_StringPc>
     872:	08 95       	ret

00000874 <_Z4loopj>:
	HardwareController::hardWareSetup();
	
}


void loop(unsigned loopNo) {
     874:	2f 92       	push	r2
     876:	3f 92       	push	r3
     878:	4f 92       	push	r4
     87a:	5f 92       	push	r5
     87c:	6f 92       	push	r6
     87e:	7f 92       	push	r7
     880:	8f 92       	push	r8
     882:	9f 92       	push	r9
     884:	af 92       	push	r10
     886:	bf 92       	push	r11
     888:	cf 92       	push	r12
     88a:	df 92       	push	r13
     88c:	ef 92       	push	r14
     88e:	ff 92       	push	r15
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	6c 97       	sbiw	r28, 0x1c	; 28
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
	int getLoopNo() const {
		return loopNo;
	}

	void setLoopNo(int loopNo) {
		GameController::loopNo = loopNo;
     8a8:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__data_end+0x2a>
     8ac:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__data_end+0x29>
     8b0:	0f 2e       	mov	r0, r31
     8b2:	f6 ec       	ldi	r31, 0xC6	; 198
     8b4:	af 2e       	mov	r10, r31
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	bf 2e       	mov	r11, r31
     8ba:	f0 2d       	mov	r31, r0
     8bc:	75 01       	movw	r14, r10
	void updateEnemy(Enemy &enemy) {

		unsigned int currentTime = enemy.getSpawnTimerCounter();
		enemy.setSpawnTimerCounter(currentTime + 1);

		if( enemy.getSpawnTimerCounter() % ENEMY_SPAWN_TIME_NEW == 0 ) {
     8be:	0f 2e       	mov	r0, r31
     8c0:	fc ed       	ldi	r31, 0xDC	; 220
     8c2:	cf 2e       	mov	r12, r31
     8c4:	f5 e0       	ldi	r31, 0x05	; 5
     8c6:	df 2e       	mov	r13, r31
     8c8:	f0 2d       	mov	r31, r0
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
     8ca:	77 24       	eor	r7, r7
     8cc:	73 94       	inc	r7
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     8ce:	68 94       	set
     8d0:	88 24       	eor	r8, r8
     8d2:	81 f8       	bld	r8, 1
     8d4:	91 2c       	mov	r9, r1
		if( enemy.getSpawnTimerCounter() % ENEMY_SPAWN_TIME_NEW == 0 ) {
			enemy.setSpawnTimerCounter(0);

			if ( !enemy.isAlive() ) {
				int newX = getRandomBoardXCordinate();
				if(newX == 3)newX++;
     8d6:	68 94       	set
     8d8:	66 24       	eor	r6, r6
     8da:	62 f8       	bld	r6, 2
     8dc:	51 2c       	mov	r5, r1
     8de:	87 01       	movw	r16, r14
	NewBullet bulletPool[BULLET_POOL_SIZE];

	void updateEnemy(Enemy &enemy) {

		unsigned int currentTime = enemy.getSpawnTimerCounter();
		enemy.setSpawnTimerCounter(currentTime + 1);
     8e0:	d7 01       	movw	r26, r14
     8e2:	53 96       	adiw	r26, 0x13	; 19
     8e4:	4d 91       	ld	r20, X+
     8e6:	5c 91       	ld	r21, X
     8e8:	54 97       	sbiw	r26, 0x14	; 20
     8ea:	4f 5f       	subi	r20, 0xFF	; 255
     8ec:	5f 4f       	sbci	r21, 0xFF	; 255

		if( enemy.getSpawnTimerCounter() % ENEMY_SPAWN_TIME_NEW == 0 ) {
     8ee:	9a 01       	movw	r18, r20
     8f0:	36 95       	lsr	r19
     8f2:	27 95       	ror	r18
     8f4:	36 95       	lsr	r19
     8f6:	27 95       	ror	r18
     8f8:	a1 eb       	ldi	r26, 0xB1	; 177
     8fa:	bb e2       	ldi	r27, 0x2B	; 43
     8fc:	0e 94 0b 09 	call	0x1216	; 0x1216 <__umulhisi3>
     900:	00 24       	eor	r0, r0
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	00 1c       	adc	r0, r0
     908:	88 0f       	add	r24, r24
     90a:	99 1f       	adc	r25, r25
     90c:	00 1c       	adc	r0, r0
     90e:	89 2f       	mov	r24, r25
     910:	90 2d       	mov	r25, r0
     912:	8c 9d       	mul	r24, r12
     914:	90 01       	movw	r18, r0
     916:	8d 9d       	mul	r24, r13
     918:	30 0d       	add	r19, r0
     91a:	9c 9d       	mul	r25, r12
     91c:	30 0d       	add	r19, r0
     91e:	11 24       	eor	r1, r1
     920:	42 17       	cp	r20, r18
     922:	53 07       	cpc	r21, r19
     924:	21 f0       	breq	.+8      	; 0x92e <_Z4loopj+0xba>
    unsigned int getSpawnTimerCounter() const {
        return spawnTimerCounter;
    }

    void setSpawnTimerCounter(unsigned int spawnTimerCounter) {
        Enemy::spawnTimerCounter = spawnTimerCounter;
     926:	f7 01       	movw	r30, r14
     928:	54 8b       	std	Z+20, r21	; 0x14
     92a:	43 8b       	std	Z+19, r20	; 0x13
     92c:	25 c0       	rjmp	.+74     	; 0x978 <_Z4loopj+0x104>
     92e:	d7 01       	movw	r26, r14
     930:	54 96       	adiw	r26, 0x14	; 20
     932:	1c 92       	st	X, r1
     934:	1e 92       	st	-X, r1
     936:	53 97       	sbiw	r26, 0x13	; 19
			enemy.setSpawnTimerCounter(0);

			if ( !enemy.isAlive() ) {
     938:	52 96       	adiw	r26, 0x12	; 18
     93a:	8c 91       	ld	r24, X
     93c:	81 11       	cpse	r24, r1
     93e:	1c c0       	rjmp	.+56     	; 0x978 <_Z4loopj+0x104>
	//Enemy enemy1, enemy2, enemy3;

	Enemy enemyPool[ENEMY_POOL_SIZE];

	 int getRandomBoardXCordinate() {
		 	return rand() % BOARD_WIDTH;
     940:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <rand>
     944:	87 70       	andi	r24, 0x07	; 7
     946:	90 78       	andi	r25, 0x80	; 128
     948:	99 23       	and	r25, r25
     94a:	24 f4       	brge	.+8      	; 0x954 <_Z4loopj+0xe0>
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	88 6f       	ori	r24, 0xF8	; 248
     950:	9f 6f       	ori	r25, 0xFF	; 255
     952:	01 96       	adiw	r24, 0x01	; 1
		if( enemy.getSpawnTimerCounter() % ENEMY_SPAWN_TIME_NEW == 0 ) {
			enemy.setSpawnTimerCounter(0);

			if ( !enemy.isAlive() ) {
				int newX = getRandomBoardXCordinate();
				if(newX == 3)newX++;
     954:	83 30       	cpi	r24, 0x03	; 3
     956:	91 05       	cpc	r25, r1
     958:	11 f4       	brne	.+4      	; 0x95e <_Z4loopj+0xea>
     95a:	86 2d       	mov	r24, r6
     95c:	95 2d       	mov	r25, r5
    }

    void setX(int x) {
        Position::x = x;
     95e:	f8 01       	movw	r30, r16
     960:	97 87       	std	Z+15, r25	; 0x0f
     962:	86 87       	std	Z+14, r24	; 0x0e
    int getY() const {
        return y;
    }

    void setY(int y) {
        Position::y = y;
     964:	11 8a       	std	Z+17, r1	; 0x11
     966:	10 8a       	std	Z+16, r1	; 0x10
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
     968:	72 8a       	std	Z+18, r7	; 0x12
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     96a:	88 0f       	add	r24, r24
     96c:	99 1f       	adc	r25, r25
     96e:	fc 01       	movw	r30, r24
     970:	e9 55       	subi	r30, 0x59	; 89
     972:	fe 4f       	sbci	r31, 0xFE	; 254
     974:	91 82       	std	Z+1, r9	; 0x01
     976:	80 82       	st	Z, r8
				setIndexInBoard(enemy.getX(), enemy.getY(),2);
			}
		}
		
		
		enemy.setMoveTimeCounter(enemy.getMoveTimeCounter() + 1);
     978:	d8 01       	movw	r26, r16
     97a:	55 96       	adiw	r26, 0x15	; 21
     97c:	8d 91       	ld	r24, X+
     97e:	9c 91       	ld	r25, X
     980:	56 97       	sbiw	r26, 0x16	; 22
     982:	01 96       	adiw	r24, 0x01	; 1
    unsigned int getMoveTimeCounter() const {
        return moveTimerCounter;
    }

    void setMoveTimeCounter(unsigned int moveTimerCounterarg) {
        Enemy::moveTimerCounter = moveTimerCounterarg;
     984:	56 96       	adiw	r26, 0x16	; 22
     986:	9c 93       	st	X, r25
     988:	8e 93       	st	-X, r24
     98a:	55 97       	sbiw	r26, 0x15	; 21
	

		if (enemy.getMoveTimeCounter() >= ENEMY_MOVE_TIME_NEW && enemy.isAlive()) {
     98c:	8c 32       	cpi	r24, 0x2C	; 44
     98e:	91 40       	sbci	r25, 0x01	; 1
     990:	08 f4       	brcc	.+2      	; 0x994 <_Z4loopj+0x120>
     992:	4f c0       	rjmp	.+158    	; 0xa32 <_Z4loopj+0x1be>
     994:	f8 01       	movw	r30, r16
     996:	82 89       	ldd	r24, Z+18	; 0x12
     998:	88 23       	and	r24, r24
     99a:	09 f4       	brne	.+2      	; 0x99e <_Z4loopj+0x12a>
     99c:	4a c0       	rjmp	.+148    	; 0xa32 <_Z4loopj+0x1be>
    int getY() const {
        return enemyPosition.getY();
    }

    const Position getEnemyPosition() const {
        return enemyPosition;
     99e:	86 85       	ldd	r24, Z+14	; 0x0e
     9a0:	97 85       	ldd	r25, Z+15	; 0x0f
     9a2:	a0 89       	ldd	r26, Z+16	; 0x10
     9a4:	b1 89       	ldd	r27, Z+17	; 0x11
     9a6:	9d 01       	movw	r18, r26
    int getX() const {
        return x;
    }

    void setX(int x) {
        Position::x = x;
     9a8:	97 87       	std	Z+15, r25	; 0x0f
     9aa:	86 87       	std	Z+14, r24	; 0x0e
    int getY() const {
        return y;
    }

    void setY(int y) {
        Position::y = y;
     9ac:	ad 01       	movw	r20, r26
     9ae:	4f 5f       	subi	r20, 0xFF	; 255
     9b0:	5f 4f       	sbci	r21, 0xFF	; 255
     9b2:	4f 70       	andi	r20, 0x0F	; 15
     9b4:	50 78       	andi	r21, 0x80	; 128
     9b6:	55 23       	and	r21, r21
     9b8:	34 f4       	brge	.+12     	; 0x9c6 <_Z4loopj+0x152>
     9ba:	41 50       	subi	r20, 0x01	; 1
     9bc:	51 09       	sbc	r21, r1
     9be:	40 6f       	ori	r20, 0xF0	; 240
     9c0:	5f 6f       	ori	r21, 0xFF	; 255
     9c2:	4f 5f       	subi	r20, 0xFF	; 255
     9c4:	5f 4f       	sbci	r21, 0xFF	; 255
     9c6:	f8 01       	movw	r30, r16
     9c8:	51 8b       	std	Z+17, r21	; 0x11
     9ca:	40 8b       	std	Z+16, r20	; 0x10
    unsigned int getMoveTimeCounter() const {
        return moveTimerCounter;
    }

    void setMoveTimeCounter(unsigned int moveTimerCounterarg) {
        Enemy::moveTimerCounter = moveTimerCounterarg;
     9cc:	16 8a       	std	Z+22, r1	; 0x16
     9ce:	15 8a       	std	Z+21, r1	; 0x15
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     9d0:	fd 01       	movw	r30, r26
     9d2:	ee 0f       	add	r30, r30
     9d4:	ff 1f       	adc	r31, r31
     9d6:	ee 0f       	add	r30, r30
     9d8:	ff 1f       	adc	r31, r31
     9da:	ee 0f       	add	r30, r30
     9dc:	ff 1f       	adc	r31, r31
     9de:	8e 0f       	add	r24, r30
     9e0:	9f 1f       	adc	r25, r31
     9e2:	88 0f       	add	r24, r24
     9e4:	99 1f       	adc	r25, r25
     9e6:	fc 01       	movw	r30, r24
     9e8:	e9 55       	subi	r30, 0x59	; 89
     9ea:	fe 4f       	sbci	r31, 0xFE	; 254
     9ec:	11 82       	std	Z+1, r1	; 0x01
     9ee:	10 82       	st	Z, r1
			enemy.setEnemyPosition(prevX,(prevY+1)%BOARD_HEIGHT);
			////printStringToConsole("Enemy "+to_string(enemyNo)+"("+to_string(enemy.getX())+","+to_string(enemy.getY())+")");
			enemy.setMoveTimeCounter(0);
			resetIndexInBoard(prevX,prevY);

			if(prevY == BOARD_HEIGHT - 1) {
     9f0:	2f 30       	cpi	r18, 0x0F	; 15
     9f2:	31 05       	cpc	r19, r1
     9f4:	21 f4       	brne	.+8      	; 0x9fe <_Z4loopj+0x18a>
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
     9f6:	d8 01       	movw	r26, r16
     9f8:	52 96       	adiw	r26, 0x12	; 18
     9fa:	1c 92       	st	X, r1
     9fc:	1a c0       	rjmp	.+52     	; 0xa32 <_Z4loopj+0x1be>
				enemy.setIsAlive(false);
			}
		
		if(enemy.isAlive())	setIndexInBoard(enemy.getX(),enemy.getY(), ENEMY_STATUS_IN_BOARD); // no need to display if dead
     9fe:	f8 01       	movw	r30, r16
     a00:	82 89       	ldd	r24, Z+18	; 0x12
     a02:	88 23       	and	r24, r24
     a04:	b1 f0       	breq	.+44     	; 0xa32 <_Z4loopj+0x1be>
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     a06:	00 88       	ldd	r0, Z+16	; 0x10
     a08:	f1 89       	ldd	r31, Z+17	; 0x11
     a0a:	e0 2d       	mov	r30, r0
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     a0c:	d8 01       	movw	r26, r16
     a0e:	1e 96       	adiw	r26, 0x0e	; 14
     a10:	8d 91       	ld	r24, X+
     a12:	9c 91       	ld	r25, X
     a14:	1f 97       	sbiw	r26, 0x0f	; 15
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     a16:	ee 0f       	add	r30, r30
     a18:	ff 1f       	adc	r31, r31
     a1a:	ee 0f       	add	r30, r30
     a1c:	ff 1f       	adc	r31, r31
     a1e:	ee 0f       	add	r30, r30
     a20:	ff 1f       	adc	r31, r31
     a22:	e8 0f       	add	r30, r24
     a24:	f9 1f       	adc	r31, r25
     a26:	ee 0f       	add	r30, r30
     a28:	ff 1f       	adc	r31, r31
     a2a:	e9 55       	subi	r30, 0x59	; 89
     a2c:	fe 4f       	sbci	r31, 0xFE	; 254
     a2e:	91 82       	std	Z+1, r9	; 0x01
     a30:	80 82       	st	Z, r8
     a32:	b9 e0       	ldi	r27, 0x09	; 9
     a34:	eb 0e       	add	r14, r27
     a36:	f1 1c       	adc	r15, r1
	void updateEnemyPositions(){
		// updateEnemy(enemy1,1);
		// updateEnemy(enemy2,2);
		// updateEnemy(enemy3,3);

		for(int i = 0; i < ENEMY_POOL_SIZE; i++) {
     a38:	e1 ee       	ldi	r30, 0xE1	; 225
     a3a:	ee 16       	cp	r14, r30
     a3c:	e0 e0       	ldi	r30, 0x00	; 0
     a3e:	fe 06       	cpc	r15, r30
     a40:	09 f0       	breq	.+2      	; 0xa44 <_Z4loopj+0x1d0>
     a42:	4d cf       	rjmp	.-358    	; 0x8de <_Z4loopj+0x6a>

	}

	void playerMovementUpdateWithGyro() {

		if(loopNo % PLAYER_MOVE_SPEED_GYRO == 0) {
     a44:	40 91 ef 00 	lds	r20, 0x00EF	; 0x8000ef <__data_end+0x29>
     a48:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__data_end+0x2a>
     a4c:	9a 01       	movw	r18, r20
     a4e:	36 95       	lsr	r19
     a50:	27 95       	ror	r18
     a52:	36 95       	lsr	r19
     a54:	27 95       	ror	r18
     a56:	ab e7       	ldi	r26, 0x7B	; 123
     a58:	b4 e1       	ldi	r27, 0x14	; 20
     a5a:	0e 94 0b 09 	call	0x1216	; 0x1216 <__umulhisi3>
     a5e:	96 95       	lsr	r25
     a60:	87 95       	ror	r24
     a62:	64 e6       	ldi	r22, 0x64	; 100
     a64:	68 9f       	mul	r22, r24
     a66:	90 01       	movw	r18, r0
     a68:	69 9f       	mul	r22, r25
     a6a:	30 0d       	add	r19, r0
     a6c:	11 24       	eor	r1, r1
     a6e:	42 17       	cp	r20, r18
     a70:	53 07       	cpc	r21, r19
     a72:	21 f4       	brne	.+8      	; 0xa7c <_Z4loopj+0x208>
    bool isReadyToMove() const {
        return readyToMove;
    }

    void setIsReadyToMove(bool ready) {
        Player::readyToMove = ready;
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <__data_end+0xd>
     a7a:	05 c0       	rjmp	.+10     	; 0xa86 <_Z4loopj+0x212>
			player.setIsReadyToMove(true);
		}


		if(player.isReadyToMove()) {
     a7c:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <__data_end+0xd>
     a80:	88 23       	and	r24, r24
     a82:	09 f4       	brne	.+2      	; 0xa86 <_Z4loopj+0x212>
     a84:	03 c1       	rjmp	.+518    	; 0xc8c <_Z4loopj+0x418>
			_delay_us(10);
		}
	}

	static int getGyroReading() {
		char rawInput = PINA; 
     a86:	89 b3       	in	r24, 0x19	; 25

		char inputLSB = rawInput & 0b00000011 ;
		

		switch(inputLSB) {
     a88:	83 70       	andi	r24, 0x03	; 3
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	09 f4       	brne	.+2      	; 0xa90 <_Z4loopj+0x21c>
     a8e:	88 c0       	rjmp	.+272    	; 0xba0 <_Z4loopj+0x32c>
     a90:	82 30       	cpi	r24, 0x02	; 2
     a92:	09 f0       	breq	.+2      	; 0xa96 <_Z4loopj+0x222>
     a94:	fb c0       	rjmp	.+502    	; 0xc8c <_Z4loopj+0x418>
     a96:	e6 ec       	ldi	r30, 0xC6	; 198
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	21 85       	ldd	r18, Z+9	; 0x09
     a9c:	32 85       	ldd	r19, Z+10	; 0x0a
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     a9e:	c3 84       	ldd	r12, Z+11	; 0x0b
     aa0:	d4 84       	ldd	r13, Z+12	; 0x0c

	void shiftPlayerLeft (int shiftPositions) {
		int prevX = player.getX();
		int prevY = player.getY();

		int maxLeftMovement = (prevX - 1);
     aa2:	b9 01       	movw	r22, r18
     aa4:	61 50       	subi	r22, 0x01	; 1
     aa6:	71 09       	sbc	r23, r1
		if(shiftPositions > maxLeftMovement) shiftPositions = maxLeftMovement;
     aa8:	16 16       	cp	r1, r22
     aaa:	17 06       	cpc	r1, r23
     aac:	14 f0       	brlt	.+4      	; 0xab2 <_Z4loopj+0x23e>
     aae:	cb 01       	movw	r24, r22
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <_Z4loopj+0x242>
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	90 e0       	ldi	r25, 0x00	; 0

		movePlayer( prevX - shiftPositions, prevY);
     ab6:	d9 01       	movw	r26, r18
     ab8:	a8 1b       	sub	r26, r24
     aba:	b9 0b       	sbc	r27, r25
     abc:	cd 01       	movw	r24, r26
    int getX() const {
        return x;
    }

    void setX(int x) {
        Position::x = x;
     abe:	0f 2e       	mov	r0, r31
     ac0:	f6 ec       	ldi	r31, 0xC6	; 198
     ac2:	ef 2e       	mov	r14, r31
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	ff 2e       	mov	r15, r31
     ac8:	f0 2d       	mov	r31, r0
     aca:	f7 01       	movw	r30, r14
     acc:	b2 87       	std	Z+10, r27	; 0x0a
     ace:	a1 87       	std	Z+9, r26	; 0x09
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     ad0:	d6 01       	movw	r26, r12
     ad2:	aa 0f       	add	r26, r26
     ad4:	bb 1f       	adc	r27, r27
     ad6:	aa 0f       	add	r26, r26
     ad8:	bb 1f       	adc	r27, r27
     ada:	aa 0f       	add	r26, r26
     adc:	bb 1f       	adc	r27, r27
     ade:	8d 01       	movw	r16, r26
     ae0:	02 0f       	add	r16, r18
     ae2:	13 1f       	adc	r17, r19
     ae4:	00 0f       	add	r16, r16
     ae6:	11 1f       	adc	r17, r17
     ae8:	09 55       	subi	r16, 0x59	; 89
     aea:	1e 4f       	sbci	r17, 0xFE	; 254
     aec:	f8 01       	movw	r30, r16
     aee:	11 82       	std	Z+1, r1	; 0x01
     af0:	10 82       	st	Z, r1
     af2:	6a 0f       	add	r22, r26
     af4:	7b 1f       	adc	r23, r27
     af6:	66 0f       	add	r22, r22
     af8:	77 1f       	adc	r23, r23
     afa:	69 55       	subi	r22, 0x59	; 89
     afc:	7e 4f       	sbci	r23, 0xFE	; 254
     afe:	fb 01       	movw	r30, r22
     b00:	11 82       	std	Z+1, r1	; 0x01
     b02:	10 82       	st	Z, r1
     b04:	b9 01       	movw	r22, r18
     b06:	6f 5f       	subi	r22, 0xFF	; 255
     b08:	7f 4f       	sbci	r23, 0xFF	; 255
     b0a:	6a 0f       	add	r22, r26
     b0c:	7b 1f       	adc	r23, r27
     b0e:	66 0f       	add	r22, r22
     b10:	77 1f       	adc	r23, r23
     b12:	69 55       	subi	r22, 0x59	; 89
     b14:	7e 4f       	sbci	r23, 0xFE	; 254
     b16:	fb 01       	movw	r30, r22
     b18:	11 82       	std	Z+1, r1	; 0x01
     b1a:	10 82       	st	Z, r1

	void resetPlayerPosition(int x, int y) {
		resetIndexInBoard(x, y);
		resetIndexInBoard(x - 1, y);
		resetIndexInBoard(x + 1, y);
		resetIndexInBoard(x, y - 1);
     b1c:	f6 01       	movw	r30, r12
     b1e:	31 97       	sbiw	r30, 0x01	; 1
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     b20:	8f 01       	movw	r16, r30
     b22:	00 0f       	add	r16, r16
     b24:	11 1f       	adc	r17, r17
     b26:	00 0f       	add	r16, r16
     b28:	11 1f       	adc	r17, r17
     b2a:	00 0f       	add	r16, r16
     b2c:	11 1f       	adc	r17, r17
     b2e:	20 0f       	add	r18, r16
     b30:	31 1f       	adc	r19, r17
     b32:	22 0f       	add	r18, r18
     b34:	33 1f       	adc	r19, r19
     b36:	29 55       	subi	r18, 0x59	; 89
     b38:	3e 4f       	sbci	r19, 0xFE	; 254
     b3a:	f9 01       	movw	r30, r18
     b3c:	11 82       	std	Z+1, r1	; 0x01
     b3e:	10 82       	st	Z, r1
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     b40:	bd 01       	movw	r22, r26
     b42:	68 0f       	add	r22, r24
     b44:	79 1f       	adc	r23, r25
     b46:	66 0f       	add	r22, r22
     b48:	77 1f       	adc	r23, r23
     b4a:	69 55       	subi	r22, 0x59	; 89
     b4c:	7e 4f       	sbci	r23, 0xFE	; 254
     b4e:	23 e0       	ldi	r18, 0x03	; 3
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	fb 01       	movw	r30, r22
     b54:	31 83       	std	Z+1, r19	; 0x01
     b56:	20 83       	st	Z, r18
     b58:	bc 01       	movw	r22, r24
     b5a:	61 50       	subi	r22, 0x01	; 1
     b5c:	71 09       	sbc	r23, r1
     b5e:	6a 0f       	add	r22, r26
     b60:	7b 1f       	adc	r23, r27
     b62:	66 0f       	add	r22, r22
     b64:	77 1f       	adc	r23, r23
     b66:	69 55       	subi	r22, 0x59	; 89
     b68:	7e 4f       	sbci	r23, 0xFE	; 254
     b6a:	fb 01       	movw	r30, r22
     b6c:	31 83       	std	Z+1, r19	; 0x01
     b6e:	20 83       	st	Z, r18
     b70:	bc 01       	movw	r22, r24
     b72:	6f 5f       	subi	r22, 0xFF	; 255
     b74:	7f 4f       	sbci	r23, 0xFF	; 255
     b76:	a6 0f       	add	r26, r22
     b78:	b7 1f       	adc	r27, r23
     b7a:	aa 0f       	add	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	a9 55       	subi	r26, 0x59	; 89
     b80:	be 4f       	sbci	r27, 0xFE	; 254
     b82:	2d 93       	st	X+, r18
     b84:	3c 93       	st	X, r19
     b86:	f8 01       	movw	r30, r16
     b88:	e8 0f       	add	r30, r24
     b8a:	f9 1f       	adc	r31, r25
     b8c:	ee 0f       	add	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	e9 55       	subi	r30, 0x59	; 89
     b92:	fe 4f       	sbci	r31, 0xFE	; 254
     b94:	31 83       	std	Z+1, r19	; 0x01
     b96:	20 83       	st	Z, r18
     b98:	d7 01       	movw	r26, r14
     b9a:	1d 96       	adiw	r26, 0x0d	; 13
     b9c:	1c 92       	st	X, r1
     b9e:	76 c0       	rjmp	.+236    	; 0xc8c <_Z4loopj+0x418>
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     ba0:	e6 ec       	ldi	r30, 0xC6	; 198
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	21 85       	ldd	r18, Z+9	; 0x09
     ba6:	32 85       	ldd	r19, Z+10	; 0x0a
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     ba8:	63 85       	ldd	r22, Z+11	; 0x0b
     baa:	74 85       	ldd	r23, Z+12	; 0x0c

	void shiftPlayerRight (int shiftPositions) {
		int prevX = player.getX();
		int prevY = player.getY();

		int maxRightMovement = (BOARD_WIDTH - prevX - 2);
     bac:	86 e0       	ldi	r24, 0x06	; 6
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	82 1b       	sub	r24, r18
     bb2:	93 0b       	sbc	r25, r19
		if(shiftPositions > maxRightMovement) shiftPositions = maxRightMovement;
     bb4:	18 16       	cp	r1, r24
     bb6:	19 06       	cpc	r1, r25
     bb8:	14 f4       	brge	.+4      	; 0xbbe <_Z4loopj+0x34a>
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0

		movePlayer( prevX + shiftPositions, prevY);
     bbe:	82 0f       	add	r24, r18
     bc0:	93 1f       	adc	r25, r19
    int getX() const {
        return x;
    }

    void setX(int x) {
        Position::x = x;
     bc2:	06 ec       	ldi	r16, 0xC6	; 198
     bc4:	10 e0       	ldi	r17, 0x00	; 0
     bc6:	f8 01       	movw	r30, r16
     bc8:	92 87       	std	Z+10, r25	; 0x0a
     bca:	81 87       	std	Z+9, r24	; 0x09
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     bcc:	db 01       	movw	r26, r22
     bce:	aa 0f       	add	r26, r26
     bd0:	bb 1f       	adc	r27, r27
     bd2:	aa 0f       	add	r26, r26
     bd4:	bb 1f       	adc	r27, r27
     bd6:	aa 0f       	add	r26, r26
     bd8:	bb 1f       	adc	r27, r27
     bda:	fd 01       	movw	r30, r26
     bdc:	e2 0f       	add	r30, r18
     bde:	f3 1f       	adc	r31, r19
     be0:	ee 0f       	add	r30, r30
     be2:	ff 1f       	adc	r31, r31
     be4:	e9 55       	subi	r30, 0x59	; 89
     be6:	fe 4f       	sbci	r31, 0xFE	; 254
     be8:	11 82       	std	Z+1, r1	; 0x01
     bea:	10 82       	st	Z, r1
     bec:	f9 01       	movw	r30, r18
     bee:	31 97       	sbiw	r30, 0x01	; 1
     bf0:	ea 0f       	add	r30, r26
     bf2:	fb 1f       	adc	r31, r27
     bf4:	ee 0f       	add	r30, r30
     bf6:	ff 1f       	adc	r31, r31
     bf8:	e9 55       	subi	r30, 0x59	; 89
     bfa:	fe 4f       	sbci	r31, 0xFE	; 254
     bfc:	11 82       	std	Z+1, r1	; 0x01
     bfe:	10 82       	st	Z, r1
     c00:	f9 01       	movw	r30, r18
     c02:	31 96       	adiw	r30, 0x01	; 1
     c04:	ea 0f       	add	r30, r26
     c06:	fb 1f       	adc	r31, r27
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	e9 55       	subi	r30, 0x59	; 89
     c0e:	fe 4f       	sbci	r31, 0xFE	; 254
     c10:	11 82       	std	Z+1, r1	; 0x01
     c12:	10 82       	st	Z, r1

	void resetPlayerPosition(int x, int y) {
		resetIndexInBoard(x, y);
		resetIndexInBoard(x - 1, y);
		resetIndexInBoard(x + 1, y);
		resetIndexInBoard(x, y - 1);
     c14:	61 50       	subi	r22, 0x01	; 1
     c16:	71 09       	sbc	r23, r1
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     c18:	66 0f       	add	r22, r22
     c1a:	77 1f       	adc	r23, r23
     c1c:	66 0f       	add	r22, r22
     c1e:	77 1f       	adc	r23, r23
     c20:	66 0f       	add	r22, r22
     c22:	77 1f       	adc	r23, r23
     c24:	fb 01       	movw	r30, r22
     c26:	e2 0f       	add	r30, r18
     c28:	f3 1f       	adc	r31, r19
     c2a:	ee 0f       	add	r30, r30
     c2c:	ff 1f       	adc	r31, r31
     c2e:	e9 55       	subi	r30, 0x59	; 89
     c30:	fe 4f       	sbci	r31, 0xFE	; 254
     c32:	11 82       	std	Z+1, r1	; 0x01
     c34:	10 82       	st	Z, r1
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     c36:	fd 01       	movw	r30, r26
     c38:	e8 0f       	add	r30, r24
     c3a:	f9 1f       	adc	r31, r25
     c3c:	ee 0f       	add	r30, r30
     c3e:	ff 1f       	adc	r31, r31
     c40:	e9 55       	subi	r30, 0x59	; 89
     c42:	fe 4f       	sbci	r31, 0xFE	; 254
     c44:	23 e0       	ldi	r18, 0x03	; 3
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	31 83       	std	Z+1, r19	; 0x01
     c4a:	20 83       	st	Z, r18
     c4c:	fc 01       	movw	r30, r24
     c4e:	31 97       	sbiw	r30, 0x01	; 1
     c50:	ea 0f       	add	r30, r26
     c52:	fb 1f       	adc	r31, r27
     c54:	ee 0f       	add	r30, r30
     c56:	ff 1f       	adc	r31, r31
     c58:	e9 55       	subi	r30, 0x59	; 89
     c5a:	fe 4f       	sbci	r31, 0xFE	; 254
     c5c:	31 83       	std	Z+1, r19	; 0x01
     c5e:	20 83       	st	Z, r18
     c60:	fc 01       	movw	r30, r24
     c62:	31 96       	adiw	r30, 0x01	; 1
     c64:	ea 0f       	add	r30, r26
     c66:	fb 1f       	adc	r31, r27
     c68:	ee 0f       	add	r30, r30
     c6a:	ff 1f       	adc	r31, r31
     c6c:	e9 55       	subi	r30, 0x59	; 89
     c6e:	fe 4f       	sbci	r31, 0xFE	; 254
     c70:	31 83       	std	Z+1, r19	; 0x01
     c72:	20 83       	st	Z, r18
     c74:	fb 01       	movw	r30, r22
     c76:	e8 0f       	add	r30, r24
     c78:	f9 1f       	adc	r31, r25
     c7a:	ee 0f       	add	r30, r30
     c7c:	ff 1f       	adc	r31, r31
     c7e:	e9 55       	subi	r30, 0x59	; 89
     c80:	fe 4f       	sbci	r31, 0xFE	; 254
     c82:	31 83       	std	Z+1, r19	; 0x01
     c84:	20 83       	st	Z, r18
     c86:	d8 01       	movw	r26, r16
     c88:	1d 96       	adiw	r26, 0x0d	; 13
     c8a:	1c 92       	st	X, r1
	}


	void bulletPoll() {

		if(loopNo % BULLET_SHOOT_DELAY == 0) {
     c8c:	9a 01       	movw	r18, r20
     c8e:	32 95       	swap	r19
     c90:	22 95       	swap	r18
     c92:	2f 70       	andi	r18, 0x0F	; 15
     c94:	23 27       	eor	r18, r19
     c96:	3f 70       	andi	r19, 0x0F	; 15
     c98:	23 27       	eor	r18, r19
     c9a:	ae e3       	ldi	r26, 0x3E	; 62
     c9c:	ba e0       	ldi	r27, 0x0A	; 10
     c9e:	0e 94 0b 09 	call	0x1216	; 0x1216 <__umulhisi3>
     ca2:	20 e9       	ldi	r18, 0x90	; 144
     ca4:	31 e0       	ldi	r19, 0x01	; 1
     ca6:	fc 01       	movw	r30, r24
     ca8:	e2 9f       	mul	r30, r18
     caa:	c0 01       	movw	r24, r0
     cac:	e3 9f       	mul	r30, r19
     cae:	90 0d       	add	r25, r0
     cb0:	f2 9f       	mul	r31, r18
     cb2:	90 0d       	add	r25, r0
     cb4:	11 24       	eor	r1, r1
     cb6:	48 17       	cp	r20, r24
     cb8:	59 07       	cpc	r21, r25
     cba:	21 f4       	brne	.+8      	; 0xcc4 <_Z4loopj+0x450>
			bulletReadyToShoot = true;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__data_end+0x8>
     cc2:	05 c0       	rjmp	.+10     	; 0xcce <_Z4loopj+0x45a>
		}

		if(bulletReadyToShoot && HardwareController::isShootButtonPressed()) {
     cc4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__data_end+0x8>
     cc8:	88 23       	and	r24, r24
     cca:	09 f4       	brne	.+2      	; 0xcce <_Z4loopj+0x45a>
     ccc:	4b c0       	rjmp	.+150    	; 0xd64 <_Z4loopj+0x4f0>
		Lcd4_Set_Cursor(2, 0);
		Lcd4_Write_String(lower);
	}

	static bool isShootButtonPressed() {
		char res = PINA;
     cce:	89 b3       	in	r24, 0x19	; 25
     cd0:	ca 99       	sbic	0x19, 2	; 25
     cd2:	60 c2       	rjmp	.+1216   	; 0x1194 <_Z4loopj+0x920>
     cd4:	47 c0       	rjmp	.+142    	; 0xd64 <_Z4loopj+0x4f0>
	void shootNewBullet() {
		

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
			if(bulletPool[i].IsAlive() == false) {
     cd6:	20 81       	ld	r18, Z
     cd8:	21 11       	cpse	r18, r1
     cda:	3e c0       	rjmp	.+124    	; 0xd58 <_Z4loopj+0x4e4>
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <_Z4loopj+0x46e>
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
				activeBulletForShooting(bulletPool[i]);
     ce2:	fc 01       	movw	r30, r24
     ce4:	ee 0f       	add	r30, r30
     ce6:	ff 1f       	adc	r31, r31
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	ee 0f       	add	r30, r30
     cee:	ff 1f       	adc	r31, r31
     cf0:	8e 0f       	add	r24, r30
     cf2:	9f 1f       	adc	r25, r31
     cf4:	9c 01       	movw	r18, r24
     cf6:	2d 50       	subi	r18, 0x0D	; 13
     cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    unsigned int getRespawnTimeCounter() const {
        return respawnTimeCounter;
    }

    void setRespawnTimeCounter(unsigned int respawnTimeCounter) {
        NewBullet::respawnTimeCounter = respawnTimeCounter;
     cfa:	a6 ec       	ldi	r26, 0xC6	; 198
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	fc 01       	movw	r30, r24
     d00:	ea 53       	subi	r30, 0x3A	; 58
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	15 aa       	std	Z+53, r1	; 0x35
     d06:	14 aa       	std	Z+52, r1	; 0x34
    unsigned int getMoveTimeCounter() const {
        return moveTimeCounter;
    }

    void setMoveTimeCounter(unsigned int spawnTimerCounter) {
        NewBullet::moveTimeCounter = spawnTimerCounter;
     d08:	13 aa       	std	Z+51, r1	; 0x33
     d0a:	12 aa       	std	Z+50, r1	; 0x32
    bool IsAlive() const {
        return isActiveOnBoard;
    }

    void setIsAlive(bool isAlive) {
        NewBullet::isActiveOnBoard = isAlive;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	81 ab       	std	Z+49, r24	; 0x31
	void activeBulletForShooting(NewBullet &newBullet) {
		
			newBullet.setRespawnTimeCounter(0);
			newBullet.setMoveTimeCounter(0);
	        newBullet.setIsAlive(true);
	        newBullet.setBulletPosition(player.getX(), player.getY() - 2);
     d10:	1b 96       	adiw	r26, 0x0b	; 11
     d12:	ed 91       	ld	r30, X+
     d14:	fc 91       	ld	r31, X
     d16:	1c 97       	sbiw	r26, 0x0c	; 12
     d18:	af 01       	movw	r20, r30
     d1a:	42 50       	subi	r20, 0x02	; 2
     d1c:	51 09       	sbc	r21, r1
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     d1e:	19 96       	adiw	r26, 0x09	; 9
     d20:	8d 91       	ld	r24, X+
     d22:	9c 91       	ld	r25, X
     d24:	1a 97       	sbiw	r26, 0x0a	; 10
    }

    void setX(int x) {
        Position::x = x;
     d26:	f9 01       	movw	r30, r18
     d28:	91 83       	std	Z+1, r25	; 0x01
     d2a:	80 83       	st	Z, r24
    int getY() const {
        return y;
    }

    void setY(int y) {
        Position::y = y;
     d2c:	53 83       	std	Z+3, r21	; 0x03
     d2e:	42 83       	std	Z+2, r20	; 0x02
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     d30:	fa 01       	movw	r30, r20
     d32:	ee 0f       	add	r30, r30
     d34:	ff 1f       	adc	r31, r31
     d36:	ee 0f       	add	r30, r30
     d38:	ff 1f       	adc	r31, r31
     d3a:	ee 0f       	add	r30, r30
     d3c:	ff 1f       	adc	r31, r31
     d3e:	e8 0f       	add	r30, r24
     d40:	f9 1f       	adc	r31, r25
     d42:	ee 0f       	add	r30, r30
     d44:	ff 1f       	adc	r31, r31
     d46:	e9 55       	subi	r30, 0x59	; 89
     d48:	fe 4f       	sbci	r31, 0xFE	; 254
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	91 83       	std	Z+1, r25	; 0x01
     d50:	80 83       	st	Z, r24

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
			if(bulletPool[i].IsAlive() == false) {
				activeBulletForShooting(bulletPool[i]);
				bulletReadyToShoot = false;
     d52:	18 96       	adiw	r26, 0x08	; 8
     d54:	1c 92       	st	X, r1
     d56:	06 c0       	rjmp	.+12     	; 0xd64 <_Z4loopj+0x4f0>

	void shootNewBullet() {
		

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
     d58:	01 96       	adiw	r24, 0x01	; 1
     d5a:	39 96       	adiw	r30, 0x09	; 9
     d5c:	84 31       	cpi	r24, 0x14	; 20
     d5e:	91 05       	cpc	r25, r1
     d60:	09 f0       	breq	.+2      	; 0xd64 <_Z4loopj+0x4f0>
     d62:	b9 cf       	rjmp	.-142    	; 0xcd6 <_Z4loopj+0x462>
     d64:	0f 2e       	mov	r0, r31
     d66:	f3 ef       	ldi	r31, 0xF3	; 243
     d68:	8f 2e       	mov	r8, r31
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	9f 2e       	mov	r9, r31
     d6e:	f0 2d       	mov	r31, r0
     d70:	07 ea       	ldi	r16, 0xA7	; 167
     d72:	11 e0       	ldi	r17, 0x01	; 1
			if(bulletPool[i].IsAlive() == false) {
     d74:	f4 01       	movw	r30, r8
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     d76:	0f 2e       	mov	r0, r31
     d78:	f3 e0       	ldi	r31, 0x03	; 3
     d7a:	cf 2e       	mov	r12, r31
     d7c:	d1 2c       	mov	r13, r1
     d7e:	f0 2d       	mov	r31, r0
            int newY = p.getY() - 1;

            if(newY == -1) {
				if(newBullet.IsAlive()) resetIndexInBoard(prevX, prevY);
                newBullet.setIsAlive(false);
                newY = BOARD_HEIGHT - 1;
     d80:	0f 2e       	mov	r0, r31
     d82:	ff e0       	ldi	r31, 0x0F	; 15
     d84:	ef 2e       	mov	r14, r31
     d86:	f0 2d       	mov	r31, r0
     d88:	f1 2c       	mov	r15, r1
     d8a:	9f 01       	movw	r18, r30
		//newBullet.setRespawnTimeCounter( newBullet.getRespawnTimeCounter() + 1);


        unsigned int moveTime= BULLET_MOVE_TIME;
        unsigned int currentTime = newBullet.getMoveTimeCounter();
        newBullet.setMoveTimeCounter(currentTime + 1);
     d8c:	85 81       	ldd	r24, Z+5	; 0x05
     d8e:	96 81       	ldd	r25, Z+6	; 0x06
     d90:	01 96       	adiw	r24, 0x01	; 1
    unsigned int getMoveTimeCounter() const {
        return moveTimeCounter;
    }

    void setMoveTimeCounter(unsigned int spawnTimerCounter) {
        NewBullet::moveTimeCounter = spawnTimerCounter;
     d92:	96 83       	std	Z+6, r25	; 0x06
     d94:	85 83       	std	Z+5, r24	; 0x05

        if (newBullet.getMoveTimeCounter() >= moveTime) {
     d96:	86 39       	cpi	r24, 0x96	; 150
     d98:	91 05       	cpc	r25, r1
     d9a:	08 f4       	brcc	.+2      	; 0xd9e <_Z4loopj+0x52a>
     d9c:	57 c0       	rjmp	.+174    	; 0xe4c <_Z4loopj+0x5d8>
    int getY() const {
        return bulletPosition.getY();
    }

    const Position getBulletPosition() const {
        return bulletPosition;
     d9e:	40 80       	ld	r4, Z
     da0:	51 80       	ldd	r5, Z+1	; 0x01
     da2:	62 80       	ldd	r6, Z+2	; 0x02
     da4:	73 80       	ldd	r7, Z+3	; 0x03
            Position p = newBullet.getBulletPosition();
            int prevX = p.getX(),prevY = p.getY();

            int newX = p.getX();
            int newY = p.getY() - 1;
     da6:	a3 01       	movw	r20, r6
     da8:	41 50       	subi	r20, 0x01	; 1
     daa:	51 09       	sbc	r21, r1
     dac:	c0 f4       	brcc	.+48     	; 0xdde <_Z4loopj+0x56a>

            if(newY == -1) {
				if(newBullet.IsAlive()) resetIndexInBoard(prevX, prevY);
     dae:	44 81       	ldd	r20, Z+4	; 0x04
     db0:	44 23       	and	r20, r20
     db2:	81 f0       	breq	.+32     	; 0xdd4 <_Z4loopj+0x560>
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     db4:	a3 01       	movw	r20, r6
     db6:	44 0f       	add	r20, r20
     db8:	55 1f       	adc	r21, r21
     dba:	44 0f       	add	r20, r20
     dbc:	55 1f       	adc	r21, r21
     dbe:	44 0f       	add	r20, r20
     dc0:	55 1f       	adc	r21, r21
     dc2:	44 0d       	add	r20, r4
     dc4:	55 1d       	adc	r21, r5
     dc6:	44 0f       	add	r20, r20
     dc8:	55 1f       	adc	r21, r21
     dca:	49 55       	subi	r20, 0x59	; 89
     dcc:	5e 4f       	sbci	r21, 0xFE	; 254
     dce:	da 01       	movw	r26, r20
     dd0:	1d 92       	st	X+, r1
     dd2:	1c 92       	st	X, r1
    bool IsAlive() const {
        return isActiveOnBoard;
    }

    void setIsAlive(bool isAlive) {
        NewBullet::isActiveOnBoard = isAlive;
     dd4:	d9 01       	movw	r26, r18
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	1c 92       	st	X, r1
            int newY = p.getY() - 1;

            if(newY == -1) {
				if(newBullet.IsAlive()) resetIndexInBoard(prevX, prevY);
                newBullet.setIsAlive(false);
                newY = BOARD_HEIGHT - 1;
     dda:	4e 2d       	mov	r20, r14
     ddc:	5f 2d       	mov	r21, r15
    int getX() const {
        return x;
    }

    void setX(int x) {
        Position::x = x;
     dde:	d9 01       	movw	r26, r18
     de0:	11 96       	adiw	r26, 0x01	; 1
     de2:	5c 92       	st	X, r5
     de4:	4e 92       	st	-X, r4
    int getY() const {
        return y;
    }

    void setY(int y) {
        Position::y = y;
     de6:	13 96       	adiw	r26, 0x03	; 3
     de8:	5c 93       	st	X, r21
     dea:	4e 93       	st	-X, r20
     dec:	12 97       	sbiw	r26, 0x02	; 2
    unsigned int getMoveTimeCounter() const {
        return moveTimeCounter;
    }

    void setMoveTimeCounter(unsigned int spawnTimerCounter) {
        NewBullet::moveTimeCounter = spawnTimerCounter;
     dee:	16 96       	adiw	r26, 0x06	; 6
     df0:	1c 92       	st	X, r1
     df2:	1e 92       	st	-X, r1
     df4:	15 97       	sbiw	r26, 0x05	; 5
            newBullet.setBulletPosition(newX, newY);

            ////printStringToConsole("Enemy "+to_string(enemyNo)+"("+to_string(enemy.getX())+","+to_string(enemy.getY())+")");
            newBullet.setMoveTimeCounter(0);

            if(newBullet.IsAlive()) resetIndexInBoard(prevX, prevY);
     df6:	14 96       	adiw	r26, 0x04	; 4
     df8:	4c 91       	ld	r20, X
     dfa:	44 23       	and	r20, r20
     dfc:	39 f1       	breq	.+78     	; 0xe4c <_Z4loopj+0x5d8>
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     dfe:	a3 01       	movw	r20, r6
     e00:	44 0f       	add	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	44 0f       	add	r20, r20
     e06:	55 1f       	adc	r21, r21
     e08:	44 0f       	add	r20, r20
     e0a:	55 1f       	adc	r21, r21
     e0c:	c2 01       	movw	r24, r4
     e0e:	84 0f       	add	r24, r20
     e10:	95 1f       	adc	r25, r21
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	dc 01       	movw	r26, r24
     e18:	a9 55       	subi	r26, 0x59	; 89
     e1a:	be 4f       	sbci	r27, 0xFE	; 254
     e1c:	1d 92       	st	X+, r1
     e1e:	1c 92       	st	X, r1
    void setX(int x) {
        Position::x = x;
    }

    int getY() const {
        return y;
     e20:	d9 01       	movw	r26, r18
     e22:	12 96       	adiw	r26, 0x02	; 2
     e24:	4d 91       	ld	r20, X+
     e26:	5c 91       	ld	r21, X
     e28:	13 97       	sbiw	r26, 0x03	; 3
        x = 0;
        y = 0;
    }

    int getX() const {
        return x;
     e2a:	8d 91       	ld	r24, X+
     e2c:	9c 91       	ld	r25, X
		displayBoard[y][x] = 1;
	}

	void setIndexInBoard(int x, int y,int val) {
		checkIfConflict(x, y);
		displayBoard[y][x] = val;
     e2e:	da 01       	movw	r26, r20
     e30:	aa 0f       	add	r26, r26
     e32:	bb 1f       	adc	r27, r27
     e34:	aa 0f       	add	r26, r26
     e36:	bb 1f       	adc	r27, r27
     e38:	aa 0f       	add	r26, r26
     e3a:	bb 1f       	adc	r27, r27
     e3c:	a8 0f       	add	r26, r24
     e3e:	b9 1f       	adc	r27, r25
     e40:	aa 0f       	add	r26, r26
     e42:	bb 1f       	adc	r27, r27
     e44:	a9 55       	subi	r26, 0x59	; 89
     e46:	be 4f       	sbci	r27, 0xFE	; 254
     e48:	cd 92       	st	X+, r12
     e4a:	dc 92       	st	X, r13
     e4c:	39 96       	adiw	r30, 0x09	; 9
	}


    void updateNewBulletPositions() {
			
		for(int i = 0; i < BULLET_POOL_SIZE; i++) {
     e4e:	e0 17       	cp	r30, r16
     e50:	f1 07       	cpc	r31, r17
     e52:	09 f0       	breq	.+2      	; 0xe56 <_Z4loopj+0x5e2>
     e54:	9a cf       	rjmp	.-204    	; 0xd8a <_Z4loopj+0x516>
	}

	// for all objects, check for collision, update collision count and reset boards
	void updateBasedOnCollisions() {

		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
     e56:	e6 ec       	ldi	r30, 0xC6	; 198
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	40 81       	ld	r20, Z
     e5c:	51 81       	ldd	r21, Z+1	; 0x01
     e5e:	5a 8f       	std	Y+26, r21	; 0x1a
     e60:	49 8f       	std	Y+25, r20	; 0x19
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
     e62:	22 80       	ldd	r2, Z+2	; 0x02
     e64:	33 80       	ldd	r3, Z+3	; 0x03
     e66:	9f 01       	movw	r18, r30
	
		// checking for bullet and enemy collisions		
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
			for (unsigned int bulletCounter = 0; bulletCounter < BULLET_POOL_SIZE; bulletCounter++) {
				if (doesCollide(enemyPool[enemyCounter], bulletPool[bulletCounter])) {
					enemyBulletCollisionCounter++;
     e68:	af 01       	movw	r20, r30

	// for all objects, check for collision, update collision count and reset boards
	void updateBasedOnCollisions() {

		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
     e6a:	f4 01       	movw	r30, r8
     e6c:	3c 8f       	std	Y+28, r19	; 0x1c
     e6e:	2b 8f       	std	Y+27, r18	; 0x1b
	}

	
	bool doesCollide(const Enemy &enemy, const NewBullet &bullet) {
		
		if (!enemy.isAlive() || !bullet.IsAlive())
     e70:	d9 01       	movw	r26, r18
     e72:	52 96       	adiw	r26, 0x12	; 18
     e74:	8c 91       	ld	r24, X
     e76:	88 23       	and	r24, r24
     e78:	d9 f1       	breq	.+118    	; 0xef0 <_Z4loopj+0x67c>
     e7a:	64 81       	ldd	r22, Z+4	; 0x04
     e7c:	66 23       	and	r22, r22
     e7e:	c1 f1       	breq	.+112    	; 0xef0 <_Z4loopj+0x67c>
    int getY() const {
        return bulletPosition.getY();
    }

    const Position getBulletPosition() const {
        return bulletPosition;
     e80:	c0 80       	ld	r12, Z
     e82:	d1 80       	ldd	r13, Z+1	; 0x01
     e84:	e2 80       	ldd	r14, Z+2	; 0x02
     e86:	f3 80       	ldd	r15, Z+3	; 0x03
    int getY() const {
        return enemyPosition.getY();
    }

    const Position getEnemyPosition() const {
        return enemyPosition;
     e88:	ab 8d       	ldd	r26, Y+27	; 0x1b
     e8a:	bc 8d       	ldd	r27, Y+28	; 0x1c
     e8c:	1e 96       	adiw	r26, 0x0e	; 14
     e8e:	4d 90       	ld	r4, X+
     e90:	5d 90       	ld	r5, X+
     e92:	6d 90       	ld	r6, X+
     e94:	7c 90       	ld	r7, X
     e96:	51 97       	sbiw	r26, 0x11	; 17
    void setY(int y) {
        Position::y = y;
    }

    bool operator==(const Position other) const {
        return x == other.x && y == other.y;
     e98:	c4 14       	cp	r12, r4
     e9a:	d5 04       	cpc	r13, r5
     e9c:	49 f5       	brne	.+82     	; 0xef0 <_Z4loopj+0x67c>
     e9e:	e6 14       	cp	r14, r6
     ea0:	f7 04       	cpc	r15, r7
     ea2:	31 f5       	brne	.+76     	; 0xef0 <_Z4loopj+0x67c>
	
		// checking for bullet and enemy collisions		
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
			for (unsigned int bulletCounter = 0; bulletCounter < BULLET_POOL_SIZE; bulletCounter++) {
				if (doesCollide(enemyPool[enemyCounter], bulletPool[bulletCounter])) {
					enemyBulletCollisionCounter++;
     ea4:	da 01       	movw	r26, r20
     ea6:	6d 91       	ld	r22, X+
     ea8:	7c 91       	ld	r23, X
     eaa:	11 97       	sbiw	r26, 0x01	; 1
     eac:	6f 5f       	subi	r22, 0xFF	; 255
     eae:	7f 4f       	sbci	r23, 0xFF	; 255
     eb0:	6d 93       	st	X+, r22
     eb2:	7c 93       	st	X, r23
     eb4:	ab 8d       	ldd	r26, Y+27	; 0x1b
     eb6:	bc 8d       	ldd	r27, Y+28	; 0x1c
     eb8:	1e 96       	adiw	r26, 0x0e	; 14
     eba:	cd 90       	ld	r12, X+
     ebc:	dd 90       	ld	r13, X+
     ebe:	ed 90       	ld	r14, X+
     ec0:	fc 90       	ld	r15, X
     ec2:	51 97       	sbiw	r26, 0x11	; 17
		displayBoard[y][x] = val;
	}

	void resetIndexInBoard(int x, int y) {
		checkIfConflict(x, y);
		displayBoard[y][x] = 0;
     ec4:	b7 01       	movw	r22, r14
     ec6:	66 0f       	add	r22, r22
     ec8:	77 1f       	adc	r23, r23
     eca:	66 0f       	add	r22, r22
     ecc:	77 1f       	adc	r23, r23
     ece:	66 0f       	add	r22, r22
     ed0:	77 1f       	adc	r23, r23
     ed2:	c6 0e       	add	r12, r22
     ed4:	d7 1e       	adc	r13, r23
     ed6:	b6 01       	movw	r22, r12
     ed8:	66 0f       	add	r22, r22
     eda:	77 1f       	adc	r23, r23
     edc:	69 55       	subi	r22, 0x59	; 89
     ede:	7e 4f       	sbci	r23, 0xFE	; 254
     ee0:	db 01       	movw	r26, r22
     ee2:	1d 92       	st	X+, r1
     ee4:	1c 92       	st	X, r1
    bool IsAlive() const {
        return isActiveOnBoard;
    }

    void setIsAlive(bool isAlive) {
        NewBullet::isActiveOnBoard = isAlive;
     ee6:	14 82       	std	Z+4, r1	; 0x04
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
     ee8:	ab 8d       	ldd	r26, Y+27	; 0x1b
     eea:	bc 8d       	ldd	r27, Y+28	; 0x1c
     eec:	52 96       	adiw	r26, 0x12	; 18
     eee:	1c 92       	st	X, r1
     ef0:	39 96       	adiw	r30, 0x09	; 9
		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
	
		// checking for bullet and enemy collisions		
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
			for (unsigned int bulletCounter = 0; bulletCounter < BULLET_POOL_SIZE; bulletCounter++) {
     ef2:	e0 17       	cp	r30, r16
     ef4:	f1 07       	cpc	r31, r17
     ef6:	09 f0       	breq	.+2      	; 0xefa <_Z4loopj+0x686>
     ef8:	bb cf       	rjmp	.-138    	; 0xe70 <_Z4loopj+0x5fc>
     efa:	27 5f       	subi	r18, 0xF7	; 247
     efc:	3f 4f       	sbci	r19, 0xFF	; 255

		unsigned int lastEnemyBulletCollisionCounter = enemyBulletCollisionCounter;
		unsigned int lastEnemyPlayerCollisionCounter = enemyPlayerCollisionCounter;
	
		// checking for bullet and enemy collisions		
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	21 3e       	cpi	r18, 0xE1	; 225
     f02:	3b 07       	cpc	r19, r27
     f04:	09 f0       	breq	.+2      	; 0xf08 <_Z4loopj+0x694>
     f06:	b1 cf       	rjmp	.-158    	; 0xe6a <_Z4loopj+0x5f6>
		if (!enemy.isAlive()) return false;
		
		// dx and dy contains the change in x and y co-ordinate from origin of player position to get all the 
		// points needed by player.
		const int dx[] = {0, 0, -1, 1};
		const int dy[] = {0, -1, 0, 0};
     f08:	44 24       	eor	r4, r4
     f0a:	4a 94       	dec	r4
     f0c:	54 2c       	mov	r5, r4
    int getY() const {
        return playerPosition.getY();
    }

    const Position getPlayerPosition() const {
        return playerPosition;
     f0e:	0f 2e       	mov	r0, r31
     f10:	f6 ec       	ldi	r31, 0xC6	; 198
     f12:	6f 2e       	mov	r6, r31
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	7f 2e       	mov	r7, r31
     f18:	f0 2d       	mov	r31, r0
     f1a:	4e 01       	movw	r8, r28
     f1c:	e9 e1       	ldi	r30, 0x19	; 25
     f1e:	8e 0e       	add	r8, r30
     f20:	91 1c       	adc	r9, r1
     f22:	65 01       	movw	r12, r10
		return false;
	}


	bool doesCollide(const Enemy &enemy) {
		if (!enemy.isAlive()) return false;
     f24:	d5 01       	movw	r26, r10
     f26:	52 96       	adiw	r26, 0x12	; 18
     f28:	8c 91       	ld	r24, X
     f2a:	88 23       	and	r24, r24
     f2c:	b9 f1       	breq	.+110    	; 0xf9c <_Z4loopj+0x728>
		
		// dx and dy contains the change in x and y co-ordinate from origin of player position to get all the 
		// points needed by player.
		const int dx[] = {0, 0, -1, 1};
     f2e:	88 e0       	ldi	r24, 0x08	; 8
     f30:	e4 e6       	ldi	r30, 0x64	; 100
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	de 01       	movw	r26, r28
     f36:	51 96       	adiw	r26, 0x11	; 17
     f38:	01 90       	ld	r0, Z+
     f3a:	0d 92       	st	X+, r0
     f3c:	8a 95       	dec	r24
     f3e:	e1 f7       	brne	.-8      	; 0xf38 <_Z4loopj+0x6c4>
		const int dy[] = {0, -1, 0, 0};
     f40:	1a 82       	std	Y+2, r1	; 0x02
     f42:	19 82       	std	Y+1, r1	; 0x01
     f44:	5c 82       	std	Y+4, r5	; 0x04
     f46:	4b 82       	std	Y+3, r4	; 0x03
     f48:	1e 82       	std	Y+6, r1	; 0x06
     f4a:	1d 82       	std	Y+5, r1	; 0x05
     f4c:	18 86       	std	Y+8, r1	; 0x08
     f4e:	1f 82       	std	Y+7, r1	; 0x07
     f50:	f3 01       	movw	r30, r6
     f52:	81 85       	ldd	r24, Z+9	; 0x09
     f54:	92 85       	ldd	r25, Z+10	; 0x0a
     f56:	a3 85       	ldd	r26, Z+11	; 0x0b
     f58:	b4 85       	ldd	r27, Z+12	; 0x0c
     f5a:	ac 01       	movw	r20, r24
     f5c:	bd 01       	movw	r22, r26
    int getY() const {
        return enemyPosition.getY();
    }

    const Position getEnemyPosition() const {
        return enemyPosition;
     f5e:	f5 01       	movw	r30, r10
     f60:	86 85       	ldd	r24, Z+14	; 0x0e
     f62:	97 85       	ldd	r25, Z+15	; 0x0f
     f64:	a0 89       	ldd	r26, Z+16	; 0x10
     f66:	b1 89       	ldd	r27, Z+17	; 0x11
     f68:	9c 01       	movw	r18, r24
     f6a:	7d 01       	movw	r14, r26
     f6c:	fe 01       	movw	r30, r28
     f6e:	71 96       	adiw	r30, 0x11	; 17
     f70:	de 01       	movw	r26, r28
     f72:	11 96       	adiw	r26, 0x01	; 1
			
		const Position player_pos = player.getPlayerPosition();
		const Position enemy_pos = enemy.getEnemyPosition();
			
		for (int i = 0; i < 4; i++) {
			if (enemy_pos.getX() == player_pos.getX()+dx[i] && enemy_pos.getY() == player_pos.getY()+dy[i]) {
     f74:	81 91       	ld	r24, Z+
     f76:	91 91       	ld	r25, Z+
     f78:	84 0f       	add	r24, r20
     f7a:	95 1f       	adc	r25, r21
     f7c:	82 17       	cp	r24, r18
     f7e:	93 07       	cpc	r25, r19
     f80:	49 f4       	brne	.+18     	; 0xf94 <_Z4loopj+0x720>
     f82:	8d 91       	ld	r24, X+
     f84:	9c 91       	ld	r25, X
     f86:	11 97       	sbiw	r26, 0x01	; 1
     f88:	86 0f       	add	r24, r22
     f8a:	97 1f       	adc	r25, r23
     f8c:	e8 16       	cp	r14, r24
     f8e:	f9 06       	cpc	r15, r25
     f90:	09 f4       	brne	.+2      	; 0xf94 <_Z4loopj+0x720>
     f92:	0a c1       	rjmp	.+532    	; 0x11a8 <_Z4loopj+0x934>
     f94:	12 96       	adiw	r26, 0x02	; 2
		const int dy[] = {0, -1, 0, 0};
			
		const Position player_pos = player.getPlayerPosition();
		const Position enemy_pos = enemy.getEnemyPosition();
			
		for (int i = 0; i < 4; i++) {
     f96:	e8 15       	cp	r30, r8
     f98:	f9 05       	cpc	r31, r9
     f9a:	61 f7       	brne	.-40     	; 0xf74 <_Z4loopj+0x700>
     f9c:	f9 e0       	ldi	r31, 0x09	; 9
     f9e:	af 0e       	add	r10, r31
     fa0:	b1 1c       	adc	r11, r1
				}
			}
		}

		// checking for collision of enemy with the player
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
     fa2:	21 ee       	ldi	r18, 0xE1	; 225
     fa4:	a2 16       	cp	r10, r18
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	b2 06       	cpc	r11, r18
     faa:	09 f0       	breq	.+2      	; 0xfae <_Z4loopj+0x73a>
     fac:	ba cf       	rjmp	.-140    	; 0xf22 <_Z4loopj+0x6ae>
				enemyPlayerCollisionCounter++;
				enemyPool[enemyCounter].setIsAlive(false);
			}
		}
		
		if (lastEnemyPlayerCollisionCounter != enemyPlayerCollisionCounter 
     fae:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__data_end+0x2>
     fb2:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <__data_end+0x3>
     fb6:	28 16       	cp	r2, r24
     fb8:	39 06       	cpc	r3, r25
     fba:	51 f4       	brne	.+20     	; 0xfd0 <_Z4loopj+0x75c>
			|| lastEnemyBulletCollisionCounter != enemyBulletCollisionCounter) {
     fbc:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__data_end>
     fc0:	30 91 c7 00 	lds	r19, 0x00C7	; 0x8000c7 <__data_end+0x1>
     fc4:	49 8d       	ldd	r20, Y+25	; 0x19
     fc6:	5a 8d       	ldd	r21, Y+26	; 0x1a
     fc8:	42 17       	cp	r20, r18
     fca:	53 07       	cpc	r21, r19
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <_Z4loopj+0x75c>
     fce:	f9 c0       	rjmp	.+498    	; 0x11c2 <_Z4loopj+0x94e>
	// updates the values showed in the LCD display.
	// should be called after updatBased on collisions has been called.
	void updateLcdDisplay() {
		
		char healthStatus[16];
		if (enemyPlayerCollisionCounter < 5) {
     fd0:	85 30       	cpi	r24, 0x05	; 5
     fd2:	91 05       	cpc	r25, r1
     fd4:	50 f4       	brcc	.+20     	; 0xfea <_Z4loopj+0x776>
			strcpy(healthStatus, "Great health!");
     fd6:	8e e0       	ldi	r24, 0x0E	; 14
     fd8:	e1 e8       	ldi	r30, 0x81	; 129
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	de 01       	movw	r26, r28
     fde:	11 96       	adiw	r26, 0x01	; 1
     fe0:	01 90       	ld	r0, Z+
     fe2:	0d 92       	st	X+, r0
     fe4:	8a 95       	dec	r24
     fe6:	e1 f7       	brne	.-8      	; 0xfe0 <_Z4loopj+0x76c>
     fe8:	22 c0       	rjmp	.+68     	; 0x102e <_Z4loopj+0x7ba>
			} else if (enemyPlayerCollisionCounter < 10) {
     fea:	8a 30       	cpi	r24, 0x0A	; 10
     fec:	91 05       	cpc	r25, r1
     fee:	50 f4       	brcc	.+20     	; 0x1004 <_Z4loopj+0x790>
			strcpy(healthStatus, "Good health!");
     ff0:	8d e0       	ldi	r24, 0x0D	; 13
     ff2:	ef e8       	ldi	r30, 0x8F	; 143
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	de 01       	movw	r26, r28
     ff8:	11 96       	adiw	r26, 0x01	; 1
     ffa:	01 90       	ld	r0, Z+
     ffc:	0d 92       	st	X+, r0
     ffe:	8a 95       	dec	r24
    1000:	e1 f7       	brne	.-8      	; 0xffa <_Z4loopj+0x786>
    1002:	15 c0       	rjmp	.+42     	; 0x102e <_Z4loopj+0x7ba>
			} else if (enemyPlayerCollisionCounter < 15) {
    1004:	0f 97       	sbiw	r24, 0x0f	; 15
    1006:	50 f4       	brcc	.+20     	; 0x101c <_Z4loopj+0x7a8>
			strcpy(healthStatus, "Critical health :(");
    1008:	83 e1       	ldi	r24, 0x13	; 19
    100a:	ec e9       	ldi	r30, 0x9C	; 156
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	de 01       	movw	r26, r28
    1010:	11 96       	adiw	r26, 0x01	; 1
    1012:	01 90       	ld	r0, Z+
    1014:	0d 92       	st	X+, r0
    1016:	8a 95       	dec	r24
    1018:	e1 f7       	brne	.-8      	; 0x1012 <_Z4loopj+0x79e>
    101a:	09 c0       	rjmp	.+18     	; 0x102e <_Z4loopj+0x7ba>
			} else {
			strcpy(healthStatus, "Dead :'(");
    101c:	89 e0       	ldi	r24, 0x09	; 9
    101e:	ef ea       	ldi	r30, 0xAF	; 175
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	de 01       	movw	r26, r28
    1024:	11 96       	adiw	r26, 0x01	; 1
    1026:	01 90       	ld	r0, Z+
    1028:	0d 92       	st	X+, r0
    102a:	8a 95       	dec	r24
    102c:	e1 f7       	brne	.-8      	; 0x1026 <_Z4loopj+0x7b2>
	
	
	char* getScoreString(){
		
		// adding number of kills
		strcpy(score1, "Kills:");
    102e:	0f 2e       	mov	r0, r31
    1030:	f6 ec       	ldi	r31, 0xC6	; 198
    1032:	ef 2e       	mov	r14, r31
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	ff 2e       	mov	r15, r31
    1038:	f0 2d       	mov	r31, r0
    103a:	f7 01       	movw	r30, r14
    103c:	a4 81       	ldd	r26, Z+4	; 0x04
    103e:	b5 81       	ldd	r27, Z+5	; 0x05
    1040:	87 e0       	ldi	r24, 0x07	; 7
    1042:	e8 eb       	ldi	r30, 0xB8	; 184
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	01 90       	ld	r0, Z+
    1048:	0d 92       	st	X+, r0
    104a:	8a 95       	dec	r24
    104c:	e1 f7       	brne	.-8      	; 0x1046 <_Z4loopj+0x7d2>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    104e:	d7 01       	movw	r26, r14
    1050:	16 96       	adiw	r26, 0x06	; 6
    1052:	6d 91       	ld	r22, X+
    1054:	7c 91       	ld	r23, X
    1056:	17 97       	sbiw	r26, 0x07	; 7
    1058:	4a e0       	ldi	r20, 0x0A	; 10
    105a:	8d 91       	ld	r24, X+
    105c:	9c 91       	ld	r25, X
    105e:	0e 94 87 09 	call	0x130e	; 0x130e <__itoa_ncheck>
		itoa (enemyBulletCollisionCounter,score2,10);
		
		char temp[4] = "   ";
    1062:	80 e2       	ldi	r24, 0x20	; 32
    1064:	90 e2       	ldi	r25, 0x20	; 32
    1066:	9a 8b       	std	Y+18, r25	; 0x12
    1068:	89 8b       	std	Y+17, r24	; 0x11
    106a:	80 e2       	ldi	r24, 0x20	; 32
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	9c 8b       	std	Y+20, r25	; 0x14
    1070:	8b 8b       	std	Y+19, r24	; 0x13
		for (int i = 0; i < strlen(score2); i++) {
    1072:	f7 01       	movw	r30, r14
    1074:	a6 81       	ldd	r26, Z+6	; 0x06
    1076:	b7 81       	ldd	r27, Z+7	; 0x07
    1078:	ad 01       	movw	r20, r26
    107a:	9e 01       	movw	r18, r28
    107c:	2f 5e       	subi	r18, 0xEF	; 239
    107e:	3f 4f       	sbci	r19, 0xFF	; 255
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	fd 01       	movw	r30, r26
    1086:	01 90       	ld	r0, Z+
    1088:	00 20       	and	r0, r0
    108a:	e9 f7       	brne	.-6      	; 0x1086 <_Z4loopj+0x812>
    108c:	31 97       	sbiw	r30, 0x01	; 1
    108e:	ea 1b       	sub	r30, r26
    1090:	fb 0b       	sbc	r31, r27
    1092:	8e 17       	cp	r24, r30
    1094:	9f 07       	cpc	r25, r31
    1096:	40 f4       	brcc	.+16     	; 0x10a8 <_Z4loopj+0x834>
			temp[i] = score2[i];
    1098:	fa 01       	movw	r30, r20
    109a:	61 91       	ld	r22, Z+
    109c:	af 01       	movw	r20, r30
    109e:	f9 01       	movw	r30, r18
    10a0:	61 93       	st	Z+, r22
    10a2:	9f 01       	movw	r18, r30
		// adding number of kills
		strcpy(score1, "Kills:");
		itoa (enemyBulletCollisionCounter,score2,10);
		
		char temp[4] = "   ";
		for (int i = 0; i < strlen(score2); i++) {
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	ee cf       	rjmp	.-36     	; 0x1084 <_Z4loopj+0x810>
			temp[i] = score2[i];
		}		
		strcat(score1, temp);
    10a8:	0f 2e       	mov	r0, r31
    10aa:	f6 ec       	ldi	r31, 0xC6	; 198
    10ac:	ef 2e       	mov	r14, r31
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	ff 2e       	mov	r15, r31
    10b2:	f0 2d       	mov	r31, r0
    10b4:	be 01       	movw	r22, r28
    10b6:	6f 5e       	subi	r22, 0xEF	; 239
    10b8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ba:	d7 01       	movw	r26, r14
    10bc:	14 96       	adiw	r26, 0x04	; 4
    10be:	8d 91       	ld	r24, X+
    10c0:	9c 91       	ld	r25, X
    10c2:	15 97       	sbiw	r26, 0x05	; 5
    10c4:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <strcat>

		strcpy(score2,"     ");
    10c8:	f7 01       	movw	r30, r14
    10ca:	a6 81       	ldd	r26, Z+6	; 0x06
    10cc:	b7 81       	ldd	r27, Z+7	; 0x07
    10ce:	86 e0       	ldi	r24, 0x06	; 6
    10d0:	ef eb       	ldi	r30, 0xBF	; 191
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	01 90       	ld	r0, Z+
    10d6:	0d 92       	st	X+, r0
    10d8:	8a 95       	dec	r24
    10da:	e1 f7       	brne	.-8      	; 0x10d4 <_Z4loopj+0x860>
		for (int i = enemyPlayerCollisionCounter; i < 5; i++) {
    10dc:	d7 01       	movw	r26, r14
    10de:	12 96       	adiw	r26, 0x02	; 2
    10e0:	8d 91       	ld	r24, X+
    10e2:	9c 91       	ld	r25, X
    10e4:	13 97       	sbiw	r26, 0x03	; 3
    10e6:	85 30       	cpi	r24, 0x05	; 5
    10e8:	91 05       	cpc	r25, r1
    10ea:	64 f4       	brge	.+24     	; 0x1104 <_Z4loopj+0x890>
		    score2[i] = '+';
    10ec:	2b e2       	ldi	r18, 0x2B	; 43
    10ee:	16 96       	adiw	r26, 0x06	; 6
    10f0:	ed 91       	ld	r30, X+
    10f2:	fc 91       	ld	r31, X
    10f4:	17 97       	sbiw	r26, 0x07	; 7
    10f6:	e8 0f       	add	r30, r24
    10f8:	f9 1f       	adc	r31, r25
    10fa:	20 83       	st	Z, r18
			temp[i] = score2[i];
		}		
		strcat(score1, temp);

		strcpy(score2,"     ");
		for (int i = enemyPlayerCollisionCounter; i < 5; i++) {
    10fc:	01 96       	adiw	r24, 0x01	; 1
    10fe:	85 30       	cpi	r24, 0x05	; 5
    1100:	91 05       	cpc	r25, r1
    1102:	a9 f7       	brne	.-22     	; 0x10ee <_Z4loopj+0x87a>
		    score2[i] = '+';
		}

		strcat(score1, score2);
    1104:	0f 2e       	mov	r0, r31
    1106:	f6 ec       	ldi	r31, 0xC6	; 198
    1108:	ef 2e       	mov	r14, r31
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	ff 2e       	mov	r15, r31
    110e:	f0 2d       	mov	r31, r0
    1110:	f7 01       	movw	r30, r14
    1112:	66 81       	ldd	r22, Z+6	; 0x06
    1114:	77 81       	ldd	r23, Z+7	; 0x07
    1116:	84 81       	ldd	r24, Z+4	; 0x04
    1118:	95 81       	ldd	r25, Z+5	; 0x05
    111a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <strcat>
		        
		return score1;
    111e:	d7 01       	movw	r26, r14
    1120:	14 96       	adiw	r26, 0x04	; 4
    1122:	ed 90       	ld	r14, X+
    1124:	fc 90       	ld	r15, X
    1126:	15 97       	sbiw	r26, 0x05	; 5
		}
	}

	static void displayLcd(char * upper,char * lower)
	{
		Lcd4_Clear();
    1128:	0e 94 08 02 	call	0x410	; 0x410 <_Z10Lcd4_Clearv>
		Lcd4_Set_Cursor(1, 0);
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z15Lcd4_Set_Cursorcc>
		Lcd4_Write_String(upper);
    1134:	c7 01       	movw	r24, r14
    1136:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17Lcd4_Write_StringPc>
		Lcd4_Set_Cursor(2, 0);
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z15Lcd4_Set_Cursorcc>
		Lcd4_Write_String(lower);
    1142:	ce 01       	movw	r24, r28
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	0e 94 a3 02 	call	0x546	; 0x546 <_Z17Lcd4_Write_StringPc>
    114a:	3b c0       	rjmp	.+118    	; 0x11c2 <_Z4loopj+0x94e>
		// adding number of kills
		strcpy(score1, "Kills:");
		itoa (enemyBulletCollisionCounter,score2,10);
		
		char temp[4] = "   ";
		for (int i = 0; i < strlen(score2); i++) {
    114c:	65 01       	movw	r12, r10
    114e:	10 e0       	ldi	r17, 0x00	; 0

		for (int i = 0; i < rows; i++)
		{
			for (int j = 0; j < cols; j++)
			{
				if (board[i][j])
    1150:	f6 01       	movw	r30, r12
    1152:	81 91       	ld	r24, Z+
    1154:	91 91       	ld	r25, Z+
    1156:	6f 01       	movw	r12, r30
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	89 f0       	breq	.+34     	; 0x117e <_Z4loopj+0x90a>
				{
					//   ledPrint(j, 'B', i, 'A');  Moving to decoder printing
					//   //ledPrint(j, 'B', i, 'A');
					
					 if(board[i][j] == ENEMY_STATUS_IN_BOARD) {
    115c:	02 97       	sbiw	r24, 0x02	; 2
    115e:	31 f4       	brne	.+12     	; 0x116c <_Z4loopj+0x8f8>
						ledPrintUsingTwoDecoder(j, i,'R');
    1160:	42 e5       	ldi	r20, 0x52	; 82
    1162:	6e 2d       	mov	r22, r14
    1164:	81 2f       	mov	r24, r17
    1166:	0e 94 55 00 	call	0xaa	; 0xaa <_Z23ledPrintUsingTwoDecoderccc>
    116a:	05 c0       	rjmp	.+10     	; 0x1176 <_Z4loopj+0x902>
					 } else {
					 	ledPrintUsingTwoDecoder(j, i,'G');
    116c:	47 e4       	ldi	r20, 0x47	; 71
    116e:	6e 2d       	mov	r22, r14
    1170:	81 2f       	mov	r24, r17
    1172:	0e 94 55 00 	call	0xaa	; 0xaa <_Z23ledPrintUsingTwoDecoderccc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1176:	f1 e2       	ldi	r31, 0x21	; 33
    1178:	fa 95       	dec	r31
    117a:	f1 f7       	brne	.-4      	; 0x1178 <_Z4loopj+0x904>
    117c:	00 00       	nop
    117e:	1f 5f       	subi	r17, 0xFF	; 255
	{
		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++)
		{
			for (int j = 0; j < cols; j++)
    1180:	18 30       	cpi	r17, 0x08	; 8
    1182:	31 f7       	brne	.-52     	; 0x1150 <_Z4loopj+0x8dc>
    1184:	20 e1       	ldi	r18, 0x10	; 16
    1186:	a2 0e       	add	r10, r18
    1188:	b1 1c       	adc	r11, r1
    118a:	e3 94       	inc	r14
	//point by point scan
	static void displayBoardMatrixBackup(int board[BOARD_HEIGHT][BOARD_WIDTH])
	{
		int rows = BOARD_HEIGHT, cols = BOARD_WIDTH;

		for (int i = 0; i < rows; i++)
    118c:	40 e1       	ldi	r20, 0x10	; 16
    118e:	e4 12       	cpse	r14, r20
    1190:	dd cf       	rjmp	.-70     	; 0x114c <_Z4loopj+0x8d8>
    1192:	1a c0       	rjmp	.+52     	; 0x11c8 <_Z4loopj+0x954>
	void shootNewBullet() {
		

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
			if(bulletPool[i].IsAlive() == false) {
    1194:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__data_end+0x31>
    1198:	88 23       	and	r24, r24
    119a:	09 f4       	brne	.+2      	; 0x119e <_Z4loopj+0x92a>
    119c:	a0 cd       	rjmp	.-1216   	; 0xcde <_Z4loopj+0x46a>
    119e:	e0 e0       	ldi	r30, 0x00	; 0
    11a0:	f1 e0       	ldi	r31, 0x01	; 1

	void shootNewBullet() {
		

		
			for(int i = 0; i < BULLET_POOL_SIZE; i++) {
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	97 cd       	rjmp	.-1234   	; 0xcd6 <_Z4loopj+0x462>
		}

		// checking for collision of enemy with the player
		for (unsigned int enemyCounter = 0; enemyCounter < ENEMY_POOL_SIZE; enemyCounter++) {
			if (doesCollide(enemyPool[enemyCounter])) {
				enemyPlayerCollisionCounter++;
    11a8:	d3 01       	movw	r26, r6
    11aa:	12 96       	adiw	r26, 0x02	; 2
    11ac:	8d 91       	ld	r24, X+
    11ae:	9c 91       	ld	r25, X
    11b0:	13 97       	sbiw	r26, 0x03	; 3
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	13 96       	adiw	r26, 0x03	; 3
    11b6:	9c 93       	st	X, r25
    11b8:	8e 93       	st	-X, r24
    11ba:	12 97       	sbiw	r26, 0x02	; 2
    bool isAlive() const {
        return alive;
    }

    void setIsAlive(bool isalive) {
        Enemy::alive = isalive;
    11bc:	f6 01       	movw	r30, r12
    11be:	12 8a       	std	Z+18, r1	; 0x12
    11c0:	ed ce       	rjmp	.-550    	; 0xf9c <_Z4loopj+0x728>
		// adding number of kills
		strcpy(score1, "Kills:");
		itoa (enemyBulletCollisionCounter,score2,10);
		
		char temp[4] = "   ";
		for (int i = 0; i < strlen(score2); i++) {
    11c2:	e1 2c       	mov	r14, r1
    11c4:	58 01       	movw	r10, r16
    11c6:	c2 cf       	rjmp	.-124    	; 0x114c <_Z4loopj+0x8d8>
	gameController.bulletPoll();
	gameController.updateNewBulletPositions();
	gameController.updateBasedOnCollisions();//includes LCD updates
	
	HardwareController::displayBoardMatrixBackup(gameController.displayBoard);
}
    11c8:	6c 96       	adiw	r28, 0x1c	; 28
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	ff 90       	pop	r15
    11de:	ef 90       	pop	r14
    11e0:	df 90       	pop	r13
    11e2:	cf 90       	pop	r12
    11e4:	bf 90       	pop	r11
    11e6:	af 90       	pop	r10
    11e8:	9f 90       	pop	r9
    11ea:	8f 90       	pop	r8
    11ec:	7f 90       	pop	r7
    11ee:	6f 90       	pop	r6
    11f0:	5f 90       	pop	r5
    11f2:	4f 90       	pop	r4
    11f4:	3f 90       	pop	r3
    11f6:	2f 90       	pop	r2
    11f8:	08 95       	ret

000011fa <main>:

int main() {
	setup();
    11fa:	0e 94 1d 04 	call	0x83a	; 0x83a <_Z5setupv>
	unsigned int loopCount = 0;
    11fe:	c0 e0       	ldi	r28, 0x00	; 0
    1200:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (true) {
		loopCount++;
    1202:	21 96       	adiw	r28, 0x01	; 1
	    loop(loopCount);
    1204:	ce 01       	movw	r24, r28
    1206:	0e 94 3a 04 	call	0x874	; 0x874 <_Z4loopj>
    120a:	fb cf       	rjmp	.-10     	; 0x1202 <main+0x8>

0000120c <_GLOBAL__sub_I__Z8ledPrintcccc>:
#include "headers/game/GameController.h"
#include "headers/utils/HardwareController.h"

GameController gameController;
    120c:	86 ec       	ldi	r24, 0xC6	; 198
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	0e 94 b2 02 	call	0x564	; 0x564 <_ZN14GameControllerC1Ev>
    1214:	08 95       	ret

00001216 <__umulhisi3>:
    1216:	a2 9f       	mul	r26, r18
    1218:	b0 01       	movw	r22, r0
    121a:	b3 9f       	mul	r27, r19
    121c:	c0 01       	movw	r24, r0
    121e:	a3 9f       	mul	r26, r19
    1220:	70 0d       	add	r23, r0
    1222:	81 1d       	adc	r24, r1
    1224:	11 24       	eor	r1, r1
    1226:	91 1d       	adc	r25, r1
    1228:	b2 9f       	mul	r27, r18
    122a:	70 0d       	add	r23, r0
    122c:	81 1d       	adc	r24, r1
    122e:	11 24       	eor	r1, r1
    1230:	91 1d       	adc	r25, r1
    1232:	08 95       	ret

00001234 <__tablejump2__>:
    1234:	ee 0f       	add	r30, r30
    1236:	ff 1f       	adc	r31, r31
    1238:	05 90       	lpm	r0, Z+
    123a:	f4 91       	lpm	r31, Z
    123c:	e0 2d       	mov	r30, r0
    123e:	09 94       	ijmp

00001240 <do_rand>:
    1240:	8f 92       	push	r8
    1242:	9f 92       	push	r9
    1244:	af 92       	push	r10
    1246:	bf 92       	push	r11
    1248:	cf 92       	push	r12
    124a:	df 92       	push	r13
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	ec 01       	movw	r28, r24
    1256:	68 81       	ld	r22, Y
    1258:	79 81       	ldd	r23, Y+1	; 0x01
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	9b 81       	ldd	r25, Y+3	; 0x03
    125e:	61 15       	cp	r22, r1
    1260:	71 05       	cpc	r23, r1
    1262:	81 05       	cpc	r24, r1
    1264:	91 05       	cpc	r25, r1
    1266:	21 f4       	brne	.+8      	; 0x1270 <do_rand+0x30>
    1268:	64 e2       	ldi	r22, 0x24	; 36
    126a:	79 ed       	ldi	r23, 0xD9	; 217
    126c:	8b e5       	ldi	r24, 0x5B	; 91
    126e:	97 e0       	ldi	r25, 0x07	; 7
    1270:	2d e1       	ldi	r18, 0x1D	; 29
    1272:	33 ef       	ldi	r19, 0xF3	; 243
    1274:	41 e0       	ldi	r20, 0x01	; 1
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	0e 94 bc 09 	call	0x1378	; 0x1378 <__divmodsi4>
    127c:	49 01       	movw	r8, r18
    127e:	5a 01       	movw	r10, r20
    1280:	9b 01       	movw	r18, r22
    1282:	ac 01       	movw	r20, r24
    1284:	a7 ea       	ldi	r26, 0xA7	; 167
    1286:	b1 e4       	ldi	r27, 0x41	; 65
    1288:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__muluhisi3>
    128c:	6b 01       	movw	r12, r22
    128e:	7c 01       	movw	r14, r24
    1290:	ac ee       	ldi	r26, 0xEC	; 236
    1292:	b4 ef       	ldi	r27, 0xF4	; 244
    1294:	a5 01       	movw	r20, r10
    1296:	94 01       	movw	r18, r8
    1298:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__mulohisi3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	8c 0d       	add	r24, r12
    12a2:	9d 1d       	adc	r25, r13
    12a4:	ae 1d       	adc	r26, r14
    12a6:	bf 1d       	adc	r27, r15
    12a8:	b7 ff       	sbrs	r27, 7
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <do_rand+0x72>
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	a1 09       	sbc	r26, r1
    12b0:	b0 48       	sbci	r27, 0x80	; 128
    12b2:	88 83       	st	Y, r24
    12b4:	99 83       	std	Y+1, r25	; 0x01
    12b6:	aa 83       	std	Y+2, r26	; 0x02
    12b8:	bb 83       	std	Y+3, r27	; 0x03
    12ba:	9f 77       	andi	r25, 0x7F	; 127
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	df 90       	pop	r13
    12c6:	cf 90       	pop	r12
    12c8:	bf 90       	pop	r11
    12ca:	af 90       	pop	r10
    12cc:	9f 90       	pop	r9
    12ce:	8f 90       	pop	r8
    12d0:	08 95       	ret

000012d2 <rand_r>:
    12d2:	0e 94 20 09 	call	0x1240	; 0x1240 <do_rand>
    12d6:	08 95       	ret

000012d8 <rand>:
    12d8:	80 e6       	ldi	r24, 0x60	; 96
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0e 94 20 09 	call	0x1240	; 0x1240 <do_rand>
    12e0:	08 95       	ret

000012e2 <srand>:
    12e2:	a0 e0       	ldi	r26, 0x00	; 0
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    12ea:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
    12ee:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
    12f2:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
    12f6:	08 95       	ret

000012f8 <strcat>:
    12f8:	fb 01       	movw	r30, r22
    12fa:	dc 01       	movw	r26, r24
    12fc:	0d 90       	ld	r0, X+
    12fe:	00 20       	and	r0, r0
    1300:	e9 f7       	brne	.-6      	; 0x12fc <strcat+0x4>
    1302:	11 97       	sbiw	r26, 0x01	; 1
    1304:	01 90       	ld	r0, Z+
    1306:	0d 92       	st	X+, r0
    1308:	00 20       	and	r0, r0
    130a:	e1 f7       	brne	.-8      	; 0x1304 <strcat+0xc>
    130c:	08 95       	ret

0000130e <__itoa_ncheck>:
    130e:	bb 27       	eor	r27, r27
    1310:	4a 30       	cpi	r20, 0x0A	; 10
    1312:	31 f4       	brne	.+12     	; 0x1320 <__itoa_ncheck+0x12>
    1314:	99 23       	and	r25, r25
    1316:	22 f4       	brpl	.+8      	; 0x1320 <__itoa_ncheck+0x12>
    1318:	bd e2       	ldi	r27, 0x2D	; 45
    131a:	90 95       	com	r25
    131c:	81 95       	neg	r24
    131e:	9f 4f       	sbci	r25, 0xFF	; 255
    1320:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__utoa_common>

00001324 <__utoa_ncheck>:
    1324:	bb 27       	eor	r27, r27

00001326 <__utoa_common>:
    1326:	fb 01       	movw	r30, r22
    1328:	55 27       	eor	r21, r21
    132a:	aa 27       	eor	r26, r26
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	aa 1f       	adc	r26, r26
    1332:	a4 17       	cp	r26, r20
    1334:	10 f0       	brcs	.+4      	; 0x133a <__utoa_common+0x14>
    1336:	a4 1b       	sub	r26, r20
    1338:	83 95       	inc	r24
    133a:	50 51       	subi	r21, 0x10	; 16
    133c:	b9 f7       	brne	.-18     	; 0x132c <__utoa_common+0x6>
    133e:	a0 5d       	subi	r26, 0xD0	; 208
    1340:	aa 33       	cpi	r26, 0x3A	; 58
    1342:	08 f0       	brcs	.+2      	; 0x1346 <__utoa_common+0x20>
    1344:	a9 5d       	subi	r26, 0xD9	; 217
    1346:	a1 93       	st	Z+, r26
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	79 f7       	brne	.-34     	; 0x132a <__utoa_common+0x4>
    134c:	b1 11       	cpse	r27, r1
    134e:	b1 93       	st	Z+, r27
    1350:	11 92       	st	Z+, r1
    1352:	cb 01       	movw	r24, r22
    1354:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <strrev>

00001358 <strrev>:
    1358:	dc 01       	movw	r26, r24
    135a:	fc 01       	movw	r30, r24
    135c:	67 2f       	mov	r22, r23
    135e:	71 91       	ld	r23, Z+
    1360:	77 23       	and	r23, r23
    1362:	e1 f7       	brne	.-8      	; 0x135c <strrev+0x4>
    1364:	32 97       	sbiw	r30, 0x02	; 2
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <strrev+0x18>
    1368:	7c 91       	ld	r23, X
    136a:	6d 93       	st	X+, r22
    136c:	70 83       	st	Z, r23
    136e:	62 91       	ld	r22, -Z
    1370:	ae 17       	cp	r26, r30
    1372:	bf 07       	cpc	r27, r31
    1374:	c8 f3       	brcs	.-14     	; 0x1368 <strrev+0x10>
    1376:	08 95       	ret

00001378 <__divmodsi4>:
    1378:	05 2e       	mov	r0, r21
    137a:	97 fb       	bst	r25, 7
    137c:	1e f4       	brtc	.+6      	; 0x1384 <__divmodsi4+0xc>
    137e:	00 94       	com	r0
    1380:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__negsi2>
    1384:	57 fd       	sbrc	r21, 7
    1386:	07 d0       	rcall	.+14     	; 0x1396 <__divmodsi4_neg2>
    1388:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__udivmodsi4>
    138c:	07 fc       	sbrc	r0, 7
    138e:	03 d0       	rcall	.+6      	; 0x1396 <__divmodsi4_neg2>
    1390:	4e f4       	brtc	.+18     	; 0x13a4 <__divmodsi4_exit>
    1392:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__negsi2>

00001396 <__divmodsi4_neg2>:
    1396:	50 95       	com	r21
    1398:	40 95       	com	r20
    139a:	30 95       	com	r19
    139c:	21 95       	neg	r18
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
    13a0:	4f 4f       	sbci	r20, 0xFF	; 255
    13a2:	5f 4f       	sbci	r21, 0xFF	; 255

000013a4 <__divmodsi4_exit>:
    13a4:	08 95       	ret

000013a6 <__negsi2>:
    13a6:	90 95       	com	r25
    13a8:	80 95       	com	r24
    13aa:	70 95       	com	r23
    13ac:	61 95       	neg	r22
    13ae:	7f 4f       	sbci	r23, 0xFF	; 255
    13b0:	8f 4f       	sbci	r24, 0xFF	; 255
    13b2:	9f 4f       	sbci	r25, 0xFF	; 255
    13b4:	08 95       	ret

000013b6 <__muluhisi3>:
    13b6:	0e 94 0b 09 	call	0x1216	; 0x1216 <__umulhisi3>
    13ba:	a5 9f       	mul	r26, r21
    13bc:	90 0d       	add	r25, r0
    13be:	b4 9f       	mul	r27, r20
    13c0:	90 0d       	add	r25, r0
    13c2:	a4 9f       	mul	r26, r20
    13c4:	80 0d       	add	r24, r0
    13c6:	91 1d       	adc	r25, r1
    13c8:	11 24       	eor	r1, r1
    13ca:	08 95       	ret

000013cc <__mulshisi3>:
    13cc:	b7 ff       	sbrs	r27, 7
    13ce:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__muluhisi3>

000013d2 <__mulohisi3>:
    13d2:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__muluhisi3>
    13d6:	82 1b       	sub	r24, r18
    13d8:	93 0b       	sbc	r25, r19
    13da:	08 95       	ret

000013dc <__udivmodsi4>:
    13dc:	a1 e2       	ldi	r26, 0x21	; 33
    13de:	1a 2e       	mov	r1, r26
    13e0:	aa 1b       	sub	r26, r26
    13e2:	bb 1b       	sub	r27, r27
    13e4:	fd 01       	movw	r30, r26
    13e6:	0d c0       	rjmp	.+26     	; 0x1402 <__udivmodsi4_ep>

000013e8 <__udivmodsi4_loop>:
    13e8:	aa 1f       	adc	r26, r26
    13ea:	bb 1f       	adc	r27, r27
    13ec:	ee 1f       	adc	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	a2 17       	cp	r26, r18
    13f2:	b3 07       	cpc	r27, r19
    13f4:	e4 07       	cpc	r30, r20
    13f6:	f5 07       	cpc	r31, r21
    13f8:	20 f0       	brcs	.+8      	; 0x1402 <__udivmodsi4_ep>
    13fa:	a2 1b       	sub	r26, r18
    13fc:	b3 0b       	sbc	r27, r19
    13fe:	e4 0b       	sbc	r30, r20
    1400:	f5 0b       	sbc	r31, r21

00001402 <__udivmodsi4_ep>:
    1402:	66 1f       	adc	r22, r22
    1404:	77 1f       	adc	r23, r23
    1406:	88 1f       	adc	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	1a 94       	dec	r1
    140c:	69 f7       	brne	.-38     	; 0x13e8 <__udivmodsi4_loop>
    140e:	60 95       	com	r22
    1410:	70 95       	com	r23
    1412:	80 95       	com	r24
    1414:	90 95       	com	r25
    1416:	9b 01       	movw	r18, r22
    1418:	ac 01       	movw	r20, r24
    141a:	bd 01       	movw	r22, r26
    141c:	cf 01       	movw	r24, r30
    141e:	08 95       	ret

00001420 <_exit>:
    1420:	f8 94       	cli

00001422 <__stop_program>:
    1422:	ff cf       	rjmp	.-2      	; 0x1422 <__stop_program>
