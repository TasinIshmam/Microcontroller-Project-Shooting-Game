
GyroTestC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003002  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00003002  00003096  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a1  008000aa  008000aa  000030e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000030e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003110  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  0000314c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034df  00000000  00000000  0000339c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e57  00000000  00000000  0000687b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017e5  00000000  00000000  000076d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000086c  00000000  00000000  00008eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a41  00000000  00000000  00009724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032f0  00000000  00000000  0000a165  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0000d455  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__ctors_end>
       4:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__vector_1>
       8:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__bad_interrupt>
       c:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__bad_interrupt>
      10:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__bad_interrupt>
      14:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__bad_interrupt>
      18:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__bad_interrupt>
      1c:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__bad_interrupt>
      20:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__bad_interrupt>
      24:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__vector_9>
      28:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__bad_interrupt>
      2c:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__bad_interrupt>
      30:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__bad_interrupt>
      34:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <__vector_13>
      38:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__vector_14>
      3c:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__bad_interrupt>
      40:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__bad_interrupt>
      44:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__bad_interrupt>
      48:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__bad_interrupt>
      4c:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__bad_interrupt>
      50:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__bad_interrupt>
      54:	03 6e       	ori	r16, 0xE3	; 227
      56:	db 36       	cpi	r29, 0x6B	; 107
      58:	3d 9a       	sbi	0x07, 5	; 7
      5a:	99 99       	sbic	0x13, 1	; 19
      5c:	99 3d       	cpi	r25, 0xD9	; 217
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	3e 00       	.word	0x003e	; ????
      64:	00 00       	nop
      66:	80 3f       	cpi	r24, 0xF0	; 240
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 07       	cpc	r19, r31
      96:	2c 7a       	andi	r18, 0xAC	; 172
      98:	a5 ba       	out	0x15, r10	; 21
      9a:	6c c5       	rjmp	.+2776   	; 0xb74 <main+0x66>
      9c:	90 da       	rcall	.-2784   	; 0xfffff5be <__eeprom_end+0xff7ef5be>
      9e:	3b 93       	.word	0x933b	; ????
      a0:	65 fc       	sbrc	r6, 5
      a2:	8b bc       	out	0x2b, r8	; 43
      a4:	53 f8       	bld	r5, 3
      a6:	10 fd       	sbrc	r17, 0
      a8:	3c 56       	subi	r19, 0x6C	; 108
      aa:	92 83       	std	Z+2, r25	; 0x02
      ac:	4d bd       	out	0x2d, r20	; 45
      ae:	87 9d       	mul	r24, r7
      b0:	3a b6       	in	r3, 0x3a	; 58
      b2:	3d cb       	rjmp	.-2438   	; 0xfffff72e <__eeprom_end+0xff7ef72e>
      b4:	c9 bf       	out	0x39, r28	; 57
      b6:	5b be       	out	0x3b, r5	; 59
      b8:	73 da       	rcall	.-2842   	; 0xfffff5a0 <__eeprom_end+0xff7ef5a0>
      ba:	0f c9       	rjmp	.-3554   	; 0xfffff2da <__eeprom_end+0xff7ef2da>
      bc:	3f 00       	.word	0x003f	; ????

000000be <__trampolines_end>:
      be:	00 40       	sbci	r16, 0x00	; 0
      c0:	7a 10       	cpse	r7, r10
      c2:	f3 5a       	subi	r31, 0xA3	; 163
      c4:	00 a0       	ldd	r0, Z+32	; 0x20
      c6:	72 4e       	sbci	r23, 0xE2	; 226
      c8:	18 09       	sbc	r17, r8
      ca:	00 10       	cpse	r0, r0
      cc:	a5 d4       	rcall	.+2378   	; 0xa18 <__stack+0x1b9>
      ce:	e8 00       	.word	0x00e8	; ????
      d0:	00 e8       	ldi	r16, 0x80	; 128
      d2:	76 48       	sbci	r23, 0x86	; 134
      d4:	17 00       	.word	0x0017	; ????
      d6:	00 e4       	ldi	r16, 0x40	; 64
      d8:	0b 54       	subi	r16, 0x4B	; 75
      da:	02 00       	.word	0x0002	; ????
      dc:	00 ca       	rjmp	.-3072   	; 0xfffff4de <__eeprom_end+0xff7ef4de>
      de:	9a 3b       	cpi	r25, 0xBA	; 186
      e0:	00 00       	nop
      e2:	00 e1       	ldi	r16, 0x10	; 16
      e4:	f5 05       	cpc	r31, r5
      e6:	00 00       	nop
      e8:	80 96       	adiw	r24, 0x20	; 32
      ea:	98 00       	.word	0x0098	; ????
      ec:	00 00       	nop
      ee:	40 42       	sbci	r20, 0x20	; 32
      f0:	0f 00       	.word	0x000f	; ????
      f2:	00 00       	nop
      f4:	a0 86       	std	Z+8, r10	; 0x08
      f6:	01 00       	.word	0x0001	; ????
      f8:	00 00       	nop
      fa:	10 27       	eor	r17, r16
      fc:	00 00       	nop
      fe:	00 00       	nop
     100:	e8 03       	fmulsu	r22, r16
     102:	00 00       	nop
     104:	00 00       	nop
     106:	64 00       	.word	0x0064	; ????
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	0a 00       	.word	0x000a	; ????
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	01 00       	.word	0x0001	; ????
     114:	00 00       	nop
     116:	00 00       	nop
     118:	2c 76       	andi	r18, 0x6C	; 108
     11a:	d8 88       	ldd	r13, Y+16	; 0x10
     11c:	dc 67       	ori	r29, 0x7C	; 124
     11e:	4f 08       	sbc	r4, r15
     120:	23 df       	rcall	.-442    	; 0xffffff68 <__eeprom_end+0xff7eff68>
     122:	c1 df       	rcall	.-126    	; 0xa6 <__SREG__+0x67>
     124:	ae 59       	subi	r26, 0x9E	; 158
     126:	e1 b1       	in	r30, 0x01	; 1
     128:	b7 96       	adiw	r30, 0x27	; 39
     12a:	e5 e3       	ldi	r30, 0x35	; 53
     12c:	e4 53       	subi	r30, 0x34	; 52
     12e:	c6 3a       	cpi	r28, 0xA6	; 166
     130:	e6 51       	subi	r30, 0x16	; 22
     132:	99 76       	andi	r25, 0x69	; 105
     134:	96 e8       	ldi	r25, 0x86	; 134
     136:	e6 c2       	rjmp	.+1484   	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
     138:	84 26       	eor	r8, r20
     13a:	eb 89       	ldd	r30, Y+19	; 0x13
     13c:	8c 9b       	sbis	0x11, 4	; 17
     13e:	62 ed       	ldi	r22, 0xD2	; 210
     140:	40 7c       	andi	r20, 0xC0	; 192
     142:	6f fc       	.word	0xfc6f	; ????
     144:	ef bc       	out	0x2f, r14	; 47
     146:	9c 9f       	mul	r25, r28
     148:	40 f2       	brcs	.-112    	; 0xda <__trampolines_end+0x1c>
     14a:	ba a5       	ldd	r27, Y+42	; 0x2a
     14c:	6f a5       	ldd	r22, Y+47	; 0x2f
     14e:	f4 90       	lpm	r15, Z
     150:	05 5a       	subi	r16, 0xA5	; 165
     152:	2a f7       	brpl	.-54     	; 0x11e <__trampolines_end+0x60>
     154:	5c 93       	st	X, r21
     156:	6b 6c       	ori	r22, 0xCB	; 203
     158:	f9 67       	ori	r31, 0x79	; 121
     15a:	6d c1       	rjmp	.+730    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     15c:	1b fc       	.word	0xfc1b	; ????
     15e:	e0 e4       	ldi	r30, 0x40	; 64
     160:	0d 47       	sbci	r16, 0x7D	; 125
     162:	fe f5       	brtc	.+126    	; 0x1e2 <mpu6050_dmpUpdates+0x2a>
     164:	20 e6       	ldi	r18, 0x60	; 96
     166:	b5 00       	.word	0x00b5	; ????
     168:	d0 ed       	ldi	r29, 0xD0	; 208
     16a:	90 2e       	mov	r9, r16
     16c:	03 00       	.word	0x0003	; ????
     16e:	94 35       	cpi	r25, 0x54	; 84
     170:	77 05       	cpc	r23, r7
     172:	00 80       	ld	r0, Z
     174:	84 1e       	adc	r8, r20
     176:	08 00       	.word	0x0008	; ????
     178:	00 20       	and	r0, r0
     17a:	4e 0a       	sbc	r4, r30
     17c:	00 00       	nop
     17e:	00 c8       	rjmp	.-4096   	; 0xfffff180 <__eeprom_end+0xff7ef180>
     180:	0c 33       	cpi	r16, 0x3C	; 60
     182:	33 33       	cpi	r19, 0x33	; 51
     184:	33 0f       	add	r19, r19
     186:	98 6e       	ori	r25, 0xE8	; 232
     188:	12 83       	std	Z+2, r17	; 0x02
     18a:	11 41       	sbci	r17, 0x11	; 17
     18c:	ef 8d       	ldd	r30, Y+31	; 0x1f
     18e:	21 14       	cp	r2, r1
     190:	89 3b       	cpi	r24, 0xB9	; 185
     192:	e6 55       	subi	r30, 0x56	; 86
     194:	16 cf       	rjmp	.-468    	; 0xffffffc2 <__eeprom_end+0xff7effc2>
     196:	fe e6       	ldi	r31, 0x6E	; 110
     198:	db 18       	sub	r13, r11
     19a:	d1 84       	ldd	r13, Z+9	; 0x09
     19c:	4b 38       	cpi	r20, 0x8B	; 139
     19e:	1b f7       	brvc	.-58     	; 0x166 <__trampolines_end+0xa8>
     1a0:	7c 1d       	adc	r23, r12
     1a2:	90 1d       	adc	r25, r0
     1a4:	a4 bb       	out	0x14, r26	; 20
     1a6:	e4 24       	eor	r14, r4
     1a8:	20 32       	cpi	r18, 0x20	; 32
     1aa:	84 72       	andi	r24, 0x24	; 36
     1ac:	5e 22       	and	r5, r30
     1ae:	81 00       	.word	0x0081	; ????
     1b0:	c9 f1       	breq	.+114    	; 0x224 <mpu6050_dmpConfig+0x3d>
     1b2:	24 ec       	ldi	r18, 0xC4	; 196
     1b4:	a1 e5       	ldi	r26, 0x51	; 81
     1b6:	3d 27       	eor	r19, r29

000001b8 <mpu6050_dmpUpdates>:
     1b8:	01 b2 02 ff ff 01 90 04 09 23 a1 35 01 6a 02 06     .........#.5.j..
     1c8:	00 01 60 08 00 00 00 00 00 00 00 00 00 60 04 40     ..`..........`.@
     1d8:	00 00 00 01 62 02 00 00 00 60 04 00 40 00 00        ....b....`..@..

000001e7 <mpu6050_dmpConfig>:
     1e7:	03 7b 03 4c cd 6c 03 ab 03 36 56 76 00 68 04 02     .{.L.l...6Vv.h..
     1f7:	cb 47 a2 02 18 04 00 05 8b c1 01 0c 04 00 00 00     .G..............
     207:	00 03 7f 06 0c c9 2c 97 97 97 03 89 03 26 46 66     ......,......&Ff
     217:	00 6c 02 20 00 02 40 04 00 00 00 00 02 44 04 00     .l. ..@......D..
     227:	00 00 00 02 48 04 00 00 00 00 02 4c 04 00 00 00     ....H......L....
     237:	00 02 50 04 00 00 00 00 02 54 04 00 00 00 00 02     ..P......T......
     247:	58 04 00 00 00 00 02 5c 04 00 00 00 00 02 bc 04     X......\........
     257:	00 00 00 00 01 ec 04 00 00 40 00 03 7f 06 0c c9     .........@......
     267:	2c 97 97 97 04 02 03 0d 35 5d 04 09 04 87 2d 35     ,.......5]....-5
     277:	3d 00 a3 01 00 00 00 00 01 07 86 01 fe 07 41 05     =.............A.
     287:	f1 20 28 30 38 07 7e 01 30 07 46 01 9a 07 47 04     . (08.~.0.F...G.
     297:	f1 28 30 38 07 6c 04 f1 28 30 38 02 16 02 00 09     .(08.l..(08.....

000002a7 <mpu6050_dmpMemory>:
     2a7:	fb 00 00 3e 00 0b 00 36 00 01 00 02 00 03 00 00     ...>...6........
     2b7:	00 65 00 54 ff ef 00 00 fa 80 00 0b 12 82 00 01     .e.T............
     2c7:	00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     2d7:	00 28 00 00 ff ff 45 81 ff ff fa 72 00 00 00 00     .(....E....r....
     2e7:	00 00 03 e8 00 00 00 01 00 01 7f ff ff fe 80 01     ................
     2f7:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     307:	00 3e 03 30 40 00 00 00 02 ca e3 09 3e 80 00 00     .>.0@.......>...
     317:	20 00 00 00 00 00 00 00 40 00 00 00 60 00 00 00      .......@...`...
     327:	41 ff 00 00 00 00 0b 2a 00 00 16 55 00 00 21 82     A......*...U..!.
     337:	fd 87 26 50 fd 80 00 00 00 1f 00 00 00 05 80 00     ..&P............
     347:	00 00 00 00 00 01 00 00 00 02 00 00 00 03 00 00     ................
     357:	40 00 00 00 00 00 04 6f 00 02 65 32 00 00 5e c0     @......o..e2..^.
     367:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     377:	fb 8c 6f 5d fd 5d 08 d9 00 7c 73 3b 00 6c 12 cc     ..o].]...|s;.l..
     387:	32 00 13 9d 32 00 d0 d6 32 00 08 00 40 00 01 f4     2...2...2...@...
     397:	ff e6 80 79 02 00 00 00 00 00 d0 d6 00 00 27 10     ...y..........'.
     3a7:	fb 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00     ....@...........
     3b7:	00 00 00 01 00 00 00 00 00 00 01 00 01 00 00 00     ................
     3c7:	00 00 fa 36 ff bc 30 8e 00 05 fb f0 ff d9 5b c8     ...6..0.......[.
     3d7:	ff d0 9a be 00 00 10 a9 ff f4 1e b2 00 ce bb f7     ................
     3e7:	00 00 00 01 00 00 00 04 00 02 00 02 02 00 00 0c     ................
     3f7:	ff c2 80 00 00 01 80 00 00 cf 80 00 40 00 00 00     ............@...
     407:	00 00 00 01 00 00 00 00 00 00 06 00 00 00 00 14     ................
	...
     44b:	03 3f 68 b6 79 35 28 bc c6 7e d1 6c 80 00 00 00     .?h.y5(..~.l....
     45b:	40 00 00 00 00 00 b2 6a 00 00 00 00 00 00 00 00     @......j........
     46b:	00 00 00 00 00 00 3f f0 00 00 00 30 00 00 00 00     ......?....0....
	...
     497:	00 00 25 4d 00 2f 70 6d 00 00 05 ae 00 0c 02 d0     ..%M./pm........
     4a7:	00 00 00 00 00 65 00 54 ff ef 00 00 00 00 00 00     .....e.T........
     4b7:	00 00 01 00 00 44 00 00 00 00 0c 00 00 00 01 00     .....D..........
     4c7:	00 00 00 00 00 65 00 00 00 54 00 00 ff ef 00 00     .....e...T......
	...
     4e7:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     4f7:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     507:	00 00 00 01 00 00 00 02 00 00 00 00 00 00 00 00     ................
	...
     537:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     563:	40 00 00 00 00 1b 00 00 00 00 00 00 00 00 00 00     @...............
	...
     5a7:	d8 dc ba a2 f1 de b2 b8 b4 a8 81 91 f7 4a 90 7f     .............J..
     5b7:	91 6a f3 f9 db a8 f9 b0 ba a0 80 f2 ce 81 f3 c2     .j..............
     5c7:	f1 c1 f2 c3 f3 cc a2 b2 80 f1 c6 d8 80 ba a7 df     ................
     5d7:	df df f2 a7 c3 cb c5 b6 f0 87 a2 94 24 48 70 3c     ............$Hp<
     5e7:	95 40 68 34 58 9b 78 a2 f1 83 92 2d 55 7d d8 b1     .@h4X.x....-U}..
     5f7:	b4 b8 a1 d0 91 80 f2 70 f3 70 f2 7c 80 a8 f1 01     .......p.p.|....
     607:	b0 98 87 d9 43 d8 86 c9 88 ba a1 f2 0e b8 97 80     ....C...........
     617:	f1 a9 df df df aa df df df f2 aa c5 cd c7 a9 0c     ................
     627:	c9 2c 97 97 97 97 f1 a9 89 26 46 66 b0 b4 ba 80     .,.......&Ff....
     637:	ac de f2 ca f1 b2 8c 02 a9 b6 98 00 89 0e 16 1e     ................
     647:	b8 a9 b4 99 2c 54 7c b0 8a a8 96 36 56 76 f1 b9     ....,T|....6Vv..
     657:	af b4 b0 83 c0 b8 a8 97 11 b1 8f 98 b9 af f0 24     ...............$
     667:	08 44 10 64 18 f1 a3 29 55 7d af 83 b5 93 af f0     .D.d...)U}......
     677:	00 28 50 f1 a3 86 9f 61 a6 da de df d9 fa a3 86     .(P....a........
     687:	96 db 31 a6 d9 f8 df ba a6 8f c2 c5 c7 b2 8c c1     ..1.............
     697:	b8 a2 df df df a3 df df df d8 d8 f1 b8 a8 b2 86     ................
     6a7:	b4 98 0d 35 5d b8 aa 98 b0 87 2d 35 3d b2 b6 ba     ...5].....-5=...
     6b7:	af 8c 96 19 8f 9f a7 0e 16 1e b4 9a b8 aa 87 2c     ...............,
     6c7:	54 7c b9 a3 de df df a3 b1 80 f2 c4 cd c9 f1 b8     T|..............
     6d7:	a9 b4 99 83 0d 35 5d 89 b9 a3 2d 55 7d b5 93 a3     .....5]...-U}...
     6e7:	0e 16 1e a9 2c 54 7c b8 b4 b0 f1 97 83 a8 11 84     ....,T|.........
     6f7:	a5 09 98 a3 83 f0 da 24 08 44 10 64 18 d8 f1 a5     .......$.D.d....
     707:	29 55 7d a5 85 95 02 1a 2e 3a 56 5a 40 48 f9 f3     )U}......:VZ@H..
     717:	a3 d9 f8 f0 98 83 24 08 44 10 64 18 97 82 a8 f1     ......$.D.d.....
     727:	11 f0 98 a2 24 08 44 10 64 18 da f3 de d8 83 a5     ....$.D.d.......
     737:	94 01 d9 a3 02 f1 a2 c3 c5 c7 d8 f1 84 92 a2 4d     ...............M
     747:	da 2a d8 48 69 d9 2a d8 68 55 da 32 d8 50 71 d9     .*.Hi.*.hU.2.Pq.
     757:	32 d8 70 5d da 3a d8 58 79 d9 3a d8 78 93 a3 4d     2.p].:.Xy.:.x..M
     767:	da 2a d8 48 69 d9 2a d8 68 55 da 32 d8 50 71 d9     .*.Hi.*.hU.2.Pq.
     777:	32 d8 70 5d da 3a d8 58 79 d9 3a d8 78 a8 8a 9a     2.p].:.Xy.:.x...
     787:	f0 28 50 78 9e f3 88 18 f1 9f 1d 98 a8 d9 08 d8     .(Px............
     797:	c8 9f 12 9e f3 15 a8 da 12 10 d8 f1 af c8 97 87     ................
     7a7:	34 b5 b9 94 a4 21 f3 d9 22 d8 f2 2d f3 d9 2a d8     4....!.."..-..*.
     7b7:	f2 35 f3 d9 32 d8 81 a4 60 60 61 d9 61 d8 6c 68     .5..2...``a.a.lh
     7c7:	69 d9 69 d8 74 70 71 d9 71 d8 b1 a3 84 19 3d 5d     i.i.tpq.q.....=]
     7d7:	a3 83 1a 3e 5e 93 10 30 81 10 11 b8 b0 af 8f 94     ...>^..0........
     7e7:	f2 da 3e d8 b4 9a a8 87 29 da f8 d8 87 9a 35 da     ..>.....).....5.
     7f7:	f8 d8 87 9a 3d da f8 d8 b1 b9 a4 98 85 02 2e 56     ....=..........V
     807:	a5 81 00 0c 14 a3 97 b0 8a f1 2d d9 28 d8 4d d9     ..........-.(.M.
     817:	48 d8 6d d9 68 d8 b1 84 0d da 0e d8 a3 29 83 da     H.m.h........)..
     827:	2c 0e d8 a3 84 49 83 da 2c 4c 0e d8 b8 b0 a8 8a     ,....I..,L......
     837:	9a f5 20 aa da df d8 a8 40 aa d0 da de d8 a8 60     .. .....@......`
     847:	aa da d0 df d8 f1 97 86 a8 31 9b 06 99 07 ab 97     .........1......
     857:	28 88 9b f0 0c 20 14 40 b8 b0 b4 a8 8c 9c f0 04     (.... .@........
     867:	28 51 79 1d 30 14 38 b2 82 ab d0 98 2c 50 50 78     (Qy.0.8.....,PPx
     877:	78 9b f1 1a b0 f0 8a 9c a8 29 51 79 8b 29 51 79     x........)Qy.)Qy
     887:	8a 24 70 59 8b 20 58 71 8a 44 69 38 8b 39 40 68     .$pY. Xq.Di8.9@h
     897:	8a 64 48 31 8b 30 49 60 a5 88 20 09 71 58 44 68     .dH1.0I`.. .qXDh
     8a7:	11 39 64 49 30 19 f1 ac 00 2c 54 7c f0 8c a8 04     .9dI0....,T|....
     8b7:	28 50 78 f1 88 97 26 a8 59 98 ac 8c 02 26 46 66     (Px...&.Y....&Ff
     8c7:	f0 89 9c a8 29 51 79 24 70 59 44 69 38 64 48 31     ....)Qy$pYDi8dH1
     8d7:	a9 88 09 20 59 70 ab 11 38 40 69 a8 19 31 48 60     ... Yp..8@i..1H`
     8e7:	8c a8 3c 41 5c 20 7c 00 f1 87 98 19 86 a8 6e 76     ..<A\ |.......nv
     8f7:	7e a9 99 88 2d 55 7d 9e b9 a3 8a 22 8a 6e 8a 56     ~...-U}....".n.V
     907:	8a 5e 9f b1 83 06 26 46 66 0e 2e 4e 6e 9d b8 ad     .^....&Ff..Nn...
     917:	00 2c 54 7c f2 b1 8c b4 99 b9 a3 2d 55 7d 81 91     .,T|.......-U}..
     927:	ac 38 ad 3a b5 83 91 ac 2d d9 28 d8 4d d9 48 d8     .8.:....-.(.M.H.
     937:	6d d9 68 d8 8c 9d ae 29 d9 04 ae d8 51 d9 04 ae     m.h....)....Q...
     947:	d8 79 d9 04 d8 81 f3 9d ad 00 8d ae 19 81 ad d9     .y..............
     957:	01 d8 f2 ae da 26 d8 8e 91 29 83 a7 d9 ad ad ad     .....&...)......
     967:	ad f3 2a d8 d8 f1 b0 ac 89 91 3e 5e 76 f3 ac 2e     ..*.......>^v...
     977:	2e f1 b1 8c 5a 9c ac 2c 28 28 28 9c ac 30 18 a8     ....Z..,(((..0..
     987:	98 81 28 34 3c 97 24 a7 28 34 3c 9c 24 f2 b0 89     ..(4<.$.(4<.$...
     997:	ac 91 2c 4c 6c 8a 9b 2d d9 d8 d8 51 d9 d8 d8 79     ..,Ll..-...Q...y
     9a7:	d9 d8 d8 f1 9e 88 a3 31 da d8 d8 91 2d d9 28 d8     .......1....-.(.
     9b7:	4d d9 48 d8 6d d9 68 d8 b1 83 93 35 3d 80 25 da     M.H.m.h....5=.%.
     9c7:	d8 d8 85 69 da d8 d8 b4 93 81 a3 28 34 3c f3 ab     ...i.......(4<..
     9d7:	8b f8 a3 91 b6 09 b4 d9 ab de fa b0 87 9c b9 a3     ................
     9e7:	dd f1 a3 a3 a3 a3 95 f1 a3 a3 a3 9d f1 a3 a3 a3     ................
     9f7:	a3 f2 a3 b4 90 80 f2 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
     a07:	a3 b2 a3 a3 a3 a3 a3 a3 b0 87 b5 99 f1 a3 a3 a3     ................
     a17:	98 f1 a3 a3 a3 a3 97 a3 a3 a3 a3 f3 9b a3 a3 dc     ................
     a27:	b9 a7 f1 26 26 26 d8 d8 ff                          ...&&&...

00000a30 <__ctors_end>:
     a30:	11 24       	eor	r1, r1
     a32:	1f be       	out	0x3f, r1	; 63
     a34:	cf e5       	ldi	r28, 0x5F	; 95
     a36:	d8 e0       	ldi	r29, 0x08	; 8
     a38:	de bf       	out	0x3e, r29	; 62
     a3a:	cd bf       	out	0x3d, r28	; 61

00000a3c <__do_copy_data>:
     a3c:	10 e0       	ldi	r17, 0x00	; 0
     a3e:	a0 e6       	ldi	r26, 0x60	; 96
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	e2 e0       	ldi	r30, 0x02	; 2
     a44:	f0 e3       	ldi	r31, 0x30	; 48
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <__do_copy_data+0x10>
     a48:	05 90       	lpm	r0, Z+
     a4a:	0d 92       	st	X+, r0
     a4c:	aa 3a       	cpi	r26, 0xAA	; 170
     a4e:	b1 07       	cpc	r27, r17
     a50:	d9 f7       	brne	.-10     	; 0xa48 <__do_copy_data+0xc>

00000a52 <__do_clear_bss>:
     a52:	21 e0       	ldi	r18, 0x01	; 1
     a54:	aa ea       	ldi	r26, 0xAA	; 170
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	01 c0       	rjmp	.+2      	; 0xa5c <.do_clear_bss_start>

00000a5a <.do_clear_bss_loop>:
     a5a:	1d 92       	st	X+, r1

00000a5c <.do_clear_bss_start>:
     a5c:	ab 34       	cpi	r26, 0x4B	; 75
     a5e:	b2 07       	cpc	r27, r18
     a60:	e1 f7       	brne	.-8      	; 0xa5a <.do_clear_bss_loop>
     a62:	0e 94 87 05 	call	0xb0e	; 0xb0e <main>
     a66:	0c 94 ff 17 	jmp	0x2ffe	; 0x2ffe <_exit>

00000a6a <__bad_interrupt>:
     a6a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000a6e <timer1_init>:
volatile uint32_t tot_overflow;

void timer1_init() {
    //TCNT1, TCCR1A, TCCR1B, TIMSK, TIFR, ICR1, TIMER1_OVF_vect
    
    TCCR1B = 1 << CS10;
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	8e bd       	out	0x2e, r24	; 46
    TIMSK = 1 << TOIE1;
     a72:	84 e0       	ldi	r24, 0x04	; 4
     a74:	89 bf       	out	0x39, r24	; 57
    TCNT1 = 0;
     a76:	1d bc       	out	0x2d, r1	; 45
     a78:	1c bc       	out	0x2c, r1	; 44
    tot_overflow = 0;
     a7a:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <tot_overflow>
     a7e:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <tot_overflow+0x1>
     a82:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <tot_overflow+0x2>
     a86:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <tot_overflow+0x3>
     a8a:	08 95       	ret

00000a8c <__vector_9>:
}

ISR(TIMER1_OVF_vect)
{
     a8c:	1f 92       	push	r1
     a8e:	0f 92       	push	r0
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	0f 92       	push	r0
     a94:	11 24       	eor	r1, r1
     a96:	8f 93       	push	r24
     a98:	9f 93       	push	r25
     a9a:	af 93       	push	r26
     a9c:	bf 93       	push	r27
    // keep a track of number of overflows
    tot_overflow++;
     a9e:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <tot_overflow>
     aa2:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <tot_overflow+0x1>
     aa6:	a0 91 f5 00 	lds	r26, 0x00F5	; 0x8000f5 <tot_overflow+0x2>
     aaa:	b0 91 f6 00 	lds	r27, 0x00F6	; 0x8000f6 <tot_overflow+0x3>
     aae:	01 96       	adiw	r24, 0x01	; 1
     ab0:	a1 1d       	adc	r26, r1
     ab2:	b1 1d       	adc	r27, r1
     ab4:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <tot_overflow>
     ab8:	90 93 f4 00 	sts	0x00F4, r25	; 0x8000f4 <tot_overflow+0x1>
     abc:	a0 93 f5 00 	sts	0x00F5, r26	; 0x8000f5 <tot_overflow+0x2>
     ac0:	b0 93 f6 00 	sts	0x00F6, r27	; 0x8000f6 <tot_overflow+0x3>
}
     ac4:	bf 91       	pop	r27
     ac6:	af 91       	pop	r26
     ac8:	9f 91       	pop	r25
     aca:	8f 91       	pop	r24
     acc:	0f 90       	pop	r0
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	0f 90       	pop	r0
     ad2:	1f 90       	pop	r1
     ad4:	18 95       	reti

00000ad6 <getElapsedTime>:

uint32_t getElapsedTime() {
    //return tot_overflow * (255 - TCNT0);
    return (tot_overflow * 65536 + (uint32_t) TCNT1) / 1000  ; //time returned in micro seconds / 1000 = millis
     ad6:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <tot_overflow>
     ada:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <tot_overflow+0x1>
     ade:	a0 91 f5 00 	lds	r26, 0x00F5	; 0x8000f5 <tot_overflow+0x2>
     ae2:	b0 91 f6 00 	lds	r27, 0x00F6	; 0x8000f6 <tot_overflow+0x3>
     ae6:	2c b5       	in	r18, 0x2c	; 44
     ae8:	3d b5       	in	r19, 0x2d	; 45
     aea:	dc 01       	movw	r26, r24
     aec:	99 27       	eor	r25, r25
     aee:	88 27       	eor	r24, r24
     af0:	bc 01       	movw	r22, r24
     af2:	cd 01       	movw	r24, r26
     af4:	62 0f       	add	r22, r18
     af6:	73 1f       	adc	r23, r19
     af8:	81 1d       	adc	r24, r1
     afa:	91 1d       	adc	r25, r1
     afc:	28 ee       	ldi	r18, 0xE8	; 232
     afe:	33 e0       	ldi	r19, 0x03	; 3
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	0e 94 57 13 	call	0x26ae	; 0x26ae <__udivmodsi4>
    //return TCNT0;
}
     b08:	ca 01       	movw	r24, r20
     b0a:	b9 01       	movw	r22, r18
     b0c:	08 95       	ret

00000b0e <main>:

int main(void) {
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
     b16:	aa 97       	sbiw	r28, 0x2a	; 42
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
    
	DDRB = 0x0F;
     b22:	8f e0       	ldi	r24, 0x0F	; 15
     b24:	87 bb       	out	0x17, r24	; 23
    double yawError = 0;
    
    int calibrationState = 0;     //0 means not calibrated
    int delay = 200;

    double qw = 1.0f;
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e8       	ldi	r26, 0x80	; 128
     b2c:	bf e3       	ldi	r27, 0x3F	; 63
     b2e:	89 83       	std	Y+1, r24	; 0x01
     b30:	9a 83       	std	Y+2, r25	; 0x02
     b32:	ab 83       	std	Y+3, r26	; 0x03
     b34:	bc 83       	std	Y+4, r27	; 0x04
	double qx = 0.0f;
     b36:	1d 82       	std	Y+5, r1	; 0x05
     b38:	1e 82       	std	Y+6, r1	; 0x06
     b3a:	1f 82       	std	Y+7, r1	; 0x07
     b3c:	18 86       	std	Y+8, r1	; 0x08
	double qy = 0.0f;
     b3e:	19 86       	std	Y+9, r1	; 0x09
     b40:	1a 86       	std	Y+10, r1	; 0x0a
     b42:	1b 86       	std	Y+11, r1	; 0x0b
     b44:	1c 86       	std	Y+12, r1	; 0x0c
	double qz = 0.0f;
     b46:	1d 86       	std	Y+13, r1	; 0x0d
     b48:	1e 86       	std	Y+14, r1	; 0x0e
     b4a:	1f 86       	std	Y+15, r1	; 0x0f
     b4c:	18 8a       	std	Y+16, r1	; 0x10
	double roll = 0.0;
     b4e:	19 8a       	std	Y+17, r1	; 0x11
     b50:	1a 8a       	std	Y+18, r1	; 0x12
     b52:	1b 8a       	std	Y+19, r1	; 0x13
     b54:	1c 8a       	std	Y+20, r1	; 0x14
	double pitch = 0.0;
     b56:	1d 8a       	std	Y+21, r1	; 0x15
     b58:	1e 8a       	std	Y+22, r1	; 0x16
     b5a:	1f 8a       	std	Y+23, r1	; 0x17
     b5c:	18 8e       	std	Y+24, r1	; 0x18
	double yaw = 0.0;
     b5e:	19 8e       	std	Y+25, r1	; 0x19
     b60:	1a 8e       	std	Y+26, r1	; 0x1a
     b62:	1b 8e       	std	Y+27, r1	; 0x1b
     b64:	1c 8e       	std	Y+28, r1	; 0x1c

    //init uart
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
     b66:	8c e0       	ldi	r24, 0x0C	; 12
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <uart_init>

	//init interrupt
	sei();
     b6e:	78 94       	sei

	//init mpu6050
	mpu6050_init();
     b70:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <mpu6050_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b74:	83 ed       	ldi	r24, 0xD3	; 211
     b76:	90 e3       	ldi	r25, 0x30	; 48
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	f1 f7       	brne	.-4      	; 0xb78 <main+0x6a>
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <main+0x70>
     b7e:	00 00       	nop
	_delay_ms(50);

	//init mpu6050 dmp processor
	mpu6050_dmpInitialize();
     b80:	0e 94 9d 0a 	call	0x153a	; 0x153a <mpu6050_dmpInitialize>
	mpu6050_dmpEnable();
     b84:	0e 94 8b 0a 	call	0x1516	; 0x1516 <mpu6050_dmpEnable>
     b88:	e3 ec       	ldi	r30, 0xC3	; 195
     b8a:	f9 e0       	ldi	r31, 0x09	; 9
     b8c:	31 97       	sbiw	r30, 0x01	; 1
     b8e:	f1 f7       	brne	.-4      	; 0xb8c <main+0x7e>
     b90:	00 c0       	rjmp	.+0      	; 0xb92 <main+0x84>
     b92:	00 00       	nop
	_delay_ms(10);
	
    timer1_init();
     b94:	0e 94 37 05 	call	0xa6e	; 0xa6e <timer1_init>
    
    double rollError = 0;
    double pitchError = 0;
    double yawError = 0;
    
    int calibrationState = 0;     //0 means not calibrated
     b98:	61 2c       	mov	r6, r1
     b9a:	71 2c       	mov	r7, r1
    
	DDRB = 0x0F;
	
    uint32_t elapsedTime  = 0;
    
    double rollError = 0;
     b9c:	1f a2       	std	Y+39, r1	; 0x27
     b9e:	18 a6       	std	Y+40, r1	; 0x28
     ba0:	19 a6       	std	Y+41, r1	; 0x29
     ba2:	1a a6       	std	Y+42, r1	; 0x2a
		
		
		uart_puts("Starting Reading Data");
		
		if(mpu6050_getQuaternionWait(&qw, &qx, &qy, &qz)) {
			mpu6050_getRollPitchYaw(qw, qx, qy, qz, &roll, &pitch, &yaw);
     ba4:	1e 01       	movw	r2, r28
     ba6:	f9 e1       	ldi	r31, 0x19	; 25
     ba8:	2f 0e       	add	r2, r31
     baa:	31 1c       	adc	r3, r1
     bac:	2e 01       	movw	r4, r28
     bae:	25 e1       	ldi	r18, 0x15	; 21
     bb0:	42 0e       	add	r4, r18
     bb2:	51 1c       	adc	r5, r1
		
		//quaternion
		char itmp[10];
		
		
		uart_puts("Starting Reading Data");
     bb4:	86 e6       	ldi	r24, 0x66	; 102
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <uart_puts>
		
		if(mpu6050_getQuaternionWait(&qw, &qx, &qy, &qz)) {
     bbc:	9e 01       	movw	r18, r28
     bbe:	23 5f       	subi	r18, 0xF3	; 243
     bc0:	3f 4f       	sbci	r19, 0xFF	; 255
     bc2:	ae 01       	movw	r20, r28
     bc4:	47 5f       	subi	r20, 0xF7	; 247
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	be 01       	movw	r22, r28
     bca:	6b 5f       	subi	r22, 0xFB	; 251
     bcc:	7f 4f       	sbci	r23, 0xFF	; 255
     bce:	ce 01       	movw	r24, r28
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <mpu6050_getQuaternionWait>
     bd6:	88 23       	and	r24, r24
     bd8:	e9 f0       	breq	.+58     	; 0xc14 <main+0x106>
			mpu6050_getRollPitchYaw(qw, qx, qy, qz, &roll, &pitch, &yaw);
     bda:	ad 84       	ldd	r10, Y+13	; 0x0d
     bdc:	be 84       	ldd	r11, Y+14	; 0x0e
     bde:	cf 84       	ldd	r12, Y+15	; 0x0f
     be0:	d8 88       	ldd	r13, Y+16	; 0x10
     be2:	e9 84       	ldd	r14, Y+9	; 0x09
     be4:	fa 84       	ldd	r15, Y+10	; 0x0a
     be6:	0b 85       	ldd	r16, Y+11	; 0x0b
     be8:	1c 85       	ldd	r17, Y+12	; 0x0c
     bea:	2d 81       	ldd	r18, Y+5	; 0x05
     bec:	3e 81       	ldd	r19, Y+6	; 0x06
     bee:	4f 81       	ldd	r20, Y+7	; 0x07
     bf0:	58 85       	ldd	r21, Y+8	; 0x08
     bf2:	69 81       	ldd	r22, Y+1	; 0x01
     bf4:	7a 81       	ldd	r23, Y+2	; 0x02
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	3f 92       	push	r3
     bfc:	2f 92       	push	r2
     bfe:	5f 92       	push	r5
     c00:	4f 92       	push	r4
     c02:	fe 01       	movw	r30, r28
     c04:	71 96       	adiw	r30, 0x11	; 17
     c06:	4f 01       	movw	r8, r30
     c08:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <mpu6050_getRollPitchYaw>
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	83 ec       	ldi	r24, 0xC3	; 195
     c16:	99 e0       	ldi	r25, 0x09	; 9
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <main+0x10a>
     c1c:	00 c0       	rjmp	.+0      	; 0xc1e <main+0x110>
     c1e:	00 00       	nop
		}
		_delay_ms(10);
		
		
		double roll1 = roll * 180 / PI;
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	44 e3       	ldi	r20, 0x34	; 52
     c26:	53 e4       	ldi	r21, 0x43	; 67
     c28:	69 89       	ldd	r22, Y+17	; 0x11
     c2a:	7a 89       	ldd	r23, Y+18	; 0x12
     c2c:	8b 89       	ldd	r24, Y+19	; 0x13
     c2e:	9c 89       	ldd	r25, Y+20	; 0x14
     c30:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsf3>
     c34:	20 ed       	ldi	r18, 0xD0	; 208
     c36:	3f e0       	ldi	r19, 0x0F	; 15
     c38:	49 e4       	ldi	r20, 0x49	; 73
     c3a:	50 e4       	ldi	r21, 0x40	; 64
     c3c:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__divsf3>
     c40:	e6 2e       	mov	r14, r22
     c42:	f7 2e       	mov	r15, r23
     c44:	08 2f       	mov	r16, r24
     c46:	19 2f       	mov	r17, r25
		double pitch1 = pitch * 180 / PI;
		double yaw1 = yaw * 180 / PI;
                
        //error correction
        elapsedTime = getElapsedTime() / 1000; 
     c48:	0e 94 6b 05 	call	0xad6	; 0xad6 <getElapsedTime>
        
        if(calibrationState == 0 && elapsedTime > 15) {
     c4c:	61 14       	cp	r6, r1
     c4e:	71 04       	cpc	r7, r1
     c50:	39 f4       	brne	.+14     	; 0xc60 <main+0x152>
     c52:	60 38       	cpi	r22, 0x80	; 128
     c54:	7e 43       	sbci	r23, 0x3E	; 62
     c56:	81 05       	cpc	r24, r1
     c58:	91 05       	cpc	r25, r1
     c5a:	08 f0       	brcs	.+2      	; 0xc5e <main+0x150>
     c5c:	6a c0       	rjmp	.+212    	; 0xd32 <main+0x224>
     c5e:	63 c0       	rjmp	.+198    	; 0xd26 <main+0x218>
            rollError = roll1;
            pitchError = pitch1;
            yawError = yaw1;
            calibrationState = 1;
        }
        else if(calibrationState == 1) {
     c60:	f1 e0       	ldi	r31, 0x01	; 1
     c62:	6f 16       	cp	r6, r31
     c64:	71 04       	cpc	r7, r1
     c66:	09 f0       	breq	.+2      	; 0xc6a <main+0x15c>
     c68:	5e c0       	rjmp	.+188    	; 0xd26 <main+0x218>
            uart_puts("Done Reading Data");
     c6a:	8c e7       	ldi	r24, 0x7C	; 124
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <uart_puts>
			PORTB = 0x00;
     c72:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c74:	23 e0       	ldi	r18, 0x03	; 3
     c76:	2a 95       	dec	r18
     c78:	f1 f7       	brne	.-4      	; 0xc76 <main+0x168>
     c7a:	00 00       	nop
			_delay_us(10);
			
			roll1 -= rollError;
     c7c:	2f a1       	ldd	r18, Y+39	; 0x27
     c7e:	38 a5       	ldd	r19, Y+40	; 0x28
     c80:	49 a5       	ldd	r20, Y+41	; 0x29
     c82:	5a a5       	ldd	r21, Y+42	; 0x2a
     c84:	6e 2d       	mov	r22, r14
     c86:	7f 2d       	mov	r23, r15
     c88:	80 2f       	mov	r24, r16
     c8a:	91 2f       	mov	r25, r17
     c8c:	0e 94 00 10 	call	0x2000	; 0x2000 <__subsf3>
     c90:	6b 01       	movw	r12, r22
     c92:	7c 01       	movw	r14, r24
            pitch1 -= pitchError;
            yaw1 -= yawError;
            
            uart_puts("R:");
     c94:	8e e8       	ldi	r24, 0x8E	; 142
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <uart_puts>
            dtostrf(roll1, 3, 0, itmp); uart_puts(itmp); uart_puts("  ");
     c9c:	8e 01       	movw	r16, r28
     c9e:	03 5e       	subi	r16, 0xE3	; 227
     ca0:	1f 4f       	sbci	r17, 0xFF	; 255
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	43 e0       	ldi	r20, 0x03	; 3
     ca6:	c7 01       	movw	r24, r14
     ca8:	b6 01       	movw	r22, r12
     caa:	0e 94 79 13 	call	0x26f2	; 0x26f2 <dtostrf>
     cae:	c8 01       	movw	r24, r16
     cb0:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <uart_puts>
     cb4:	81 e9       	ldi	r24, 0x91	; 145
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <uart_puts>
			if(roll1 <= -5){
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	40 ea       	ldi	r20, 0xA0	; 160
     cc2:	50 ec       	ldi	r21, 0xC0	; 192
     cc4:	c7 01       	movw	r24, r14
     cc6:	b6 01       	movw	r22, r12
     cc8:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <__cmpsf2>
     ccc:	18 16       	cp	r1, r24
     cce:	5c f0       	brlt	.+22     	; 0xce6 <main+0x1d8>
				uart_puts("L");
     cd0:	84 e9       	ldi	r24, 0x94	; 148
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <uart_puts>
				PORTB = 0b00000010;
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	88 bb       	out	0x18, r24	; 24
     cdc:	93 e0       	ldi	r25, 0x03	; 3
     cde:	9a 95       	dec	r25
     ce0:	f1 f7       	brne	.-4      	; 0xcde <main+0x1d0>
     ce2:	00 00       	nop
     ce4:	2d c0       	rjmp	.+90     	; 0xd40 <main+0x232>
				_delay_us(10);
			}else if(roll1 >= 5){
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 ea       	ldi	r20, 0xA0	; 160
     cec:	50 e4       	ldi	r21, 0x40	; 64
     cee:	c7 01       	movw	r24, r14
     cf0:	b6 01       	movw	r22, r12
     cf2:	0e 94 7e 12 	call	0x24fc	; 0x24fc <__gesf2>
     cf6:	88 23       	and	r24, r24
     cf8:	5c f0       	brlt	.+22     	; 0xd10 <main+0x202>
				uart_puts("R");
     cfa:	86 e9       	ldi	r24, 0x96	; 150
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <uart_puts>
				PORTB = 0b00000001;
     d02:	e1 e0       	ldi	r30, 0x01	; 1
     d04:	e8 bb       	out	0x18, r30	; 24
     d06:	f3 e0       	ldi	r31, 0x03	; 3
     d08:	fa 95       	dec	r31
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <main+0x1fa>
     d0c:	00 00       	nop
     d0e:	18 c0       	rjmp	.+48     	; 0xd40 <main+0x232>
				_delay_us(10);
			}
			else
			{
				PORTB = 0b00000011;
     d10:	83 e0       	ldi	r24, 0x03	; 3
     d12:	88 bb       	out	0x18, r24	; 24
				uart_puts("S");
     d14:	88 e9       	ldi	r24, 0x98	; 152
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <uart_puts>
     d1c:	23 e0       	ldi	r18, 0x03	; 3
     d1e:	2a 95       	dec	r18
     d20:	f1 f7       	brne	.-4      	; 0xd1e <main+0x210>
     d22:	00 00       	nop
     d24:	0d c0       	rjmp	.+26     	; 0xd40 <main+0x232>
            //dtostrf(yaw1, 3, 0, itmp); uart_puts(itmp); uart_putc('-');

        }
        else {
           
           uart_puts("calibrating...");
     d26:	8a e9       	ldi	r24, 0x9A	; 154
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <uart_puts>
		   PORTB = 0x00;
     d2e:	18 ba       	out	0x18, r1	; 24
     d30:	07 c0       	rjmp	.+14     	; 0xd40 <main+0x232>
                
        //error correction
        elapsedTime = getElapsedTime() / 1000; 
        
        if(calibrationState == 0 && elapsedTime > 15) {
            rollError = roll1;
     d32:	ef a2       	std	Y+39, r14	; 0x27
     d34:	f8 a6       	std	Y+40, r15	; 0x28
     d36:	09 a7       	std	Y+41, r16	; 0x29
     d38:	1a a7       	std	Y+42, r17	; 0x2a
            pitchError = pitch1;
            yawError = yaw1;
            calibrationState = 1;
     d3a:	66 24       	eor	r6, r6
     d3c:	63 94       	inc	r6
     d3e:	71 2c       	mov	r7, r1
		   PORTB = 0x00;

        }
        
        
        uart_putc('\n');
     d40:	8a e0       	ldi	r24, 0x0A	; 10
     d42:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <uart_putc>
        
        uart_putc('\n');
     d46:	8a e0       	ldi	r24, 0x0A	; 10
     d48:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <uart_putc>
        
        
      
	}
     d4c:	33 cf       	rjmp	.-410    	; 0xbb4 <main+0xa6>

00000d4e <mpu6050_readBytes>:
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
	if(buffer[0] == 0x34)
		return 1;
	else
		return 0;
}
     d4e:	af 92       	push	r10
     d50:	bf 92       	push	r11
     d52:	cf 92       	push	r12
     d54:	df 92       	push	r13
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	66 23       	and	r22, r22
     d62:	b9 f1       	breq	.+110    	; 0xdd2 <mpu6050_readBytes+0x84>
     d64:	c5 2f       	mov	r28, r21
     d66:	d4 2f       	mov	r29, r20
     d68:	f6 2e       	mov	r15, r22
     d6a:	18 2f       	mov	r17, r24
     d6c:	80 ed       	ldi	r24, 0xD0	; 208
     d6e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <i2c_start>
     d72:	81 2f       	mov	r24, r17
     d74:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <i2c_write>
     d78:	83 e0       	ldi	r24, 0x03	; 3
     d7a:	8a 95       	dec	r24
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <mpu6050_readBytes+0x2c>
     d7e:	00 00       	nop
     d80:	81 ed       	ldi	r24, 0xD1	; 209
     d82:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <i2c_start>
     d86:	0d 2f       	mov	r16, r29
     d88:	1c 2f       	mov	r17, r28
     d8a:	cc 24       	eor	r12, r12
     d8c:	ca 94       	dec	r12
     d8e:	cf 0c       	add	r12, r15
     d90:	d1 2c       	mov	r13, r1
     d92:	ef ef       	ldi	r30, 0xFF	; 255
     d94:	ce 1a       	sub	r12, r30
     d96:	de 0a       	sbc	r13, r30
     d98:	c0 e0       	ldi	r28, 0x00	; 0
     d9a:	d0 e0       	ldi	r29, 0x00	; 0
     d9c:	af 2c       	mov	r10, r15
     d9e:	b1 2c       	mov	r11, r1
     da0:	f1 e0       	ldi	r31, 0x01	; 1
     da2:	af 1a       	sub	r10, r31
     da4:	b1 08       	sbc	r11, r1
     da6:	ac 16       	cp	r10, r28
     da8:	bd 06       	cpc	r11, r29
     daa:	29 f4       	brne	.+10     	; 0xdb6 <mpu6050_readBytes+0x68>
     dac:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <i2c_readNak>
     db0:	f8 01       	movw	r30, r16
     db2:	80 83       	st	Z, r24
     db4:	04 c0       	rjmp	.+8      	; 0xdbe <mpu6050_readBytes+0x70>
     db6:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <i2c_readAck>
     dba:	f8 01       	movw	r30, r16
     dbc:	80 83       	st	Z, r24
     dbe:	21 96       	adiw	r28, 0x01	; 1
     dc0:	0f 5f       	subi	r16, 0xFF	; 255
     dc2:	1f 4f       	sbci	r17, 0xFF	; 255
     dc4:	cc 15       	cp	r28, r12
     dc6:	dd 05       	cpc	r29, r13
     dc8:	71 f7       	brne	.-36     	; 0xda6 <mpu6050_readBytes+0x58>
     dca:	cf 2d       	mov	r28, r15
     dcc:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <i2c_stop>
     dd0:	01 c0       	rjmp	.+2      	; 0xdd4 <mpu6050_readBytes+0x86>
     dd2:	c0 e0       	ldi	r28, 0x00	; 0
     dd4:	8c 2f       	mov	r24, r28
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	ff 90       	pop	r15
     de0:	df 90       	pop	r13
     de2:	cf 90       	pop	r12
     de4:	bf 90       	pop	r11
     de6:	af 90       	pop	r10
     de8:	08 95       	ret

00000dea <mpu6050_readByte>:
     dea:	ab 01       	movw	r20, r22
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	0e 94 a7 06 	call	0xd4e	; 0xd4e <mpu6050_readBytes>
     df2:	08 95       	ret

00000df4 <mpu6050_writeBytes>:
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	66 23       	and	r22, r22
     e02:	d1 f0       	breq	.+52     	; 0xe38 <mpu6050_writeBytes+0x44>
     e04:	7a 01       	movw	r14, r20
     e06:	16 2f       	mov	r17, r22
     e08:	c8 2f       	mov	r28, r24
     e0a:	80 ed       	ldi	r24, 0xD0	; 208
     e0c:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <i2c_start>
     e10:	8c 2f       	mov	r24, r28
     e12:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <i2c_write>
     e16:	e7 01       	movw	r28, r14
     e18:	6f ef       	ldi	r22, 0xFF	; 255
     e1a:	61 0f       	add	r22, r17
     e1c:	06 2f       	mov	r16, r22
     e1e:	10 e0       	ldi	r17, 0x00	; 0
     e20:	0f 5f       	subi	r16, 0xFF	; 255
     e22:	1f 4f       	sbci	r17, 0xFF	; 255
     e24:	0e 0d       	add	r16, r14
     e26:	1f 1d       	adc	r17, r15
     e28:	89 91       	ld	r24, Y+
     e2a:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <i2c_write>
     e2e:	c0 17       	cp	r28, r16
     e30:	d1 07       	cpc	r29, r17
     e32:	d1 f7       	brne	.-12     	; 0xe28 <mpu6050_writeBytes+0x34>
     e34:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <i2c_stop>
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	ff 90       	pop	r15
     e42:	ef 90       	pop	r14
     e44:	08 95       	ret

00000e46 <mpu6050_writeByte>:
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	1f 92       	push	r1
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	69 83       	std	Y+1, r22	; 0x01
     e52:	ae 01       	movw	r20, r28
     e54:	4f 5f       	subi	r20, 0xFF	; 255
     e56:	5f 4f       	sbci	r21, 0xFF	; 255
     e58:	61 e0       	ldi	r22, 0x01	; 1
     e5a:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <mpu6050_writeBytes>
     e5e:	0f 90       	pop	r0
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	08 95       	ret

00000e66 <mpu6050_readBits>:
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	1f 92       	push	r1
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	44 23       	and	r20, r20
     e7a:	51 f1       	breq	.+84     	; 0xed0 <mpu6050_readBits+0x6a>
     e7c:	79 01       	movw	r14, r18
     e7e:	04 2f       	mov	r16, r20
     e80:	16 2f       	mov	r17, r22
     e82:	be 01       	movw	r22, r28
     e84:	6f 5f       	subi	r22, 0xFF	; 255
     e86:	7f 4f       	sbci	r23, 0xFF	; 255
     e88:	0e 94 f5 06 	call	0xdea	; 0xdea <mpu6050_readByte>
     e8c:	88 23       	and	r24, r24
     e8e:	09 f1       	breq	.+66     	; 0xed2 <mpu6050_readBits+0x6c>
     e90:	61 2f       	mov	r22, r17
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	60 1b       	sub	r22, r16
     e96:	71 09       	sbc	r23, r1
     e98:	6f 5f       	subi	r22, 0xFF	; 255
     e9a:	7f 4f       	sbci	r23, 0xFF	; 255
     e9c:	21 e0       	ldi	r18, 0x01	; 1
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <mpu6050_readBits+0x40>
     ea2:	22 0f       	add	r18, r18
     ea4:	33 1f       	adc	r19, r19
     ea6:	0a 95       	dec	r16
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <mpu6050_readBits+0x3c>
     eaa:	21 50       	subi	r18, 0x01	; 1
     eac:	31 09       	sbc	r19, r1
     eae:	06 2e       	mov	r0, r22
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <mpu6050_readBits+0x50>
     eb2:	22 0f       	add	r18, r18
     eb4:	33 1f       	adc	r19, r19
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <mpu6050_readBits+0x4c>
     eba:	99 81       	ldd	r25, Y+1	; 0x01
     ebc:	29 23       	and	r18, r25
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <mpu6050_readBits+0x60>
     ec2:	35 95       	asr	r19
     ec4:	27 95       	ror	r18
     ec6:	6a 95       	dec	r22
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <mpu6050_readBits+0x5c>
     eca:	f7 01       	movw	r30, r14
     ecc:	20 83       	st	Z, r18
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <mpu6050_readBits+0x6c>
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	0f 90       	pop	r0
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	ff 90       	pop	r15
     ede:	ef 90       	pop	r14
     ee0:	08 95       	ret

00000ee2 <mpu6050_writeBits>:
     ee2:	ef 92       	push	r14
     ee4:	ff 92       	push	r15
     ee6:	0f 93       	push	r16
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	1f 92       	push	r1
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	44 23       	and	r20, r20
     ef6:	89 f1       	breq	.+98     	; 0xf5a <mpu6050_writeBits+0x78>
     ef8:	f2 2e       	mov	r15, r18
     efa:	14 2f       	mov	r17, r20
     efc:	06 2f       	mov	r16, r22
     efe:	e8 2e       	mov	r14, r24
     f00:	19 82       	std	Y+1, r1	; 0x01
     f02:	be 01       	movw	r22, r28
     f04:	6f 5f       	subi	r22, 0xFF	; 255
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	0e 94 f5 06 	call	0xdea	; 0xdea <mpu6050_readByte>
     f0c:	88 23       	and	r24, r24
     f0e:	29 f1       	breq	.+74     	; 0xf5a <mpu6050_writeBits+0x78>
     f10:	40 2f       	mov	r20, r16
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	41 1b       	sub	r20, r17
     f16:	51 09       	sbc	r21, r1
     f18:	4f 5f       	subi	r20, 0xFF	; 255
     f1a:	5f 4f       	sbci	r21, 0xFF	; 255
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <mpu6050_writeBits+0x44>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	1a 95       	dec	r17
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <mpu6050_writeBits+0x40>
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	04 2e       	mov	r0, r20
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <mpu6050_writeBits+0x52>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <mpu6050_writeBits+0x4e>
     f38:	2f 2d       	mov	r18, r15
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <mpu6050_writeBits+0x60>
     f3e:	22 0f       	add	r18, r18
     f40:	33 1f       	adc	r19, r19
     f42:	4a 95       	dec	r20
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <mpu6050_writeBits+0x5c>
     f46:	68 2f       	mov	r22, r24
     f48:	60 95       	com	r22
     f4a:	99 81       	ldd	r25, Y+1	; 0x01
     f4c:	69 23       	and	r22, r25
     f4e:	82 23       	and	r24, r18
     f50:	68 2b       	or	r22, r24
     f52:	69 83       	std	Y+1, r22	; 0x01
     f54:	8e 2d       	mov	r24, r14
     f56:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>
     f5a:	0f 90       	pop	r0
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	ef 90       	pop	r14
     f68:	08 95       	ret

00000f6a <mpu6050_writeBit>:
     f6a:	ff 92       	push	r15
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	1f 92       	push	r1
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	18 2f       	mov	r17, r24
     f7c:	06 2f       	mov	r16, r22
     f7e:	f4 2e       	mov	r15, r20
     f80:	be 01       	movw	r22, r28
     f82:	6f 5f       	subi	r22, 0xFF	; 255
     f84:	7f 4f       	sbci	r23, 0xFF	; 255
     f86:	0e 94 f5 06 	call	0xdea	; 0xdea <mpu6050_readByte>
     f8a:	ff 20       	and	r15, r15
     f8c:	51 f0       	breq	.+20     	; 0xfa2 <mpu6050_writeBit+0x38>
     f8e:	61 e0       	ldi	r22, 0x01	; 1
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <mpu6050_writeBit+0x2e>
     f94:	66 0f       	add	r22, r22
     f96:	77 1f       	adc	r23, r23
     f98:	0a 95       	dec	r16
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <mpu6050_writeBit+0x2a>
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	68 2b       	or	r22, r24
     fa0:	0a c0       	rjmp	.+20     	; 0xfb6 <mpu6050_writeBit+0x4c>
     fa2:	61 e0       	ldi	r22, 0x01	; 1
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <mpu6050_writeBit+0x42>
     fa8:	66 0f       	add	r22, r22
     faa:	77 1f       	adc	r23, r23
     fac:	0a 95       	dec	r16
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <mpu6050_writeBit+0x3e>
     fb0:	60 95       	com	r22
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	68 23       	and	r22, r24
     fb6:	69 83       	std	Y+1, r22	; 0x01
     fb8:	81 2f       	mov	r24, r17
     fba:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>
     fbe:	0f 90       	pop	r0
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	08 95       	ret

00000fcc <mpu6050_writeWords>:
     fcc:	ff 92       	push	r15
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	66 23       	and	r22, r22
     fd8:	61 f1       	breq	.+88     	; 0x1032 <mpu6050_writeWords+0x66>
     fda:	ea 01       	movw	r28, r20
     fdc:	06 2f       	mov	r16, r22
     fde:	18 2f       	mov	r17, r24
     fe0:	80 ed       	ldi	r24, 0xD0	; 208
     fe2:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <i2c_start>
     fe6:	81 2f       	mov	r24, r17
     fe8:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <i2c_write>
     fec:	10 e0       	ldi	r17, 0x00	; 0
     fee:	00 0f       	add	r16, r16
     ff0:	11 1f       	adc	r17, r17
     ff2:	10 16       	cp	r1, r16
     ff4:	11 06       	cpc	r1, r17
     ff6:	dc f4       	brge	.+54     	; 0x102e <mpu6050_writeWords+0x62>
     ff8:	f1 2c       	mov	r15, r1
     ffa:	ef 2d       	mov	r30, r15
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	ee 0f       	add	r30, r30
    1000:	ff 1f       	adc	r31, r31
    1002:	ec 0f       	add	r30, r28
    1004:	fd 1f       	adc	r31, r29
    1006:	81 81       	ldd	r24, Z+1	; 0x01
    1008:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <i2c_write>
    100c:	e1 e0       	ldi	r30, 0x01	; 1
    100e:	ef 0d       	add	r30, r15
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	ee 0f       	add	r30, r30
    1014:	ff 1f       	adc	r31, r31
    1016:	ec 0f       	add	r30, r28
    1018:	fd 1f       	adc	r31, r29
    101a:	80 81       	ld	r24, Z
    101c:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <i2c_write>
    1020:	f3 94       	inc	r15
    1022:	f3 94       	inc	r15
    1024:	8f 2d       	mov	r24, r15
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	80 17       	cp	r24, r16
    102a:	91 07       	cpc	r25, r17
    102c:	34 f3       	brlt	.-52     	; 0xffa <mpu6050_writeWords+0x2e>
    102e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <i2c_stop>
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	08 95       	ret

0000103e <mpu6050_setMemoryBank>:
    103e:	8f 71       	andi	r24, 0x1F	; 31
    1040:	41 11       	cpse	r20, r1
    1042:	80 62       	ori	r24, 0x20	; 32
    1044:	61 11       	cpse	r22, r1
    1046:	80 64       	ori	r24, 0x40	; 64
    1048:	68 2f       	mov	r22, r24
    104a:	8d e6       	ldi	r24, 0x6D	; 109
    104c:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>
    1050:	08 95       	ret

00001052 <mpu6050_setMemoryStartAddress>:
    1052:	68 2f       	mov	r22, r24
    1054:	8e e6       	ldi	r24, 0x6E	; 110
    1056:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>
    105a:	08 95       	ret

0000105c <mpu6050_readMemoryBlock>:
    105c:	8f 92       	push	r8
    105e:	9f 92       	push	r9
    1060:	af 92       	push	r10
    1062:	bf 92       	push	r11
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	6c 01       	movw	r12, r24
    1076:	7b 01       	movw	r14, r22
    1078:	94 2e       	mov	r9, r20
    107a:	02 2f       	mov	r16, r18
    107c:	64 2f       	mov	r22, r20
    107e:	6f 71       	andi	r22, 0x1F	; 31
    1080:	8d e6       	ldi	r24, 0x6D	; 109
    1082:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>
    1086:	80 2f       	mov	r24, r16
    1088:	0e 94 29 08 	call	0x1052	; 0x1052 <mpu6050_setMemoryStartAddress>
    108c:	e1 14       	cp	r14, r1
    108e:	f1 04       	cpc	r15, r1
    1090:	99 f1       	breq	.+102    	; 0x10f8 <mpu6050_readMemoryBlock+0x9c>
    1092:	c0 e0       	ldi	r28, 0x00	; 0
    1094:	d0 e0       	ldi	r29, 0x00	; 0
    1096:	68 94       	set
    1098:	88 24       	eor	r8, r8
    109a:	84 f8       	bld	r8, 4
    109c:	a1 2c       	mov	r10, r1
    109e:	bb 24       	eor	r11, r11
    10a0:	b3 94       	inc	r11
    10a2:	ce 01       	movw	r24, r28
    10a4:	40 96       	adiw	r24, 0x10	; 16
    10a6:	e8 16       	cp	r14, r24
    10a8:	f9 06       	cpc	r15, r25
    10aa:	18 f4       	brcc	.+6      	; 0x10b2 <mpu6050_readMemoryBlock+0x56>
    10ac:	1e 2d       	mov	r17, r14
    10ae:	1c 1b       	sub	r17, r28
    10b0:	01 c0       	rjmp	.+2      	; 0x10b4 <mpu6050_readMemoryBlock+0x58>
    10b2:	18 2d       	mov	r17, r8
    10b4:	81 2f       	mov	r24, r17
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	95 01       	movw	r18, r10
    10ba:	20 1b       	sub	r18, r16
    10bc:	31 09       	sbc	r19, r1
    10be:	28 17       	cp	r18, r24
    10c0:	39 07       	cpc	r19, r25
    10c2:	14 f4       	brge	.+4      	; 0x10c8 <mpu6050_readMemoryBlock+0x6c>
    10c4:	10 2f       	mov	r17, r16
    10c6:	11 95       	neg	r17
    10c8:	a6 01       	movw	r20, r12
    10ca:	4c 0f       	add	r20, r28
    10cc:	5d 1f       	adc	r21, r29
    10ce:	61 2f       	mov	r22, r17
    10d0:	8f e6       	ldi	r24, 0x6F	; 111
    10d2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <mpu6050_readBytes>
    10d6:	c1 0f       	add	r28, r17
    10d8:	d1 1d       	adc	r29, r1
    10da:	ce 15       	cp	r28, r14
    10dc:	df 05       	cpc	r29, r15
    10de:	60 f4       	brcc	.+24     	; 0x10f8 <mpu6050_readMemoryBlock+0x9c>
    10e0:	01 0f       	add	r16, r17
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <mpu6050_readMemoryBlock+0x8a>
    10e4:	93 94       	inc	r9
    10e6:	69 2d       	mov	r22, r9
    10e8:	6f 71       	andi	r22, 0x1F	; 31
    10ea:	8d e6       	ldi	r24, 0x6D	; 109
    10ec:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>
    10f0:	80 2f       	mov	r24, r16
    10f2:	0e 94 29 08 	call	0x1052	; 0x1052 <mpu6050_setMemoryStartAddress>
    10f6:	d5 cf       	rjmp	.-86     	; 0x10a2 <mpu6050_readMemoryBlock+0x46>
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	ff 90       	pop	r15
    1102:	ef 90       	pop	r14
    1104:	df 90       	pop	r13
    1106:	cf 90       	pop	r12
    1108:	bf 90       	pop	r11
    110a:	af 90       	pop	r10
    110c:	9f 90       	pop	r9
    110e:	8f 90       	pop	r8
    1110:	08 95       	ret

00001112 <mpu6050_writeMemoryBlock>:
    1112:	2f 92       	push	r2
    1114:	3f 92       	push	r3
    1116:	4f 92       	push	r4
    1118:	5f 92       	push	r5
    111a:	6f 92       	push	r6
    111c:	7f 92       	push	r7
    111e:	8f 92       	push	r8
    1120:	9f 92       	push	r9
    1122:	af 92       	push	r10
    1124:	bf 92       	push	r11
    1126:	cf 92       	push	r12
    1128:	df 92       	push	r13
    112a:	ef 92       	push	r14
    112c:	ff 92       	push	r15
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	3c 01       	movw	r6, r24
    1138:	5b 01       	movw	r10, r22
    113a:	34 2e       	mov	r3, r20
    113c:	f2 2e       	mov	r15, r18
    113e:	64 2f       	mov	r22, r20
    1140:	6f 71       	andi	r22, 0x1F	; 31
    1142:	8d e6       	ldi	r24, 0x6D	; 109
    1144:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>
    1148:	8f 2d       	mov	r24, r15
    114a:	0e 94 29 08 	call	0x1052	; 0x1052 <mpu6050_setMemoryStartAddress>
    114e:	00 23       	and	r16, r16
    1150:	31 f0       	breq	.+12     	; 0x115e <mpu6050_writeMemoryBlock+0x4c>
    1152:	80 e1       	ldi	r24, 0x10	; 16
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 99 13 	call	0x2732	; 0x2732 <malloc>
    115a:	4c 01       	movw	r8, r24
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <mpu6050_writeMemoryBlock+0x50>
    115e:	81 2c       	mov	r8, r1
    1160:	91 2c       	mov	r9, r1
    1162:	ee 20       	and	r14, r14
    1164:	31 f0       	breq	.+12     	; 0x1172 <mpu6050_writeMemoryBlock+0x60>
    1166:	80 e1       	ldi	r24, 0x10	; 16
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	0e 94 99 13 	call	0x2732	; 0x2732 <malloc>
    116e:	6c 01       	movw	r12, r24
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <mpu6050_writeMemoryBlock+0x64>
    1172:	c1 2c       	mov	r12, r1
    1174:	d1 2c       	mov	r13, r1
    1176:	a1 14       	cp	r10, r1
    1178:	b1 04       	cpc	r11, r1
    117a:	09 f4       	brne	.+2      	; 0x117e <mpu6050_writeMemoryBlock+0x6c>
    117c:	6e c0       	rjmp	.+220    	; 0x125a <mpu6050_writeMemoryBlock+0x148>
    117e:	c0 e0       	ldi	r28, 0x00	; 0
    1180:	d0 e0       	ldi	r29, 0x00	; 0
    1182:	68 94       	set
    1184:	22 24       	eor	r2, r2
    1186:	24 f8       	bld	r2, 4
    1188:	41 2c       	mov	r4, r1
    118a:	55 24       	eor	r5, r5
    118c:	53 94       	inc	r5
    118e:	ce 01       	movw	r24, r28
    1190:	40 96       	adiw	r24, 0x10	; 16
    1192:	a8 16       	cp	r10, r24
    1194:	b9 06       	cpc	r11, r25
    1196:	18 f4       	brcc	.+6      	; 0x119e <mpu6050_writeMemoryBlock+0x8c>
    1198:	1a 2d       	mov	r17, r10
    119a:	1c 1b       	sub	r17, r28
    119c:	01 c0       	rjmp	.+2      	; 0x11a0 <mpu6050_writeMemoryBlock+0x8e>
    119e:	12 2d       	mov	r17, r2
    11a0:	81 2f       	mov	r24, r17
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	92 01       	movw	r18, r4
    11a6:	2f 19       	sub	r18, r15
    11a8:	31 09       	sbc	r19, r1
    11aa:	28 17       	cp	r18, r24
    11ac:	39 07       	cpc	r19, r25
    11ae:	14 f4       	brge	.+4      	; 0x11b4 <mpu6050_writeMemoryBlock+0xa2>
    11b0:	1f 2d       	mov	r17, r15
    11b2:	11 95       	neg	r17
    11b4:	ee 20       	and	r14, r14
    11b6:	a1 f0       	breq	.+40     	; 0x11e0 <mpu6050_writeMemoryBlock+0xce>
    11b8:	11 23       	and	r17, r17
    11ba:	a9 f0       	breq	.+42     	; 0x11e6 <mpu6050_writeMemoryBlock+0xd4>
    11bc:	f3 01       	movw	r30, r6
    11be:	ec 0f       	add	r30, r28
    11c0:	fd 1f       	adc	r31, r29
    11c2:	d6 01       	movw	r26, r12
    11c4:	2f ef       	ldi	r18, 0xFF	; 255
    11c6:	21 0f       	add	r18, r17
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	2f 5f       	subi	r18, 0xFF	; 255
    11cc:	3f 4f       	sbci	r19, 0xFF	; 255
    11ce:	2c 0d       	add	r18, r12
    11d0:	3d 1d       	adc	r19, r13
    11d2:	84 91       	lpm	r24, Z
    11d4:	8d 93       	st	X+, r24
    11d6:	31 96       	adiw	r30, 0x01	; 1
    11d8:	a2 17       	cp	r26, r18
    11da:	b3 07       	cpc	r27, r19
    11dc:	d1 f7       	brne	.-12     	; 0x11d2 <mpu6050_writeMemoryBlock+0xc0>
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <mpu6050_writeMemoryBlock+0xd4>
    11e0:	63 01       	movw	r12, r6
    11e2:	cc 0e       	add	r12, r28
    11e4:	dd 1e       	adc	r13, r29
    11e6:	a6 01       	movw	r20, r12
    11e8:	61 2f       	mov	r22, r17
    11ea:	8f e6       	ldi	r24, 0x6F	; 111
    11ec:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <mpu6050_writeBytes>
    11f0:	00 23       	and	r16, r16
    11f2:	11 f1       	breq	.+68     	; 0x1238 <mpu6050_writeMemoryBlock+0x126>
    11f4:	81 14       	cp	r8, r1
    11f6:	91 04       	cpc	r9, r1
    11f8:	f9 f0       	breq	.+62     	; 0x1238 <mpu6050_writeMemoryBlock+0x126>
    11fa:	63 2d       	mov	r22, r3
    11fc:	6f 71       	andi	r22, 0x1F	; 31
    11fe:	8d e6       	ldi	r24, 0x6D	; 109
    1200:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>
    1204:	8f 2d       	mov	r24, r15
    1206:	0e 94 29 08 	call	0x1052	; 0x1052 <mpu6050_setMemoryStartAddress>
    120a:	a4 01       	movw	r20, r8
    120c:	61 2f       	mov	r22, r17
    120e:	8f e6       	ldi	r24, 0x6F	; 111
    1210:	0e 94 a7 06 	call	0xd4e	; 0xd4e <mpu6050_readBytes>
    1214:	41 2f       	mov	r20, r17
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	b4 01       	movw	r22, r8
    121a:	c6 01       	movw	r24, r12
    121c:	0e 94 80 15 	call	0x2b00	; 0x2b00 <memcmp>
    1220:	89 2b       	or	r24, r25
    1222:	51 f0       	breq	.+20     	; 0x1238 <mpu6050_writeMemoryBlock+0x126>
    1224:	c4 01       	movw	r24, r8
    1226:	0e 94 31 14 	call	0x2862	; 0x2862 <free>
    122a:	ee 20       	and	r14, r14
    122c:	11 f1       	breq	.+68     	; 0x1272 <mpu6050_writeMemoryBlock+0x160>
    122e:	c6 01       	movw	r24, r12
    1230:	0e 94 31 14 	call	0x2862	; 0x2862 <free>
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	20 c0       	rjmp	.+64     	; 0x1278 <mpu6050_writeMemoryBlock+0x166>
    1238:	c1 0f       	add	r28, r17
    123a:	d1 1d       	adc	r29, r1
    123c:	ca 15       	cp	r28, r10
    123e:	db 05       	cpc	r29, r11
    1240:	60 f4       	brcc	.+24     	; 0x125a <mpu6050_writeMemoryBlock+0x148>
    1242:	f1 0e       	add	r15, r17
    1244:	09 f4       	brne	.+2      	; 0x1248 <mpu6050_writeMemoryBlock+0x136>
    1246:	33 94       	inc	r3
    1248:	63 2d       	mov	r22, r3
    124a:	6f 71       	andi	r22, 0x1F	; 31
    124c:	8d e6       	ldi	r24, 0x6D	; 109
    124e:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>
    1252:	8f 2d       	mov	r24, r15
    1254:	0e 94 29 08 	call	0x1052	; 0x1052 <mpu6050_setMemoryStartAddress>
    1258:	9a cf       	rjmp	.-204    	; 0x118e <mpu6050_writeMemoryBlock+0x7c>
    125a:	00 23       	and	r16, r16
    125c:	19 f0       	breq	.+6      	; 0x1264 <mpu6050_writeMemoryBlock+0x152>
    125e:	c4 01       	movw	r24, r8
    1260:	0e 94 31 14 	call	0x2862	; 0x2862 <free>
    1264:	ee 20       	and	r14, r14
    1266:	39 f0       	breq	.+14     	; 0x1276 <mpu6050_writeMemoryBlock+0x164>
    1268:	c6 01       	movw	r24, r12
    126a:	0e 94 31 14 	call	0x2862	; 0x2862 <free>
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	03 c0       	rjmp	.+6      	; 0x1278 <mpu6050_writeMemoryBlock+0x166>
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <mpu6050_writeMemoryBlock+0x166>
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	ff 90       	pop	r15
    1282:	ef 90       	pop	r14
    1284:	df 90       	pop	r13
    1286:	cf 90       	pop	r12
    1288:	bf 90       	pop	r11
    128a:	af 90       	pop	r10
    128c:	9f 90       	pop	r9
    128e:	8f 90       	pop	r8
    1290:	7f 90       	pop	r7
    1292:	6f 90       	pop	r6
    1294:	5f 90       	pop	r5
    1296:	4f 90       	pop	r4
    1298:	3f 90       	pop	r3
    129a:	2f 90       	pop	r2
    129c:	08 95       	ret

0000129e <mpu6050_writeDMPConfigurationSet>:
    129e:	5f 92       	push	r5
    12a0:	6f 92       	push	r6
    12a2:	7f 92       	push	r7
    12a4:	8f 92       	push	r8
    12a6:	9f 92       	push	r9
    12a8:	af 92       	push	r10
    12aa:	bf 92       	push	r11
    12ac:	cf 92       	push	r12
    12ae:	df 92       	push	r13
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	5c 01       	movw	r10, r24
    12be:	3b 01       	movw	r6, r22
    12c0:	54 2e       	mov	r5, r20
    12c2:	44 23       	and	r20, r20
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <mpu6050_writeDMPConfigurationSet+0x2a>
    12c6:	7c c0       	rjmp	.+248    	; 0x13c0 <mpu6050_writeDMPConfigurationSet+0x122>
    12c8:	88 e0       	ldi	r24, 0x08	; 8
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	0e 94 99 13 	call	0x2732	; 0x2732 <malloc>
    12d0:	4c 01       	movw	r8, r24
    12d2:	61 14       	cp	r6, r1
    12d4:	71 04       	cpc	r7, r1
    12d6:	19 f4       	brne	.+6      	; 0x12de <mpu6050_writeDMPConfigurationSet+0x40>
    12d8:	6a c0       	rjmp	.+212    	; 0x13ae <mpu6050_writeDMPConfigurationSet+0x110>
    12da:	81 2c       	mov	r8, r1
    12dc:	91 2c       	mov	r9, r1
    12de:	c0 e0       	ldi	r28, 0x00	; 0
    12e0:	d0 e0       	ldi	r29, 0x00	; 0
    12e2:	55 20       	and	r5, r5
    12e4:	a9 f0       	breq	.+42     	; 0x1310 <mpu6050_writeDMPConfigurationSet+0x72>
    12e6:	f5 01       	movw	r30, r10
    12e8:	ec 0f       	add	r30, r28
    12ea:	fd 1f       	adc	r31, r29
    12ec:	f4 90       	lpm	r15, Z
    12ee:	fe 01       	movw	r30, r28
    12f0:	31 96       	adiw	r30, 0x01	; 1
    12f2:	ea 0d       	add	r30, r10
    12f4:	fb 1d       	adc	r31, r11
    12f6:	14 91       	lpm	r17, Z
    12f8:	6e 01       	movw	r12, r28
    12fa:	83 e0       	ldi	r24, 0x03	; 3
    12fc:	c8 0e       	add	r12, r24
    12fe:	d1 1c       	adc	r13, r1
    1300:	fe 01       	movw	r30, r28
    1302:	32 96       	adiw	r30, 0x02	; 2
    1304:	ea 0d       	add	r30, r10
    1306:	fb 1d       	adc	r31, r11
    1308:	04 91       	lpm	r16, Z
    130a:	01 11       	cpse	r16, r1
    130c:	0c c0       	rjmp	.+24     	; 0x1326 <mpu6050_writeDMPConfigurationSet+0x88>
    130e:	5d c0       	rjmp	.+186    	; 0x13ca <mpu6050_writeDMPConfigurationSet+0x12c>
    1310:	6e 01       	movw	r12, r28
    1312:	83 e0       	ldi	r24, 0x03	; 3
    1314:	c8 0e       	add	r12, r24
    1316:	d1 1c       	adc	r13, r1
    1318:	f5 01       	movw	r30, r10
    131a:	ec 0f       	add	r30, r28
    131c:	fd 1f       	adc	r31, r29
    131e:	02 81       	ldd	r16, Z+2	; 0x02
    1320:	01 11       	cpse	r16, r1
    1322:	1b c0       	rjmp	.+54     	; 0x135a <mpu6050_writeDMPConfigurationSet+0xbc>
    1324:	58 c0       	rjmp	.+176    	; 0x13d6 <mpu6050_writeDMPConfigurationSet+0x138>
    1326:	03 30       	cpi	r16, 0x03	; 3
    1328:	30 f0       	brcs	.+12     	; 0x1336 <mpu6050_writeDMPConfigurationSet+0x98>
    132a:	60 2f       	mov	r22, r16
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	c4 01       	movw	r24, r8
    1330:	0e 94 ba 14 	call	0x2974	; 0x2974 <realloc>
    1334:	4c 01       	movw	r8, r24
    1336:	20 2f       	mov	r18, r16
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	21 15       	cp	r18, r1
    133c:	31 05       	cpc	r19, r1
    133e:	a1 f0       	breq	.+40     	; 0x1368 <mpu6050_writeDMPConfigurationSet+0xca>
    1340:	f5 01       	movw	r30, r10
    1342:	ec 0d       	add	r30, r12
    1344:	fd 1d       	adc	r31, r13
    1346:	d4 01       	movw	r26, r8
    1348:	28 0d       	add	r18, r8
    134a:	39 1d       	adc	r19, r9
    134c:	84 91       	lpm	r24, Z
    134e:	8d 93       	st	X+, r24
    1350:	31 96       	adiw	r30, 0x01	; 1
    1352:	a2 17       	cp	r26, r18
    1354:	b3 07       	cpc	r27, r19
    1356:	d1 f7       	brne	.-12     	; 0x134c <mpu6050_writeDMPConfigurationSet+0xae>
    1358:	07 c0       	rjmp	.+14     	; 0x1368 <mpu6050_writeDMPConfigurationSet+0xca>
    135a:	ca 0d       	add	r28, r10
    135c:	db 1d       	adc	r29, r11
    135e:	f8 80       	ld	r15, Y
    1360:	19 81       	ldd	r17, Y+1	; 0x01
    1362:	45 01       	movw	r8, r10
    1364:	8c 0c       	add	r8, r12
    1366:	9d 1c       	adc	r9, r13
    1368:	c0 2f       	mov	r28, r16
    136a:	d0 e0       	ldi	r29, 0x00	; 0
    136c:	e1 2c       	mov	r14, r1
    136e:	01 e0       	ldi	r16, 0x01	; 1
    1370:	21 2f       	mov	r18, r17
    1372:	4f 2d       	mov	r20, r15
    1374:	be 01       	movw	r22, r28
    1376:	c4 01       	movw	r24, r8
    1378:	0e 94 89 08 	call	0x1112	; 0x1112 <mpu6050_writeMemoryBlock>
    137c:	cc 0d       	add	r28, r12
    137e:	dd 1d       	adc	r29, r13
    1380:	81 11       	cpse	r24, r1
    1382:	0f c0       	rjmp	.+30     	; 0x13a2 <mpu6050_writeDMPConfigurationSet+0x104>
    1384:	07 c0       	rjmp	.+14     	; 0x1394 <mpu6050_writeDMPConfigurationSet+0xf6>
    1386:	e1 30       	cpi	r30, 0x01	; 1
    1388:	29 f4       	brne	.+10     	; 0x1394 <mpu6050_writeDMPConfigurationSet+0xf6>
    138a:	62 e3       	ldi	r22, 0x32	; 50
    138c:	88 e3       	ldi	r24, 0x38	; 56
    138e:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>
    1392:	07 c0       	rjmp	.+14     	; 0x13a2 <mpu6050_writeDMPConfigurationSet+0x104>
    1394:	55 20       	and	r5, r5
    1396:	81 f0       	breq	.+32     	; 0x13b8 <mpu6050_writeDMPConfigurationSet+0x11a>
    1398:	c4 01       	movw	r24, r8
    139a:	0e 94 31 14 	call	0x2862	; 0x2862 <free>
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	20 c0       	rjmp	.+64     	; 0x13e2 <mpu6050_writeDMPConfigurationSet+0x144>
    13a2:	c6 15       	cp	r28, r6
    13a4:	d7 05       	cpc	r29, r7
    13a6:	08 f4       	brcc	.+2      	; 0x13aa <mpu6050_writeDMPConfigurationSet+0x10c>
    13a8:	9c cf       	rjmp	.-200    	; 0x12e2 <mpu6050_writeDMPConfigurationSet+0x44>
    13aa:	55 20       	and	r5, r5
    13ac:	39 f0       	breq	.+14     	; 0x13bc <mpu6050_writeDMPConfigurationSet+0x11e>
    13ae:	c4 01       	movw	r24, r8
    13b0:	0e 94 31 14 	call	0x2862	; 0x2862 <free>
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	15 c0       	rjmp	.+42     	; 0x13e2 <mpu6050_writeDMPConfigurationSet+0x144>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	13 c0       	rjmp	.+38     	; 0x13e2 <mpu6050_writeDMPConfigurationSet+0x144>
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	11 c0       	rjmp	.+34     	; 0x13e2 <mpu6050_writeDMPConfigurationSet+0x144>
    13c0:	67 2b       	or	r22, r23
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <mpu6050_writeDMPConfigurationSet+0x128>
    13c4:	8a cf       	rjmp	.-236    	; 0x12da <mpu6050_writeDMPConfigurationSet+0x3c>
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	0c c0       	rjmp	.+24     	; 0x13e2 <mpu6050_writeDMPConfigurationSet+0x144>
    13ca:	24 96       	adiw	r28, 0x04	; 4
    13cc:	f5 01       	movw	r30, r10
    13ce:	ec 0d       	add	r30, r12
    13d0:	fd 1d       	adc	r31, r13
    13d2:	e4 91       	lpm	r30, Z
    13d4:	d8 cf       	rjmp	.-80     	; 0x1386 <mpu6050_writeDMPConfigurationSet+0xe8>
    13d6:	24 96       	adiw	r28, 0x04	; 4
    13d8:	f5 01       	movw	r30, r10
    13da:	ec 0d       	add	r30, r12
    13dc:	fd 1d       	adc	r31, r13
    13de:	e0 81       	ld	r30, Z
    13e0:	d2 cf       	rjmp	.-92     	; 0x1386 <mpu6050_writeDMPConfigurationSet+0xe8>
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	ff 90       	pop	r15
    13ec:	ef 90       	pop	r14
    13ee:	df 90       	pop	r13
    13f0:	cf 90       	pop	r12
    13f2:	bf 90       	pop	r11
    13f4:	af 90       	pop	r10
    13f6:	9f 90       	pop	r9
    13f8:	8f 90       	pop	r8
    13fa:	7f 90       	pop	r7
    13fc:	6f 90       	pop	r6
    13fe:	5f 90       	pop	r5
    1400:	08 95       	ret

00001402 <mpu6050_getFIFOCount>:
    1402:	47 ef       	ldi	r20, 0xF7	; 247
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	62 e0       	ldi	r22, 0x02	; 2
    1408:	82 e7       	ldi	r24, 0x72	; 114
    140a:	0e 94 a7 06 	call	0xd4e	; 0xd4e <mpu6050_readBytes>
    140e:	e7 ef       	ldi	r30, 0xF7	; 247
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	20 81       	ld	r18, Z
    1414:	81 81       	ldd	r24, Z+1	; 0x01
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	92 2b       	or	r25, r18
    141a:	08 95       	ret

0000141c <mpu6050_getFIFOBytes>:
    141c:	ac 01       	movw	r20, r24
    141e:	84 e7       	ldi	r24, 0x74	; 116
    1420:	0e 94 a7 06 	call	0xd4e	; 0xd4e <mpu6050_readBytes>
    1424:	08 95       	ret

00001426 <mpu6050_getIntStatus>:
    1426:	67 ef       	ldi	r22, 0xF7	; 247
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	8a e3       	ldi	r24, 0x3A	; 58
    142c:	0e 94 f5 06 	call	0xdea	; 0xdea <mpu6050_readByte>
    1430:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <buffer>
    1434:	08 95       	ret

00001436 <mpu6050_resetFIFO>:
    1436:	41 e0       	ldi	r20, 0x01	; 1
    1438:	62 e0       	ldi	r22, 0x02	; 2
    143a:	8a e6       	ldi	r24, 0x6A	; 106
    143c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <mpu6050_writeBit>
    1440:	08 95       	ret

00001442 <mpu6050_getXGyroOffset>:
    1442:	27 ef       	ldi	r18, 0xF7	; 247
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	46 e0       	ldi	r20, 0x06	; 6
    1448:	66 e0       	ldi	r22, 0x06	; 6
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	0e 94 33 07 	call	0xe66	; 0xe66 <mpu6050_readBits>
    1450:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <buffer>
    1454:	08 95       	ret

00001456 <mpu6050_setXGyroOffset>:
    1456:	28 2f       	mov	r18, r24
    1458:	46 e0       	ldi	r20, 0x06	; 6
    145a:	66 e0       	ldi	r22, 0x06	; 6
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	0e 94 71 07 	call	0xee2	; 0xee2 <mpu6050_writeBits>
    1462:	08 95       	ret

00001464 <mpu6050_getYGyroOffset>:
    1464:	27 ef       	ldi	r18, 0xF7	; 247
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	46 e0       	ldi	r20, 0x06	; 6
    146a:	66 e0       	ldi	r22, 0x06	; 6
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	0e 94 33 07 	call	0xe66	; 0xe66 <mpu6050_readBits>
    1472:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <buffer>
    1476:	08 95       	ret

00001478 <mpu6050_setYGyroOffset>:
    1478:	28 2f       	mov	r18, r24
    147a:	46 e0       	ldi	r20, 0x06	; 6
    147c:	66 e0       	ldi	r22, 0x06	; 6
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	0e 94 71 07 	call	0xee2	; 0xee2 <mpu6050_writeBits>
    1484:	08 95       	ret

00001486 <mpu6050_getZGyroOffset>:
    1486:	27 ef       	ldi	r18, 0xF7	; 247
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	46 e0       	ldi	r20, 0x06	; 6
    148c:	66 e0       	ldi	r22, 0x06	; 6
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	0e 94 33 07 	call	0xe66	; 0xe66 <mpu6050_readBits>
    1494:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <buffer>
    1498:	08 95       	ret

0000149a <mpu6050_setZGyroOffset>:
    149a:	28 2f       	mov	r18, r24
    149c:	46 e0       	ldi	r20, 0x06	; 6
    149e:	66 e0       	ldi	r22, 0x06	; 6
    14a0:	82 e0       	ldi	r24, 0x02	; 2
    14a2:	0e 94 71 07 	call	0xee2	; 0xee2 <mpu6050_writeBits>
    14a6:	08 95       	ret

000014a8 <mpu6050_setSleepDisabled>:
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	66 e0       	ldi	r22, 0x06	; 6
    14ac:	8b e6       	ldi	r24, 0x6B	; 107
    14ae:	0e 94 b5 07 	call	0xf6a	; 0xf6a <mpu6050_writeBit>
    14b2:	08 95       	ret

000014b4 <mpu6050_init>:
void mpu6050_init() {
    //timer0_init();
    //timer1_init();
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
    14b4:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <i2c_init>
    14b8:	83 e0       	ldi	r24, 0x03	; 3
    14ba:	8a 95       	dec	r24
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <mpu6050_init+0x6>
    14be:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14c0:	87 ea       	ldi	r24, 0xA7	; 167
    14c2:	91 e6       	ldi	r25, 0x61	; 97
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <mpu6050_init+0x10>
    14c8:	00 c0       	rjmp	.+0      	; 0x14ca <mpu6050_init+0x16>
    14ca:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
    14cc:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <mpu6050_setSleepDisabled>
    14d0:	83 ec       	ldi	r24, 0xC3	; 195
    14d2:	99 e0       	ldi	r25, 0x09	; 9
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <mpu6050_init+0x20>
    14d8:	00 c0       	rjmp	.+0      	; 0x14da <mpu6050_init+0x26>
    14da:	00 00       	nop
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
    14dc:	21 e0       	ldi	r18, 0x01	; 1
    14de:	43 e0       	ldi	r20, 0x03	; 3
    14e0:	62 e0       	ldi	r22, 0x02	; 2
    14e2:	8b e6       	ldi	r24, 0x6B	; 107
    14e4:	0e 94 71 07 	call	0xee2	; 0xee2 <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
    14e8:	23 e0       	ldi	r18, 0x03	; 3
    14ea:	43 e0       	ldi	r20, 0x03	; 3
    14ec:	62 e0       	ldi	r22, 0x02	; 2
    14ee:	8a e1       	ldi	r24, 0x1A	; 26
    14f0:	0e 94 71 07 	call	0xee2	; 0xee2 <mpu6050_writeBits>
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
    14f4:	64 e0       	ldi	r22, 0x04	; 4
    14f6:	89 e1       	ldi	r24, 0x19	; 25
    14f8:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
    14fc:	23 e0       	ldi	r18, 0x03	; 3
    14fe:	42 e0       	ldi	r20, 0x02	; 2
    1500:	64 e0       	ldi	r22, 0x04	; 4
    1502:	8b e1       	ldi	r24, 0x1B	; 27
    1504:	0e 94 71 07 	call	0xee2	; 0xee2 <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	42 e0       	ldi	r20, 0x02	; 2
    150c:	64 e0       	ldi	r22, 0x04	; 4
    150e:	8c e1       	ldi	r24, 0x1C	; 28
    1510:	0e 94 71 07 	call	0xee2	; 0xee2 <mpu6050_writeBits>
    1514:	08 95       	ret

00001516 <mpu6050_dmpEnable>:

/*
 * enable dmp
 */
void mpu6050_dmpEnable() {
	MPU6050_DMP_INT0ENABLE;
    1516:	8b b7       	in	r24, 0x3b	; 59
    1518:	80 64       	ori	r24, 0x40	; 64
    151a:	8b bf       	out	0x3b, r24	; 59
	mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, 1);
    151c:	41 e0       	ldi	r20, 0x01	; 1
    151e:	67 e0       	ldi	r22, 0x07	; 7
    1520:	8a e6       	ldi	r24, 0x6A	; 106
    1522:	0e 94 b5 07 	call	0xf6a	; 0xf6a <mpu6050_writeBit>
    1526:	08 95       	ret

00001528 <mpu6050_dmpDisable>:

/*
 * disable dmp
 */
void mpu6050_dmpDisable() {
	MPU6050_DMP_INT0DISABLE;
    1528:	8b b7       	in	r24, 0x3b	; 59
    152a:	8f 7b       	andi	r24, 0xBF	; 191
    152c:	8b bf       	out	0x3b, r24	; 59
	mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, 0);
    152e:	40 e0       	ldi	r20, 0x00	; 0
    1530:	67 e0       	ldi	r22, 0x07	; 7
    1532:	8a e6       	ldi	r24, 0x6A	; 106
    1534:	0e 94 b5 07 	call	0xf6a	; 0xf6a <mpu6050_writeBit>
    1538:	08 95       	ret

0000153a <mpu6050_dmpInitialize>:
};

/*
 * initialize mpu6050 dmp
 */
uint8_t mpu6050_dmpInitialize() {
    153a:	cf 92       	push	r12
    153c:	df 92       	push	r13
    153e:	ef 92       	push	r14
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	c0 59       	subi	r28, 0x90	; 144
    154e:	d1 09       	sbc	r29, r1
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
	//setup interrupt
	MPU6050_DMP_INT0SETUP;
    155a:	85 b7       	in	r24, 0x35	; 53
    155c:	83 60       	ori	r24, 0x03	; 3
    155e:	85 bf       	out	0x35, r24	; 53

	//reset
	mpu6050_writeBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, 1);
    1560:	41 e0       	ldi	r20, 0x01	; 1
    1562:	67 e0       	ldi	r22, 0x07	; 7
    1564:	8b e6       	ldi	r24, 0x6B	; 107
    1566:	0e 94 b5 07 	call	0xf6a	; 0xf6a <mpu6050_writeBit>
    156a:	8b e4       	ldi	r24, 0x4B	; 75
    156c:	9d e1       	ldi	r25, 0x1D	; 29
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <mpu6050_dmpInitialize+0x34>
    1572:	00 c0       	rjmp	.+0      	; 0x1574 <mpu6050_dmpInitialize+0x3a>
    1574:	00 00       	nop
    _delay_ms(30);//wait after reset

    //disable sleep mode
    mpu6050_setSleepDisabled();
    1576:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <mpu6050_setSleepDisabled>

    //set memorybank to 0
    mpu6050_setMemoryBank(0, 0, 0);
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	0e 94 1f 08 	call	0x103e	; 0x103e <mpu6050_setMemoryBank>

    //get X/Y/Z gyro offsets
    int8_t xgOffset = mpu6050_getXGyroOffset();
    1584:	0e 94 21 0a 	call	0x1442	; 0x1442 <mpu6050_getXGyroOffset>
    1588:	d8 2e       	mov	r13, r24
    int8_t ygOffset = mpu6050_getYGyroOffset();
    158a:	0e 94 32 0a 	call	0x1464	; 0x1464 <mpu6050_getYGyroOffset>
    158e:	18 2f       	mov	r17, r24
    int8_t zgOffset = mpu6050_getZGyroOffset();
    1590:	0e 94 43 0a 	call	0x1486	; 0x1486 <mpu6050_getZGyroOffset>

    //setting slave 0 address to 0x7F
	mpu6050_writeByte(MPU6050_RA_I2C_SLV0_ADDR + 0*3, 0x7F);
    1594:	6f e7       	ldi	r22, 0x7F	; 127
    1596:	85 e2       	ldi	r24, 0x25	; 37
    1598:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>
	//disabling I2C Master mode
	mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, 0);
    159c:	40 e0       	ldi	r20, 0x00	; 0
    159e:	65 e0       	ldi	r22, 0x05	; 5
    15a0:	8a e6       	ldi	r24, 0x6A	; 106
    15a2:	0e 94 b5 07 	call	0xf6a	; 0xf6a <mpu6050_writeBit>
	//setting slave 0 address to 0x68 (self)
	mpu6050_writeByte(MPU6050_RA_I2C_SLV0_ADDR + 0*3, 0x68);
    15a6:	68 e6       	ldi	r22, 0x68	; 104
    15a8:	85 e2       	ldi	r24, 0x25	; 37
    15aa:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>
	//resetting I2C Master control
	mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, 1);
    15ae:	41 e0       	ldi	r20, 0x01	; 1
    15b0:	61 e0       	ldi	r22, 0x01	; 1
    15b2:	8a e6       	ldi	r24, 0x6A	; 106
    15b4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <mpu6050_writeBit>
    15b8:	87 e8       	ldi	r24, 0x87	; 135
    15ba:	93 e1       	ldi	r25, 0x13	; 19
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <mpu6050_dmpInitialize+0x82>
    15c0:	00 c0       	rjmp	.+0      	; 0x15c2 <mpu6050_dmpInitialize+0x88>
    15c2:	00 00       	nop
	_delay_ms(20);

    //load DMP code into memory banks
    if (mpu6050_writeMemoryBlock(mpu6050_dmpMemory, MPU6050_DMP_CODE_SIZE, 0, 0, 1, 1) == 1) {
    15c4:	ee 24       	eor	r14, r14
    15c6:	e3 94       	inc	r14
    15c8:	01 e0       	ldi	r16, 0x01	; 1
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	40 e0       	ldi	r20, 0x00	; 0
    15ce:	69 e8       	ldi	r22, 0x89	; 137
    15d0:	77 e0       	ldi	r23, 0x07	; 7
    15d2:	87 ea       	ldi	r24, 0xA7	; 167
    15d4:	92 e0       	ldi	r25, 0x02	; 2
    15d6:	0e 94 89 08 	call	0x1112	; 0x1112 <mpu6050_writeMemoryBlock>
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <mpu6050_dmpInitialize+0xa6>
    15de:	09 c2       	rjmp	.+1042   	; 0x19f2 <mpu6050_dmpInitialize+0x4b8>
        if (mpu6050_writeDMPConfigurationSet(mpu6050_dmpConfig, MPU6050_DMP_CONFIG_SIZE, 1)) {
    15e0:	41 e0       	ldi	r20, 0x01	; 1
    15e2:	60 ec       	ldi	r22, 0xC0	; 192
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	87 ee       	ldi	r24, 0xE7	; 231
    15e8:	91 e0       	ldi	r25, 0x01	; 1
    15ea:	0e 94 4f 09 	call	0x129e	; 0x129e <mpu6050_writeDMPConfigurationSet>
    15ee:	88 23       	and	r24, r24
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <mpu6050_dmpInitialize+0xba>
    15f2:	01 c2       	rjmp	.+1026   	; 0x19f6 <mpu6050_dmpInitialize+0x4bc>

        	//set clock source
        	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_ZGYRO);
    15f4:	23 e0       	ldi	r18, 0x03	; 3
    15f6:	43 e0       	ldi	r20, 0x03	; 3
    15f8:	62 e0       	ldi	r22, 0x02	; 2
    15fa:	8b e6       	ldi	r24, 0x6B	; 107
    15fc:	0e 94 71 07 	call	0xee2	; 0xee2 <mpu6050_writeBits>

        	//set DMP and FIFO_OFLOW interrupts enabled
        	mpu6050_writeByte(MPU6050_RA_INT_ENABLE, 0x12);
    1600:	62 e1       	ldi	r22, 0x12	; 18
    1602:	88 e3       	ldi	r24, 0x38	; 56
    1604:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>

            //set sample rate
        	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); // 1khz / (1 + 4) = 200 Hz
    1608:	64 e0       	ldi	r22, 0x04	; 4
    160a:	89 e1       	ldi	r24, 0x19	; 25
    160c:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>

            //set external frame sync to TEMP_OUT_L[0]
            mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, MPU6050_EXT_SYNC_TEMP_OUT_L);
    1610:	21 e0       	ldi	r18, 0x01	; 1
    1612:	43 e0       	ldi	r20, 0x03	; 3
    1614:	65 e0       	ldi	r22, 0x05	; 5
    1616:	8a e1       	ldi	r24, 0x1A	; 26
    1618:	0e 94 71 07 	call	0xee2	; 0xee2 <mpu6050_writeBits>

            //set DLPF bandwidth to 42Hz
            mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
    161c:	23 e0       	ldi	r18, 0x03	; 3
    161e:	43 e0       	ldi	r20, 0x03	; 3
    1620:	62 e0       	ldi	r22, 0x02	; 2
    1622:	8a e1       	ldi	r24, 0x1A	; 26
    1624:	0e 94 71 07 	call	0xee2	; 0xee2 <mpu6050_writeBits>

            //set gyro sensitivity to +/- 2000 deg/sec
            mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS_2000);
    1628:	23 e0       	ldi	r18, 0x03	; 3
    162a:	42 e0       	ldi	r20, 0x02	; 2
    162c:	64 e0       	ldi	r22, 0x04	; 4
    162e:	8b e1       	ldi	r24, 0x1B	; 27
    1630:	0e 94 71 07 	call	0xee2	; 0xee2 <mpu6050_writeBits>

            //set DMP configuration bytes (function unknown)
            mpu6050_writeByte(MPU6050_RA_DMP_CFG_1, 0x03);
    1634:	63 e0       	ldi	r22, 0x03	; 3
    1636:	80 e7       	ldi	r24, 0x70	; 112
    1638:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>
            mpu6050_writeByte(MPU6050_RA_DMP_CFG_2, 0x00);
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	81 e7       	ldi	r24, 0x71	; 113
    1640:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>

            //clear OTP Bank flag
            mpu6050_writeBit(MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, 0);
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <mpu6050_writeBit>
            //set X/Y/Z gyro offsets to previous values
            //xgOffset = 0;
            //ygOffset = 0;
            zgOffset = 90;

            mpu6050_setXGyroOffset(xgOffset);
    164e:	8d 2d       	mov	r24, r13
    1650:	0e 94 2b 0a 	call	0x1456	; 0x1456 <mpu6050_setXGyroOffset>
            mpu6050_setYGyroOffset(ygOffset);
    1654:	81 2f       	mov	r24, r17
    1656:	0e 94 3c 0a 	call	0x1478	; 0x1478 <mpu6050_setYGyroOffset>
            mpu6050_setZGyroOffset(zgOffset);
    165a:	8a e5       	ldi	r24, 0x5A	; 90
    165c:	0e 94 4d 0a 	call	0x149a	; 0x149a <mpu6050_setZGyroOffset>

            //set X/Y/Z gyro user offsets to zero
            mpu6050_writeWords(MPU6050_RA_XG_OFFS_USRH, 1, 0);
    1660:	40 e0       	ldi	r20, 0x00	; 0
    1662:	50 e0       	ldi	r21, 0x00	; 0
    1664:	61 e0       	ldi	r22, 0x01	; 1
    1666:	83 e1       	ldi	r24, 0x13	; 19
    1668:	0e 94 e6 07 	call	0xfcc	; 0xfcc <mpu6050_writeWords>
            mpu6050_writeWords(MPU6050_RA_YG_OFFS_USRH, 1, 0);
    166c:	40 e0       	ldi	r20, 0x00	; 0
    166e:	50 e0       	ldi	r21, 0x00	; 0
    1670:	61 e0       	ldi	r22, 0x01	; 1
    1672:	85 e1       	ldi	r24, 0x15	; 21
    1674:	0e 94 e6 07 	call	0xfcc	; 0xfcc <mpu6050_writeWords>
            mpu6050_writeWords(MPU6050_RA_ZG_OFFS_USRH, 1, 0);
    1678:	40 e0       	ldi	r20, 0x00	; 0
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	87 e1       	ldi	r24, 0x17	; 23
    1680:	0e 94 e6 07 	call	0xfcc	; 0xfcc <mpu6050_writeWords>

            //writing final memory update 1/7 (function unknown)
            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
    1684:	c1 2c       	mov	r12, r1
    1686:	d1 2c       	mov	r13, r1
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	f6 01       	movw	r30, r12
    168c:	e8 54       	subi	r30, 0x48	; 72
    168e:	fe 4f       	sbci	r31, 0xFE	; 254
    1690:	e4 91       	lpm	r30, Z
    1692:	a1 e8       	ldi	r26, 0x81	; 129
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ac 0f       	add	r26, r28
    1698:	bd 1f       	adc	r27, r29
    169a:	a8 0f       	add	r26, r24
    169c:	b1 1d       	adc	r27, r1
    169e:	ec 93       	st	X, r30
    16a0:	8f 5f       	subi	r24, 0xFF	; 255
    16a2:	9f ef       	ldi	r25, 0xFF	; 255
    16a4:	c9 1a       	sub	r12, r25
    16a6:	d9 0a       	sbc	r13, r25
    16a8:	84 30       	cpi	r24, 0x04	; 4
    16aa:	78 f3       	brcs	.-34     	; 0x168a <mpu6050_dmpInitialize+0x150>
    16ac:	cd 57       	subi	r28, 0x7D	; 125
    16ae:	df 4f       	sbci	r29, 0xFF	; 255
    16b0:	68 81       	ld	r22, Y
    16b2:	c3 58       	subi	r28, 0x83	; 131
    16b4:	d0 40       	sbci	r29, 0x00	; 0
    16b6:	48 2f       	mov	r20, r24
    16b8:	50 e0       	ldi	r21, 0x00	; 0
    16ba:	26 2f       	mov	r18, r22
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	2d 5f       	subi	r18, 0xFD	; 253
    16c0:	3f 4f       	sbci	r19, 0xFF	; 255
    16c2:	42 17       	cp	r20, r18
    16c4:	53 07       	cpc	r21, r19
    16c6:	0c f3       	brlt	.-62     	; 0x168a <mpu6050_dmpInitialize+0x150>
            mpu6050_writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1], 1, 0);
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	e1 2c       	mov	r14, r1
    16cc:	01 e0       	ldi	r16, 0x01	; 1
    16ce:	ce 57       	subi	r28, 0x7E	; 126
    16d0:	df 4f       	sbci	r29, 0xFF	; 255
    16d2:	28 81       	ld	r18, Y
    16d4:	c2 58       	subi	r28, 0x82	; 130
    16d6:	d0 40       	sbci	r29, 0x00	; 0
    16d8:	cf 57       	subi	r28, 0x7F	; 127
    16da:	df 4f       	sbci	r29, 0xFF	; 255
    16dc:	48 81       	ld	r20, Y
    16de:	c1 58       	subi	r28, 0x81	; 129
    16e0:	d0 40       	sbci	r29, 0x00	; 0
    16e2:	81 e8       	ldi	r24, 0x81	; 129
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	8c 0f       	add	r24, r28
    16e8:	9d 1f       	adc	r25, r29
    16ea:	03 96       	adiw	r24, 0x03	; 3
    16ec:	0e 94 89 08 	call	0x1112	; 0x1112 <mpu6050_writeMemoryBlock>

            //writing final memory update 2/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	f6 01       	movw	r30, r12
    16f4:	e8 54       	subi	r30, 0x48	; 72
    16f6:	fe 4f       	sbci	r31, 0xFE	; 254
    16f8:	e4 91       	lpm	r30, Z
    16fa:	a1 e8       	ldi	r26, 0x81	; 129
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ac 0f       	add	r26, r28
    1700:	bd 1f       	adc	r27, r29
    1702:	a8 0f       	add	r26, r24
    1704:	b1 1d       	adc	r27, r1
    1706:	ec 93       	st	X, r30
    1708:	8f 5f       	subi	r24, 0xFF	; 255
    170a:	9f ef       	ldi	r25, 0xFF	; 255
    170c:	c9 1a       	sub	r12, r25
    170e:	d9 0a       	sbc	r13, r25
    1710:	84 30       	cpi	r24, 0x04	; 4
    1712:	78 f3       	brcs	.-34     	; 0x16f2 <mpu6050_dmpInitialize+0x1b8>
    1714:	cd 57       	subi	r28, 0x7D	; 125
    1716:	df 4f       	sbci	r29, 0xFF	; 255
    1718:	68 81       	ld	r22, Y
    171a:	c3 58       	subi	r28, 0x83	; 131
    171c:	d0 40       	sbci	r29, 0x00	; 0
    171e:	48 2f       	mov	r20, r24
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	26 2f       	mov	r18, r22
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	2d 5f       	subi	r18, 0xFD	; 253
    1728:	3f 4f       	sbci	r19, 0xFF	; 255
    172a:	42 17       	cp	r20, r18
    172c:	53 07       	cpc	r21, r19
    172e:	0c f3       	brlt	.-62     	; 0x16f2 <mpu6050_dmpInitialize+0x1b8>
            mpu6050_writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1], 1, 0);
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	e1 2c       	mov	r14, r1
    1734:	01 e0       	ldi	r16, 0x01	; 1
    1736:	ce 57       	subi	r28, 0x7E	; 126
    1738:	df 4f       	sbci	r29, 0xFF	; 255
    173a:	28 81       	ld	r18, Y
    173c:	c2 58       	subi	r28, 0x82	; 130
    173e:	d0 40       	sbci	r29, 0x00	; 0
    1740:	cf 57       	subi	r28, 0x7F	; 127
    1742:	df 4f       	sbci	r29, 0xFF	; 255
    1744:	48 81       	ld	r20, Y
    1746:	c1 58       	subi	r28, 0x81	; 129
    1748:	d0 40       	sbci	r29, 0x00	; 0
    174a:	81 e8       	ldi	r24, 0x81	; 129
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	8c 0f       	add	r24, r28
    1750:	9d 1f       	adc	r25, r29
    1752:	03 96       	adiw	r24, 0x03	; 3
    1754:	0e 94 89 08 	call	0x1112	; 0x1112 <mpu6050_writeMemoryBlock>

            //reset FIFO
            mpu6050_writeBits(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, 1, 1);
    1758:	21 e0       	ldi	r18, 0x01	; 1
    175a:	41 e0       	ldi	r20, 0x01	; 1
    175c:	62 e0       	ldi	r22, 0x02	; 2
    175e:	8a e6       	ldi	r24, 0x6A	; 106
    1760:	0e 94 71 07 	call	0xee2	; 0xee2 <mpu6050_writeBits>

            //reading FIFO count
            uint8_t fifoCount = mpu6050_getFIFOCount();
    1764:	0e 94 01 0a 	call	0x1402	; 0x1402 <mpu6050_getFIFOCount>
            uint8_t fifoBuffer[128];

            //current FIFO count
            mpu6050_readBytes(MPU6050_RA_FIFO_R_W, fifoCount, fifoBuffer);
    1768:	ae 01       	movw	r20, r28
    176a:	4f 5f       	subi	r20, 0xFF	; 255
    176c:	5f 4f       	sbci	r21, 0xFF	; 255
    176e:	68 2f       	mov	r22, r24
    1770:	84 e7       	ldi	r24, 0x74	; 116
    1772:	0e 94 a7 06 	call	0xd4e	; 0xd4e <mpu6050_readBytes>

            //setting motion detection threshold to 2
            mpu6050_writeByte(MPU6050_RA_MOT_THR, 2);
    1776:	62 e0       	ldi	r22, 0x02	; 2
    1778:	8f e1       	ldi	r24, 0x1F	; 31
    177a:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>

            //setting zero-motion detection threshold to 156
            mpu6050_writeByte(MPU6050_RA_ZRMOT_THR, 156);
    177e:	6c e9       	ldi	r22, 0x9C	; 156
    1780:	81 e2       	ldi	r24, 0x21	; 33
    1782:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>

            //setting motion detection duration to 80
            mpu6050_writeByte(MPU6050_RA_MOT_DUR, 80);
    1786:	60 e5       	ldi	r22, 0x50	; 80
    1788:	80 e2       	ldi	r24, 0x20	; 32
    178a:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>

            //setting zero-motion detection duration to 0
            mpu6050_writeByte(MPU6050_RA_ZRMOT_DUR, 0);
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	82 e2       	ldi	r24, 0x22	; 34
    1792:	0e 94 23 07 	call	0xe46	; 0xe46 <mpu6050_writeByte>

            //reset FIFO
            mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, 1);
    1796:	41 e0       	ldi	r20, 0x01	; 1
    1798:	62 e0       	ldi	r22, 0x02	; 2
    179a:	8a e6       	ldi	r24, 0x6A	; 106
    179c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <mpu6050_writeBit>

            //enabling FIFO
            mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, 1);
    17a0:	41 e0       	ldi	r20, 0x01	; 1
    17a2:	66 e0       	ldi	r22, 0x06	; 6
    17a4:	8a e6       	ldi	r24, 0x6A	; 106
    17a6:	0e 94 b5 07 	call	0xf6a	; 0xf6a <mpu6050_writeBit>

            //enabling DMP
            mpu6050_dmpEnable();
    17aa:	0e 94 8b 0a 	call	0x1516	; 0x1516 <mpu6050_dmpEnable>

            //resetting DMP
            mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, 1);
    17ae:	41 e0       	ldi	r20, 0x01	; 1
    17b0:	63 e0       	ldi	r22, 0x03	; 3
    17b2:	8a e6       	ldi	r24, 0x6A	; 106
    17b4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <mpu6050_writeBit>

            //waiting for FIFO count > 2
            while ((fifoCount = mpu6050_getFIFOCount()) < 3);
    17b8:	0e 94 01 0a 	call	0x1402	; 0x1402 <mpu6050_getFIFOCount>
    17bc:	18 2f       	mov	r17, r24
    17be:	83 30       	cpi	r24, 0x03	; 3
    17c0:	d8 f3       	brcs	.-10     	; 0x17b8 <mpu6050_dmpInitialize+0x27e>
    17c2:	80 e0       	ldi	r24, 0x00	; 0

            //writing final memory update 3/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    17c4:	f6 01       	movw	r30, r12
    17c6:	e8 54       	subi	r30, 0x48	; 72
    17c8:	fe 4f       	sbci	r31, 0xFE	; 254
    17ca:	e4 91       	lpm	r30, Z
    17cc:	a1 e8       	ldi	r26, 0x81	; 129
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	ac 0f       	add	r26, r28
    17d2:	bd 1f       	adc	r27, r29
    17d4:	a8 0f       	add	r26, r24
    17d6:	b1 1d       	adc	r27, r1
    17d8:	ec 93       	st	X, r30
    17da:	8f 5f       	subi	r24, 0xFF	; 255
    17dc:	9f ef       	ldi	r25, 0xFF	; 255
    17de:	c9 1a       	sub	r12, r25
    17e0:	d9 0a       	sbc	r13, r25
    17e2:	84 30       	cpi	r24, 0x04	; 4
    17e4:	78 f3       	brcs	.-34     	; 0x17c4 <mpu6050_dmpInitialize+0x28a>
    17e6:	cd 57       	subi	r28, 0x7D	; 125
    17e8:	df 4f       	sbci	r29, 0xFF	; 255
    17ea:	68 81       	ld	r22, Y
    17ec:	c3 58       	subi	r28, 0x83	; 131
    17ee:	d0 40       	sbci	r29, 0x00	; 0
    17f0:	48 2f       	mov	r20, r24
    17f2:	50 e0       	ldi	r21, 0x00	; 0
    17f4:	26 2f       	mov	r18, r22
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	2d 5f       	subi	r18, 0xFD	; 253
    17fa:	3f 4f       	sbci	r19, 0xFF	; 255
    17fc:	42 17       	cp	r20, r18
    17fe:	53 07       	cpc	r21, r19
    1800:	0c f3       	brlt	.-62     	; 0x17c4 <mpu6050_dmpInitialize+0x28a>
            mpu6050_writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1], 1, 0);
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	e1 2c       	mov	r14, r1
    1806:	01 e0       	ldi	r16, 0x01	; 1
    1808:	ce 57       	subi	r28, 0x7E	; 126
    180a:	df 4f       	sbci	r29, 0xFF	; 255
    180c:	28 81       	ld	r18, Y
    180e:	c2 58       	subi	r28, 0x82	; 130
    1810:	d0 40       	sbci	r29, 0x00	; 0
    1812:	cf 57       	subi	r28, 0x7F	; 127
    1814:	df 4f       	sbci	r29, 0xFF	; 255
    1816:	48 81       	ld	r20, Y
    1818:	c1 58       	subi	r28, 0x81	; 129
    181a:	d0 40       	sbci	r29, 0x00	; 0
    181c:	81 e8       	ldi	r24, 0x81	; 129
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	8c 0f       	add	r24, r28
    1822:	9d 1f       	adc	r25, r29
    1824:	03 96       	adiw	r24, 0x03	; 3
    1826:	0e 94 89 08 	call	0x1112	; 0x1112 <mpu6050_writeMemoryBlock>

            //writing final memory update 4/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	f6 01       	movw	r30, r12
    182e:	e8 54       	subi	r30, 0x48	; 72
    1830:	fe 4f       	sbci	r31, 0xFE	; 254
    1832:	e4 91       	lpm	r30, Z
    1834:	a1 e8       	ldi	r26, 0x81	; 129
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	ac 0f       	add	r26, r28
    183a:	bd 1f       	adc	r27, r29
    183c:	a8 0f       	add	r26, r24
    183e:	b1 1d       	adc	r27, r1
    1840:	ec 93       	st	X, r30
    1842:	8f 5f       	subi	r24, 0xFF	; 255
    1844:	9f ef       	ldi	r25, 0xFF	; 255
    1846:	c9 1a       	sub	r12, r25
    1848:	d9 0a       	sbc	r13, r25
    184a:	84 30       	cpi	r24, 0x04	; 4
    184c:	78 f3       	brcs	.-34     	; 0x182c <mpu6050_dmpInitialize+0x2f2>
    184e:	cd 57       	subi	r28, 0x7D	; 125
    1850:	df 4f       	sbci	r29, 0xFF	; 255
    1852:	68 81       	ld	r22, Y
    1854:	c3 58       	subi	r28, 0x83	; 131
    1856:	d0 40       	sbci	r29, 0x00	; 0
    1858:	48 2f       	mov	r20, r24
    185a:	50 e0       	ldi	r21, 0x00	; 0
    185c:	26 2f       	mov	r18, r22
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	2d 5f       	subi	r18, 0xFD	; 253
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	42 17       	cp	r20, r18
    1866:	53 07       	cpc	r21, r19
    1868:	0c f3       	brlt	.-62     	; 0x182c <mpu6050_dmpInitialize+0x2f2>
            mpu6050_writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1], 1, 0);
    186a:	70 e0       	ldi	r23, 0x00	; 0
    186c:	e1 2c       	mov	r14, r1
    186e:	01 e0       	ldi	r16, 0x01	; 1
    1870:	ce 57       	subi	r28, 0x7E	; 126
    1872:	df 4f       	sbci	r29, 0xFF	; 255
    1874:	28 81       	ld	r18, Y
    1876:	c2 58       	subi	r28, 0x82	; 130
    1878:	d0 40       	sbci	r29, 0x00	; 0
    187a:	cf 57       	subi	r28, 0x7F	; 127
    187c:	df 4f       	sbci	r29, 0xFF	; 255
    187e:	48 81       	ld	r20, Y
    1880:	c1 58       	subi	r28, 0x81	; 129
    1882:	d0 40       	sbci	r29, 0x00	; 0
    1884:	81 e8       	ldi	r24, 0x81	; 129
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	8c 0f       	add	r24, r28
    188a:	9d 1f       	adc	r25, r29
    188c:	03 96       	adiw	r24, 0x03	; 3
    188e:	0e 94 89 08 	call	0x1112	; 0x1112 <mpu6050_writeMemoryBlock>

            //writing final memory update 5/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	f6 01       	movw	r30, r12
    1896:	e8 54       	subi	r30, 0x48	; 72
    1898:	fe 4f       	sbci	r31, 0xFE	; 254
    189a:	e4 91       	lpm	r30, Z
    189c:	a1 e8       	ldi	r26, 0x81	; 129
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	ac 0f       	add	r26, r28
    18a2:	bd 1f       	adc	r27, r29
    18a4:	a8 0f       	add	r26, r24
    18a6:	b1 1d       	adc	r27, r1
    18a8:	ec 93       	st	X, r30
    18aa:	8f 5f       	subi	r24, 0xFF	; 255
    18ac:	9f ef       	ldi	r25, 0xFF	; 255
    18ae:	c9 1a       	sub	r12, r25
    18b0:	d9 0a       	sbc	r13, r25
    18b2:	84 30       	cpi	r24, 0x04	; 4
    18b4:	78 f3       	brcs	.-34     	; 0x1894 <mpu6050_dmpInitialize+0x35a>
    18b6:	cd 57       	subi	r28, 0x7D	; 125
    18b8:	df 4f       	sbci	r29, 0xFF	; 255
    18ba:	68 81       	ld	r22, Y
    18bc:	c3 58       	subi	r28, 0x83	; 131
    18be:	d0 40       	sbci	r29, 0x00	; 0
    18c0:	48 2f       	mov	r20, r24
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	26 2f       	mov	r18, r22
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	2d 5f       	subi	r18, 0xFD	; 253
    18ca:	3f 4f       	sbci	r19, 0xFF	; 255
    18cc:	42 17       	cp	r20, r18
    18ce:	53 07       	cpc	r21, r19
    18d0:	0c f3       	brlt	.-62     	; 0x1894 <mpu6050_dmpInitialize+0x35a>
            mpu6050_writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1], 1, 0);
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	e1 2c       	mov	r14, r1
    18d6:	01 e0       	ldi	r16, 0x01	; 1
    18d8:	ce 57       	subi	r28, 0x7E	; 126
    18da:	df 4f       	sbci	r29, 0xFF	; 255
    18dc:	28 81       	ld	r18, Y
    18de:	c2 58       	subi	r28, 0x82	; 130
    18e0:	d0 40       	sbci	r29, 0x00	; 0
    18e2:	cf 57       	subi	r28, 0x7F	; 127
    18e4:	df 4f       	sbci	r29, 0xFF	; 255
    18e6:	48 81       	ld	r20, Y
    18e8:	c1 58       	subi	r28, 0x81	; 129
    18ea:	d0 40       	sbci	r29, 0x00	; 0
    18ec:	81 e8       	ldi	r24, 0x81	; 129
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	8c 0f       	add	r24, r28
    18f2:	9d 1f       	adc	r25, r29
    18f4:	03 96       	adiw	r24, 0x03	; 3
    18f6:	0e 94 89 08 	call	0x1112	; 0x1112 <mpu6050_writeMemoryBlock>

            //reading FIFO data..."));
            mpu6050_getFIFOBytes(fifoBuffer, fifoCount);
    18fa:	61 2f       	mov	r22, r17
    18fc:	ce 01       	movw	r24, r28
    18fe:	01 96       	adiw	r24, 0x01	; 1
    1900:	0e 94 0e 0a 	call	0x141c	; 0x141c <mpu6050_getFIFOBytes>

            //reading final memory update 6/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	f6 01       	movw	r30, r12
    1908:	e8 54       	subi	r30, 0x48	; 72
    190a:	fe 4f       	sbci	r31, 0xFE	; 254
    190c:	e4 91       	lpm	r30, Z
    190e:	a1 e8       	ldi	r26, 0x81	; 129
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	ac 0f       	add	r26, r28
    1914:	bd 1f       	adc	r27, r29
    1916:	a8 0f       	add	r26, r24
    1918:	b1 1d       	adc	r27, r1
    191a:	ec 93       	st	X, r30
    191c:	8f 5f       	subi	r24, 0xFF	; 255
    191e:	9f ef       	ldi	r25, 0xFF	; 255
    1920:	c9 1a       	sub	r12, r25
    1922:	d9 0a       	sbc	r13, r25
    1924:	84 30       	cpi	r24, 0x04	; 4
    1926:	78 f3       	brcs	.-34     	; 0x1906 <mpu6050_dmpInitialize+0x3cc>
    1928:	cd 57       	subi	r28, 0x7D	; 125
    192a:	df 4f       	sbci	r29, 0xFF	; 255
    192c:	68 81       	ld	r22, Y
    192e:	c3 58       	subi	r28, 0x83	; 131
    1930:	d0 40       	sbci	r29, 0x00	; 0
    1932:	48 2f       	mov	r20, r24
    1934:	50 e0       	ldi	r21, 0x00	; 0
    1936:	26 2f       	mov	r18, r22
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	2d 5f       	subi	r18, 0xFD	; 253
    193c:	3f 4f       	sbci	r19, 0xFF	; 255
    193e:	42 17       	cp	r20, r18
    1940:	53 07       	cpc	r21, r19
    1942:	0c f3       	brlt	.-62     	; 0x1906 <mpu6050_dmpInitialize+0x3cc>
            mpu6050_readMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	ce 57       	subi	r28, 0x7E	; 126
    1948:	df 4f       	sbci	r29, 0xFF	; 255
    194a:	28 81       	ld	r18, Y
    194c:	c2 58       	subi	r28, 0x82	; 130
    194e:	d0 40       	sbci	r29, 0x00	; 0
    1950:	cf 57       	subi	r28, 0x7F	; 127
    1952:	df 4f       	sbci	r29, 0xFF	; 255
    1954:	48 81       	ld	r20, Y
    1956:	c1 58       	subi	r28, 0x81	; 129
    1958:	d0 40       	sbci	r29, 0x00	; 0
    195a:	81 e8       	ldi	r24, 0x81	; 129
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	8c 0f       	add	r24, r28
    1960:	9d 1f       	adc	r25, r29
    1962:	03 96       	adiw	r24, 0x03	; 3
    1964:	0e 94 2e 08 	call	0x105c	; 0x105c <mpu6050_readMemoryBlock>

            //waiting for FIFO count > 2
            while ((fifoCount = mpu6050_getFIFOCount()) < 3);
    1968:	0e 94 01 0a 	call	0x1402	; 0x1402 <mpu6050_getFIFOCount>
    196c:	83 30       	cpi	r24, 0x03	; 3
    196e:	e0 f3       	brcs	.-8      	; 0x1968 <mpu6050_dmpInitialize+0x42e>

            //reading FIFO data
            mpu6050_getFIFOBytes(fifoBuffer, fifoCount);
    1970:	68 2f       	mov	r22, r24
    1972:	ce 01       	movw	r24, r28
    1974:	01 96       	adiw	r24, 0x01	; 1
    1976:	0e 94 0e 0a 	call	0x141c	; 0x141c <mpu6050_getFIFOBytes>
    197a:	f6 01       	movw	r30, r12
    197c:	e8 54       	subi	r30, 0x48	; 72
    197e:	fe 4f       	sbci	r31, 0xFE	; 254

            //writing final memory update 7/7 (function unknown)
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&mpu6050_dmpUpdates[pos]);
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	01 c0       	rjmp	.+2      	; 0x1986 <mpu6050_dmpInitialize+0x44c>
    1984:	31 96       	adiw	r30, 0x01	; 1
    1986:	94 91       	lpm	r25, Z
    1988:	a1 e8       	ldi	r26, 0x81	; 129
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	ac 0f       	add	r26, r28
    198e:	bd 1f       	adc	r27, r29
    1990:	a8 0f       	add	r26, r24
    1992:	b1 1d       	adc	r27, r1
    1994:	9c 93       	st	X, r25
    1996:	8f 5f       	subi	r24, 0xFF	; 255
    1998:	84 30       	cpi	r24, 0x04	; 4
    199a:	a0 f3       	brcs	.-24     	; 0x1984 <mpu6050_dmpInitialize+0x44a>
    199c:	cd 57       	subi	r28, 0x7D	; 125
    199e:	df 4f       	sbci	r29, 0xFF	; 255
    19a0:	68 81       	ld	r22, Y
    19a2:	c3 58       	subi	r28, 0x83	; 131
    19a4:	d0 40       	sbci	r29, 0x00	; 0
    19a6:	48 2f       	mov	r20, r24
    19a8:	50 e0       	ldi	r21, 0x00	; 0
    19aa:	26 2f       	mov	r18, r22
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	2d 5f       	subi	r18, 0xFD	; 253
    19b0:	3f 4f       	sbci	r19, 0xFF	; 255
    19b2:	42 17       	cp	r20, r18
    19b4:	53 07       	cpc	r21, r19
    19b6:	34 f3       	brlt	.-52     	; 0x1984 <mpu6050_dmpInitialize+0x44a>
            mpu6050_writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1], 1, 0);
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	e1 2c       	mov	r14, r1
    19bc:	01 e0       	ldi	r16, 0x01	; 1
    19be:	ce 57       	subi	r28, 0x7E	; 126
    19c0:	df 4f       	sbci	r29, 0xFF	; 255
    19c2:	28 81       	ld	r18, Y
    19c4:	c2 58       	subi	r28, 0x82	; 130
    19c6:	d0 40       	sbci	r29, 0x00	; 0
    19c8:	cf 57       	subi	r28, 0x7F	; 127
    19ca:	df 4f       	sbci	r29, 0xFF	; 255
    19cc:	48 81       	ld	r20, Y
    19ce:	c1 58       	subi	r28, 0x81	; 129
    19d0:	d0 40       	sbci	r29, 0x00	; 0
    19d2:	81 e8       	ldi	r24, 0x81	; 129
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	8c 0f       	add	r24, r28
    19d8:	9d 1f       	adc	r25, r29
    19da:	03 96       	adiw	r24, 0x03	; 3
    19dc:	0e 94 89 08 	call	0x1112	; 0x1112 <mpu6050_writeMemoryBlock>

            //disabling DMP (you turn it on later)
            mpu6050_dmpDisable();
    19e0:	0e 94 94 0a 	call	0x1528	; 0x1528 <mpu6050_dmpDisable>

            //resetting FIFO and clearing INT status one last time
            mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, 1);
    19e4:	41 e0       	ldi	r20, 0x01	; 1
    19e6:	62 e0       	ldi	r22, 0x02	; 2
    19e8:	8a e6       	ldi	r24, 0x6A	; 106
    19ea:	0e 94 b5 07 	call	0xf6a	; 0xf6a <mpu6050_writeBit>
            return 2; // configuration block loading failed
        }
    } else {
        return 1; // main binary block loading failed
    }
    return 0; // success
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	03 c0       	rjmp	.+6      	; 0x19f8 <mpu6050_dmpInitialize+0x4be>
            mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, 1);
        } else {
            return 2; // configuration block loading failed
        }
    } else {
        return 1; // main binary block loading failed
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	01 c0       	rjmp	.+2      	; 0x19f8 <mpu6050_dmpInitialize+0x4be>
            mpu6050_dmpDisable();

            //resetting FIFO and clearing INT status one last time
            mpu6050_writeBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, 1);
        } else {
            return 2; // configuration block loading failed
    19f6:	82 e0       	ldi	r24, 0x02	; 2
        }
    } else {
        return 1; // main binary block loading failed
    }
    return 0; // success
}
    19f8:	c0 57       	subi	r28, 0x70	; 112
    19fa:	df 4f       	sbci	r29, 0xFF	; 255
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	1f 91       	pop	r17
    1a0c:	0f 91       	pop	r16
    1a0e:	ef 90       	pop	r14
    1a10:	df 90       	pop	r13
    1a12:	cf 90       	pop	r12
    1a14:	08 95       	ret

00001a16 <mpu6050_getQuaternion>:
}

/*
 * get quaternion from packet
 */
void mpu6050_getQuaternion(const uint8_t* packet, double *qw, double *qx, double *qy, double *qz) {
    1a16:	af 92       	push	r10
    1a18:	bf 92       	push	r11
    1a1a:	cf 92       	push	r12
    1a1c:	df 92       	push	r13
    1a1e:	ef 92       	push	r14
    1a20:	ff 92       	push	r15
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	ec 01       	movw	r28, r24
    1a2c:	5b 01       	movw	r10, r22
    1a2e:	6a 01       	movw	r12, r20
    1a30:	79 01       	movw	r14, r18
	if (packet == 0) packet = dmpPacketBuffer;
    1a32:	89 2b       	or	r24, r25
    1a34:	21 f4       	brne	.+8      	; 0x1a3e <mpu6050_getQuaternion+0x28>
    1a36:	c0 91 05 01 	lds	r28, 0x0105	; 0x800105 <dmpPacketBuffer>
    1a3a:	d0 91 06 01 	lds	r29, 0x0106	; 0x800106 <dmpPacketBuffer+0x1>
    *qw = (double)((packet[0] << 8) + packet[1]) / 16384.0f;
    1a3e:	68 81       	ld	r22, Y
    1a40:	70 e0       	ldi	r23, 0x00	; 0
    1a42:	76 2f       	mov	r23, r22
    1a44:	66 27       	eor	r22, r22
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	68 0f       	add	r22, r24
    1a4a:	71 1d       	adc	r23, r1
    1a4c:	07 2e       	mov	r0, r23
    1a4e:	00 0c       	add	r0, r0
    1a50:	88 0b       	sbc	r24, r24
    1a52:	99 0b       	sbc	r25, r25
    1a54:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__floatsisf>
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e8       	ldi	r20, 0x80	; 128
    1a5e:	58 e3       	ldi	r21, 0x38	; 56
    1a60:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsf3>
    1a64:	f5 01       	movw	r30, r10
    1a66:	60 83       	st	Z, r22
    1a68:	71 83       	std	Z+1, r23	; 0x01
    1a6a:	82 83       	std	Z+2, r24	; 0x02
    1a6c:	93 83       	std	Z+3, r25	; 0x03
    *qx = (double)((packet[4] << 8) + packet[5]) / 16384.0f;
    1a6e:	6c 81       	ldd	r22, Y+4	; 0x04
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	76 2f       	mov	r23, r22
    1a74:	66 27       	eor	r22, r22
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	68 0f       	add	r22, r24
    1a7a:	71 1d       	adc	r23, r1
    1a7c:	07 2e       	mov	r0, r23
    1a7e:	00 0c       	add	r0, r0
    1a80:	88 0b       	sbc	r24, r24
    1a82:	99 0b       	sbc	r25, r25
    1a84:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__floatsisf>
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e8       	ldi	r20, 0x80	; 128
    1a8e:	58 e3       	ldi	r21, 0x38	; 56
    1a90:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsf3>
    1a94:	f6 01       	movw	r30, r12
    1a96:	60 83       	st	Z, r22
    1a98:	71 83       	std	Z+1, r23	; 0x01
    1a9a:	82 83       	std	Z+2, r24	; 0x02
    1a9c:	93 83       	std	Z+3, r25	; 0x03
    *qy = (double)((packet[8] << 8) + packet[9]) / 16384.0f;
    1a9e:	68 85       	ldd	r22, Y+8	; 0x08
    1aa0:	70 e0       	ldi	r23, 0x00	; 0
    1aa2:	76 2f       	mov	r23, r22
    1aa4:	66 27       	eor	r22, r22
    1aa6:	89 85       	ldd	r24, Y+9	; 0x09
    1aa8:	68 0f       	add	r22, r24
    1aaa:	71 1d       	adc	r23, r1
    1aac:	07 2e       	mov	r0, r23
    1aae:	00 0c       	add	r0, r0
    1ab0:	88 0b       	sbc	r24, r24
    1ab2:	99 0b       	sbc	r25, r25
    1ab4:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__floatsisf>
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e8       	ldi	r20, 0x80	; 128
    1abe:	58 e3       	ldi	r21, 0x38	; 56
    1ac0:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsf3>
    1ac4:	f7 01       	movw	r30, r14
    1ac6:	60 83       	st	Z, r22
    1ac8:	71 83       	std	Z+1, r23	; 0x01
    1aca:	82 83       	std	Z+2, r24	; 0x02
    1acc:	93 83       	std	Z+3, r25	; 0x03
    *qz = (double)((packet[12] << 8) + packet[13]) / 16384.0f;
    1ace:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	76 2f       	mov	r23, r22
    1ad4:	66 27       	eor	r22, r22
    1ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad8:	68 0f       	add	r22, r24
    1ada:	71 1d       	adc	r23, r1
    1adc:	07 2e       	mov	r0, r23
    1ade:	00 0c       	add	r0, r0
    1ae0:	88 0b       	sbc	r24, r24
    1ae2:	99 0b       	sbc	r25, r25
    1ae4:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__floatsisf>
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e8       	ldi	r20, 0x80	; 128
    1aee:	58 e3       	ldi	r21, 0x38	; 56
    1af0:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsf3>
    1af4:	f8 01       	movw	r30, r16
    1af6:	60 83       	st	Z, r22
    1af8:	71 83       	std	Z+1, r23	; 0x01
    1afa:	82 83       	std	Z+2, r24	; 0x02
    1afc:	93 83       	std	Z+3, r25	; 0x03
    
//    *qw = (double)((packet[28] << 8) + packet[29]) / 16384.0f;
//    *qx = (double)((packet[32] << 8) + packet[33]) / 16384.0f;
//    *qy = (double)((packet[36] << 8) + packet[37]) / 16384.0f;
}
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
    1b06:	ff 90       	pop	r15
    1b08:	ef 90       	pop	r14
    1b0a:	df 90       	pop	r13
    1b0c:	cf 90       	pop	r12
    1b0e:	bf 90       	pop	r11
    1b10:	af 90       	pop	r10
    1b12:	08 95       	ret

00001b14 <mpu6050_getRollPitchYaw>:
 * aerospace sequence, to obtain sensor attitude:
 * 1. rotate around sensor Z plane by yaw
 * 2. rotate around sensor Y plane by pitch
 * 3. rotate around sensor X plane by roll
 */
void mpu6050_getRollPitchYaw(double qw, double qx, double qy, double qz, double *roll, double *pitch, double *yaw) {
    1b14:	4f 92       	push	r4
    1b16:	5f 92       	push	r5
    1b18:	6f 92       	push	r6
    1b1a:	7f 92       	push	r7
    1b1c:	8f 92       	push	r8
    1b1e:	9f 92       	push	r9
    1b20:	af 92       	push	r10
    1b22:	bf 92       	push	r11
    1b24:	cf 92       	push	r12
    1b26:	df 92       	push	r13
    1b28:	ef 92       	push	r14
    1b2a:	ff 92       	push	r15
    1b2c:	0f 93       	push	r16
    1b2e:	1f 93       	push	r17
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	68 97       	sbiw	r28, 0x18	; 24
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	2b 01       	movw	r4, r22
    1b46:	3c 01       	movw	r6, r24
    1b48:	29 83       	std	Y+1, r18	; 0x01
    1b4a:	3a 83       	std	Y+2, r19	; 0x02
    1b4c:	4b 83       	std	Y+3, r20	; 0x03
    1b4e:	5c 83       	std	Y+4, r21	; 0x04
    1b50:	ed 82       	std	Y+5, r14	; 0x05
    1b52:	fe 82       	std	Y+6, r15	; 0x06
    1b54:	0f 83       	std	Y+7, r16	; 0x07
    1b56:	18 87       	std	Y+8, r17	; 0x08
	*yaw = atan2(2*qx*qy - 2*qw*qz, 2*qw*qw + 2*qx*qx - 1);
    1b58:	9b 01       	movw	r18, r22
    1b5a:	ac 01       	movw	r20, r24
    1b5c:	0e 94 01 10 	call	0x2002	; 0x2002 <__addsf3>
    1b60:	69 87       	std	Y+9, r22	; 0x09
    1b62:	7a 87       	std	Y+10, r23	; 0x0a
    1b64:	8b 87       	std	Y+11, r24	; 0x0b
    1b66:	9c 87       	std	Y+12, r25	; 0x0c
    1b68:	9b 01       	movw	r18, r22
    1b6a:	ac 01       	movw	r20, r24
    1b6c:	c3 01       	movw	r24, r6
    1b6e:	b2 01       	movw	r22, r4
    1b70:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsf3>
    1b74:	6d 87       	std	Y+13, r22	; 0x0d
    1b76:	7e 87       	std	Y+14, r23	; 0x0e
    1b78:	8f 87       	std	Y+15, r24	; 0x0f
    1b7a:	98 8b       	std	Y+16, r25	; 0x10
    1b7c:	29 81       	ldd	r18, Y+1	; 0x01
    1b7e:	3a 81       	ldd	r19, Y+2	; 0x02
    1b80:	4b 81       	ldd	r20, Y+3	; 0x03
    1b82:	5c 81       	ldd	r21, Y+4	; 0x04
    1b84:	ca 01       	movw	r24, r20
    1b86:	b9 01       	movw	r22, r18
    1b88:	0e 94 01 10 	call	0x2002	; 0x2002 <__addsf3>
    1b8c:	2b 01       	movw	r4, r22
    1b8e:	3c 01       	movw	r6, r24
    1b90:	9b 01       	movw	r18, r22
    1b92:	ac 01       	movw	r20, r24
    1b94:	69 81       	ldd	r22, Y+1	; 0x01
    1b96:	7a 81       	ldd	r23, Y+2	; 0x02
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9c:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsf3>
    1ba0:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ba2:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ba4:	4f 85       	ldd	r20, Y+15	; 0x0f
    1ba6:	58 89       	ldd	r21, Y+16	; 0x10
    1ba8:	0e 94 01 10 	call	0x2002	; 0x2002 <__addsf3>
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e8       	ldi	r20, 0x80	; 128
    1bb2:	5f e3       	ldi	r21, 0x3F	; 63
    1bb4:	0e 94 00 10 	call	0x2000	; 0x2000 <__subsf3>
    1bb8:	69 8b       	std	Y+17, r22	; 0x11
    1bba:	7a 8b       	std	Y+18, r23	; 0x12
    1bbc:	8b 8b       	std	Y+19, r24	; 0x13
    1bbe:	9c 8b       	std	Y+20, r25	; 0x14
    1bc0:	a8 01       	movw	r20, r16
    1bc2:	97 01       	movw	r18, r14
    1bc4:	c3 01       	movw	r24, r6
    1bc6:	b2 01       	movw	r22, r4
    1bc8:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsf3>
    1bcc:	6d 8b       	std	Y+21, r22	; 0x15
    1bce:	7e 8b       	std	Y+22, r23	; 0x16
    1bd0:	8f 8b       	std	Y+23, r24	; 0x17
    1bd2:	98 8f       	std	Y+24, r25	; 0x18
    1bd4:	a6 01       	movw	r20, r12
    1bd6:	95 01       	movw	r18, r10
    1bd8:	69 85       	ldd	r22, Y+9	; 0x09
    1bda:	7a 85       	ldd	r23, Y+10	; 0x0a
    1bdc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bde:	9c 85       	ldd	r25, Y+12	; 0x0c
    1be0:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsf3>
    1be4:	9b 01       	movw	r18, r22
    1be6:	ac 01       	movw	r20, r24
    1be8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bea:	7e 89       	ldd	r23, Y+22	; 0x16
    1bec:	8f 89       	ldd	r24, Y+23	; 0x17
    1bee:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf0:	0e 94 00 10 	call	0x2000	; 0x2000 <__subsf3>
    1bf4:	29 89       	ldd	r18, Y+17	; 0x11
    1bf6:	3a 89       	ldd	r19, Y+18	; 0x12
    1bf8:	4b 89       	ldd	r20, Y+19	; 0x13
    1bfa:	5c 89       	ldd	r21, Y+20	; 0x14
    1bfc:	0e 94 9b 10 	call	0x2136	; 0x2136 <atan2>
    1c00:	ed a5       	ldd	r30, Y+45	; 0x2d
    1c02:	fe a5       	ldd	r31, Y+46	; 0x2e
    1c04:	60 83       	st	Z, r22
    1c06:	71 83       	std	Z+1, r23	; 0x01
    1c08:	82 83       	std	Z+2, r24	; 0x02
    1c0a:	93 83       	std	Z+3, r25	; 0x03
	*pitch = -asin(2*qx*qz + 2*qw*qy);
    1c0c:	a6 01       	movw	r20, r12
    1c0e:	95 01       	movw	r18, r10
    1c10:	c3 01       	movw	r24, r6
    1c12:	b2 01       	movw	r22, r4
    1c14:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsf3>
    1c18:	2b 01       	movw	r4, r22
    1c1a:	3c 01       	movw	r6, r24
    1c1c:	a8 01       	movw	r20, r16
    1c1e:	97 01       	movw	r18, r14
    1c20:	69 85       	ldd	r22, Y+9	; 0x09
    1c22:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c24:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c26:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c28:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsf3>
    1c2c:	9b 01       	movw	r18, r22
    1c2e:	ac 01       	movw	r20, r24
    1c30:	c3 01       	movw	r24, r6
    1c32:	b2 01       	movw	r22, r4
    1c34:	0e 94 01 10 	call	0x2002	; 0x2002 <__addsf3>
    1c38:	0e 94 6d 10 	call	0x20da	; 0x20da <asin>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	b0 58       	subi	r27, 0x80	; 128
    1c42:	eb a5       	ldd	r30, Y+43	; 0x2b
    1c44:	fc a5       	ldd	r31, Y+44	; 0x2c
    1c46:	80 83       	st	Z, r24
    1c48:	91 83       	std	Z+1, r25	; 0x01
    1c4a:	a2 83       	std	Z+2, r26	; 0x02
    1c4c:	b3 83       	std	Z+3, r27	; 0x03
	*roll = atan2(2*qy*qz - 2*qw*qx, 2*qw*qw + 2*qz*qz - 1);
    1c4e:	a6 01       	movw	r20, r12
    1c50:	95 01       	movw	r18, r10
    1c52:	c6 01       	movw	r24, r12
    1c54:	b5 01       	movw	r22, r10
    1c56:	0e 94 01 10 	call	0x2002	; 0x2002 <__addsf3>
    1c5a:	a6 01       	movw	r20, r12
    1c5c:	95 01       	movw	r18, r10
    1c5e:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsf3>
    1c62:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c64:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c66:	4f 85       	ldd	r20, Y+15	; 0x0f
    1c68:	58 89       	ldd	r21, Y+16	; 0x10
    1c6a:	0e 94 01 10 	call	0x2002	; 0x2002 <__addsf3>
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e8       	ldi	r20, 0x80	; 128
    1c74:	5f e3       	ldi	r21, 0x3F	; 63
    1c76:	0e 94 00 10 	call	0x2000	; 0x2000 <__subsf3>
    1c7a:	2b 01       	movw	r4, r22
    1c7c:	3c 01       	movw	r6, r24
    1c7e:	a8 01       	movw	r20, r16
    1c80:	97 01       	movw	r18, r14
    1c82:	c8 01       	movw	r24, r16
    1c84:	b7 01       	movw	r22, r14
    1c86:	0e 94 01 10 	call	0x2002	; 0x2002 <__addsf3>
    1c8a:	a6 01       	movw	r20, r12
    1c8c:	95 01       	movw	r18, r10
    1c8e:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsf3>
    1c92:	6b 01       	movw	r12, r22
    1c94:	7c 01       	movw	r14, r24
    1c96:	29 81       	ldd	r18, Y+1	; 0x01
    1c98:	3a 81       	ldd	r19, Y+2	; 0x02
    1c9a:	4b 81       	ldd	r20, Y+3	; 0x03
    1c9c:	5c 81       	ldd	r21, Y+4	; 0x04
    1c9e:	69 85       	ldd	r22, Y+9	; 0x09
    1ca0:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ca2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ca4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ca6:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsf3>
    1caa:	9b 01       	movw	r18, r22
    1cac:	ac 01       	movw	r20, r24
    1cae:	c7 01       	movw	r24, r14
    1cb0:	b6 01       	movw	r22, r12
    1cb2:	0e 94 00 10 	call	0x2000	; 0x2000 <__subsf3>
    1cb6:	a3 01       	movw	r20, r6
    1cb8:	92 01       	movw	r18, r4
    1cba:	0e 94 9b 10 	call	0x2136	; 0x2136 <atan2>
    1cbe:	f4 01       	movw	r30, r8
    1cc0:	60 83       	st	Z, r22
    1cc2:	71 83       	std	Z+1, r23	; 0x01
    1cc4:	82 83       	std	Z+2, r24	; 0x02
    1cc6:	93 83       	std	Z+3, r25	; 0x03
}
    1cc8:	68 96       	adiw	r28, 0x18	; 24
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	de bf       	out	0x3e, r29	; 62
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	ff 90       	pop	r15
    1cde:	ef 90       	pop	r14
    1ce0:	df 90       	pop	r13
    1ce2:	cf 90       	pop	r12
    1ce4:	bf 90       	pop	r11
    1ce6:	af 90       	pop	r10
    1ce8:	9f 90       	pop	r9
    1cea:	8f 90       	pop	r8
    1cec:	7f 90       	pop	r7
    1cee:	6f 90       	pop	r6
    1cf0:	5f 90       	pop	r5
    1cf2:	4f 90       	pop	r4
    1cf4:	08 95       	ret

00001cf6 <mpu6050_getQuaternionWait>:

/*
 * get quaternion and wait
 */
uint8_t mpu6050_getQuaternionWait(double *qw, double *qx, double *qy, double *qz) {
    1cf6:	cf 92       	push	r12
    1cf8:	df 92       	push	r13
    1cfa:	ef 92       	push	r14
    1cfc:	ff 92       	push	r15
    1cfe:	0f 93       	push	r16
    1d00:	1f 93       	push	r17
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	ec 01       	movw	r28, r24
    1d08:	7b 01       	movw	r14, r22
    1d0a:	6a 01       	movw	r12, r20
    1d0c:	89 01       	movw	r16, r18
	while (!mpu6050_mpuInterrupt && mpu6050_fifoCount < MPU6050_DMP_dmpPacketSize);
    1d0e:	20 91 ab 00 	lds	r18, 0x00AB	; 0x8000ab <mpu6050_fifoCount>
    1d12:	30 91 ac 00 	lds	r19, 0x00AC	; 0x8000ac <mpu6050_fifoCount+0x1>
    1d16:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <mpu6050_mpuInterrupt>
    1d1a:	81 11       	cpse	r24, r1
    1d1c:	03 c0       	rjmp	.+6      	; 0x1d24 <mpu6050_getQuaternionWait+0x2e>
    1d1e:	2a 32       	cpi	r18, 0x2A	; 42
    1d20:	31 05       	cpc	r19, r1
    1d22:	c8 f3       	brcs	.-14     	; 0x1d16 <mpu6050_getQuaternionWait+0x20>
	//reset interrupt
	mpu6050_mpuInterrupt = 0;
    1d24:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <mpu6050_mpuInterrupt>

	//check for overflow
	mpu6050_mpuIntStatus = mpu6050_getIntStatus();
    1d28:	0e 94 13 0a 	call	0x1426	; 0x1426 <mpu6050_getIntStatus>
    1d2c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__data_end>
	mpu6050_fifoCount = mpu6050_getFIFOCount();
    1d30:	0e 94 01 0a 	call	0x1402	; 0x1402 <mpu6050_getFIFOCount>
    1d34:	9c 01       	movw	r18, r24
    1d36:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <mpu6050_fifoCount+0x1>
    1d3a:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <mpu6050_fifoCount>
	if ((mpu6050_mpuIntStatus & 0x10) || mpu6050_fifoCount == 1024) {
    1d3e:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__data_end>
    1d42:	94 fd       	sbrc	r25, 4
    1d44:	04 c0       	rjmp	.+8      	; 0x1d4e <mpu6050_getQuaternionWait+0x58>
    1d46:	21 15       	cp	r18, r1
    1d48:	84 e0       	ldi	r24, 0x04	; 4
    1d4a:	38 07       	cpc	r19, r24
    1d4c:	21 f4       	brne	.+8      	; 0x1d56 <mpu6050_getQuaternionWait+0x60>
		//reset
		mpu6050_resetFIFO();
    1d4e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <mpu6050_resetFIFO>
		//get quaternion
		mpu6050_getQuaternion(mpu6050_fifoBuffer, qw, qx, qy, qz);
		return 1;
	}

	return 0;
    1d52:	80 e0       	ldi	r24, 0x00	; 0
	//check for overflow
	mpu6050_mpuIntStatus = mpu6050_getIntStatus();
	mpu6050_fifoCount = mpu6050_getFIFOCount();
	if ((mpu6050_mpuIntStatus & 0x10) || mpu6050_fifoCount == 1024) {
		//reset
		mpu6050_resetFIFO();
    1d54:	25 c0       	rjmp	.+74     	; 0x1da0 <mpu6050_getQuaternionWait+0xaa>
	} else if (mpu6050_mpuIntStatus & 0x02) {
    1d56:	89 2f       	mov	r24, r25
    1d58:	82 70       	andi	r24, 0x02	; 2
    1d5a:	91 ff       	sbrs	r25, 1
    1d5c:	21 c0       	rjmp	.+66     	; 0x1da0 <mpu6050_getQuaternionWait+0xaa>
		//wait for correct available data length, should be a VERY short wait
		while (mpu6050_fifoCount < MPU6050_DMP_dmpPacketSize)
    1d5e:	2a 32       	cpi	r18, 0x2A	; 42
    1d60:	31 05       	cpc	r19, r1
    1d62:	40 f4       	brcc	.+16     	; 0x1d74 <mpu6050_getQuaternionWait+0x7e>
			mpu6050_fifoCount = mpu6050_getFIFOCount();
    1d64:	0e 94 01 0a 	call	0x1402	; 0x1402 <mpu6050_getFIFOCount>
    1d68:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <mpu6050_fifoCount+0x1>
    1d6c:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <mpu6050_fifoCount>
	if ((mpu6050_mpuIntStatus & 0x10) || mpu6050_fifoCount == 1024) {
		//reset
		mpu6050_resetFIFO();
	} else if (mpu6050_mpuIntStatus & 0x02) {
		//wait for correct available data length, should be a VERY short wait
		while (mpu6050_fifoCount < MPU6050_DMP_dmpPacketSize)
    1d70:	8a 97       	sbiw	r24, 0x2a	; 42
    1d72:	c0 f3       	brcs	.-16     	; 0x1d64 <mpu6050_getQuaternionWait+0x6e>
			mpu6050_fifoCount = mpu6050_getFIFOCount();
		//read a packet from FIFO
		mpu6050_getFIFOBytes(mpu6050_fifoBuffer, MPU6050_DMP_dmpPacketSize);
    1d74:	6a e2       	ldi	r22, 0x2A	; 42
    1d76:	87 e0       	ldi	r24, 0x07	; 7
    1d78:	91 e0       	ldi	r25, 0x01	; 1
    1d7a:	0e 94 0e 0a 	call	0x141c	; 0x141c <mpu6050_getFIFOBytes>
		mpu6050_fifoCount -= MPU6050_DMP_dmpPacketSize;
    1d7e:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <mpu6050_fifoCount>
    1d82:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <mpu6050_fifoCount+0x1>
    1d86:	8a 97       	sbiw	r24, 0x2a	; 42
    1d88:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <mpu6050_fifoCount+0x1>
    1d8c:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <mpu6050_fifoCount>
		//get quaternion
		mpu6050_getQuaternion(mpu6050_fifoBuffer, qw, qx, qy, qz);
    1d90:	96 01       	movw	r18, r12
    1d92:	a7 01       	movw	r20, r14
    1d94:	be 01       	movw	r22, r28
    1d96:	87 e0       	ldi	r24, 0x07	; 7
    1d98:	91 e0       	ldi	r25, 0x01	; 1
    1d9a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <mpu6050_getQuaternion>
		return 1;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
	}

	return 0;
}
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	ff 90       	pop	r15
    1daa:	ef 90       	pop	r14
    1dac:	df 90       	pop	r13
    1dae:	cf 90       	pop	r12
    1db0:	08 95       	ret

00001db2 <__vector_1>:

/*
 * on interrupt set data availabe
 */
ISR (INT0_vect) {
    1db2:	1f 92       	push	r1
    1db4:	0f 92       	push	r0
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	0f 92       	push	r0
    1dba:	11 24       	eor	r1, r1
    1dbc:	8f 93       	push	r24
	mpu6050_mpuInterrupt = 1;
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <mpu6050_mpuInterrupt>
}
    1dc4:	8f 91       	pop	r24
    1dc6:	0f 90       	pop	r0
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	0f 90       	pop	r0
    1dcc:	1f 90       	pop	r1
    1dce:	18 95       	reti

00001dd0 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1dd0:	11 b8       	out	0x01, r1	; 1
    1dd2:	8c e0       	ldi	r24, 0x0C	; 12
    1dd4:	80 b9       	out	0x00, r24	; 0
    1dd6:	08 95       	ret

00001dd8 <i2c_start>:
    1dd8:	94 ea       	ldi	r25, 0xA4	; 164
    1dda:	96 bf       	out	0x36, r25	; 54
    1ddc:	4f ef       	ldi	r20, 0xFF	; 255
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	06 b6       	in	r0, 0x36	; 54
    1de6:	07 fc       	sbrc	r0, 7
    1de8:	06 c0       	rjmp	.+12     	; 0x1df6 <i2c_start+0x1e>
    1dea:	41 50       	subi	r20, 0x01	; 1
    1dec:	51 09       	sbc	r21, r1
    1dee:	61 09       	sbc	r22, r1
    1df0:	71 09       	sbc	r23, r1
    1df2:	c0 f7       	brcc	.-16     	; 0x1de4 <i2c_start+0xc>
    1df4:	04 c0       	rjmp	.+8      	; 0x1dfe <i2c_start+0x26>
    1df6:	45 2b       	or	r20, r21
    1df8:	46 2b       	or	r20, r22
    1dfa:	47 2b       	or	r20, r23
    1dfc:	11 f1       	breq	.+68     	; 0x1e42 <i2c_start+0x6a>
    1dfe:	91 b1       	in	r25, 0x01	; 1
    1e00:	98 7f       	andi	r25, 0xF8	; 248
    1e02:	98 30       	cpi	r25, 0x08	; 8
    1e04:	11 f0       	breq	.+4      	; 0x1e0a <i2c_start+0x32>
    1e06:	90 31       	cpi	r25, 0x10	; 16
    1e08:	f1 f4       	brne	.+60     	; 0x1e46 <i2c_start+0x6e>
    1e0a:	83 b9       	out	0x03, r24	; 3
    1e0c:	84 e8       	ldi	r24, 0x84	; 132
    1e0e:	86 bf       	out	0x36, r24	; 54
    1e10:	8f ef       	ldi	r24, 0xFF	; 255
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	a0 e0       	ldi	r26, 0x00	; 0
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	06 b6       	in	r0, 0x36	; 54
    1e1a:	07 fc       	sbrc	r0, 7
    1e1c:	05 c0       	rjmp	.+10     	; 0x1e28 <i2c_start+0x50>
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	a1 09       	sbc	r26, r1
    1e22:	b1 09       	sbc	r27, r1
    1e24:	c8 f7       	brcc	.-14     	; 0x1e18 <i2c_start+0x40>
    1e26:	04 c0       	rjmp	.+8      	; 0x1e30 <i2c_start+0x58>
    1e28:	89 2b       	or	r24, r25
    1e2a:	8a 2b       	or	r24, r26
    1e2c:	8b 2b       	or	r24, r27
    1e2e:	69 f0       	breq	.+26     	; 0x1e4a <i2c_start+0x72>
    1e30:	91 b1       	in	r25, 0x01	; 1
    1e32:	98 7f       	andi	r25, 0xF8	; 248
    1e34:	98 31       	cpi	r25, 0x18	; 24
    1e36:	59 f0       	breq	.+22     	; 0x1e4e <i2c_start+0x76>
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 34       	cpi	r25, 0x40	; 64
    1e3c:	49 f4       	brne	.+18     	; 0x1e50 <i2c_start+0x78>
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	08 95       	ret
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	08 95       	ret
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	08 95       	ret
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	08 95       	ret
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	08 95       	ret

00001e52 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1e52:	84 e9       	ldi	r24, 0x94	; 148
    1e54:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	06 b6       	in	r0, 0x36	; 54
    1e5c:	04 fe       	sbrs	r0, 4
    1e5e:	05 c0       	rjmp	.+10     	; 0x1e6a <i2c_stop+0x18>
    1e60:	01 96       	adiw	r24, 0x01	; 1
    1e62:	81 15       	cp	r24, r1
    1e64:	21 e0       	ldi	r18, 0x01	; 1
    1e66:	92 07       	cpc	r25, r18
    1e68:	c1 f7       	brne	.-16     	; 0x1e5a <i2c_stop+0x8>
    1e6a:	08 95       	ret

00001e6c <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1e6c:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e6e:	84 e8       	ldi	r24, 0x84	; 132
    1e70:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    1e72:	8f ef       	ldi	r24, 0xFF	; 255
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	a0 e0       	ldi	r26, 0x00	; 0
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1e7a:	06 b6       	in	r0, 0x36	; 54
    1e7c:	07 fc       	sbrc	r0, 7
    1e7e:	05 c0       	rjmp	.+10     	; 0x1e8a <i2c_write+0x1e>
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	a1 09       	sbc	r26, r1
    1e84:	b1 09       	sbc	r27, r1
    1e86:	c8 f7       	brcc	.-14     	; 0x1e7a <i2c_write+0xe>
    1e88:	04 c0       	rjmp	.+8      	; 0x1e92 <i2c_write+0x26>
	if(i2c_timer == 0)
    1e8a:	89 2b       	or	r24, r25
    1e8c:	8a 2b       	or	r24, r26
    1e8e:	8b 2b       	or	r24, r27
    1e90:	39 f0       	breq	.+14     	; 0x1ea0 <i2c_write+0x34>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1e92:	91 b1       	in	r25, 0x01	; 1

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    1e94:	98 7f       	andi	r25, 0xF8	; 248
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	98 32       	cpi	r25, 0x28	; 40
    1e9a:	19 f4       	brne	.+6      	; 0x1ea2 <i2c_write+0x36>
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	08 95       	ret
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    1ea2:	08 95       	ret

00001ea4 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1ea4:	84 ec       	ldi	r24, 0xC4	; 196
    1ea6:	86 bf       	out	0x36, r24	; 54
	i2c_timer = I2C_TIMER_DELAY;
    1ea8:	8f ef       	ldi	r24, 0xFF	; 255
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	a0 e0       	ldi	r26, 0x00	; 0
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1eb0:	06 b6       	in	r0, 0x36	; 54
    1eb2:	07 fc       	sbrc	r0, 7
    1eb4:	05 c0       	rjmp	.+10     	; 0x1ec0 <i2c_readAck+0x1c>
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	a1 09       	sbc	r26, r1
    1eba:	b1 09       	sbc	r27, r1
    1ebc:	c8 f7       	brcc	.-14     	; 0x1eb0 <i2c_readAck+0xc>
    1ebe:	04 c0       	rjmp	.+8      	; 0x1ec8 <i2c_readAck+0x24>
	if(i2c_timer == 0)
    1ec0:	89 2b       	or	r24, r25
    1ec2:	8a 2b       	or	r24, r26
    1ec4:	8b 2b       	or	r24, r27
    1ec6:	11 f0       	breq	.+4      	; 0x1ecc <i2c_readAck+0x28>
		return 0;

    return TWDR;
    1ec8:	83 b1       	in	r24, 0x03	; 3
    1eca:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    1ecc:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    1ece:	08 95       	ret

00001ed0 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    1ed0:	84 e8       	ldi	r24, 0x84	; 132
    1ed2:	86 bf       	out	0x36, r24	; 54
	i2c_timer = I2C_TIMER_DELAY;
    1ed4:	8f ef       	ldi	r24, 0xFF	; 255
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	a0 e0       	ldi	r26, 0x00	; 0
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1edc:	06 b6       	in	r0, 0x36	; 54
    1ede:	07 fc       	sbrc	r0, 7
    1ee0:	05 c0       	rjmp	.+10     	; 0x1eec <i2c_readNak+0x1c>
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	a1 09       	sbc	r26, r1
    1ee6:	b1 09       	sbc	r27, r1
    1ee8:	c8 f7       	brcc	.-14     	; 0x1edc <i2c_readNak+0xc>
    1eea:	04 c0       	rjmp	.+8      	; 0x1ef4 <i2c_readNak+0x24>
	if(i2c_timer == 0)
    1eec:	89 2b       	or	r24, r25
    1eee:	8a 2b       	or	r24, r26
    1ef0:	8b 2b       	or	r24, r27
    1ef2:	11 f0       	breq	.+4      	; 0x1ef8 <i2c_readNak+0x28>
		return 0;
	
    return TWDR;
    1ef4:	83 b1       	in	r24, 0x03	; 3
    1ef6:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    1efa:	08 95       	ret

00001efc <__vector_13>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
    1efc:	1f 92       	push	r1
    1efe:	0f 92       	push	r0
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	0f 92       	push	r0
    1f04:	11 24       	eor	r1, r1
    1f06:	2f 93       	push	r18
    1f08:	8f 93       	push	r24
    1f0a:	9f 93       	push	r25
    1f0c:	ef 93       	push	r30
    1f0e:	ff 93       	push	r31
    1f10:	8b b1       	in	r24, 0x0b	; 11
    1f12:	2c b1       	in	r18, 0x0c	; 12
    1f14:	88 71       	andi	r24, 0x18	; 24
    1f16:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <UART_RxHead>
    1f1a:	ef 5f       	subi	r30, 0xFF	; 255
    1f1c:	ef 71       	andi	r30, 0x1F	; 31
    1f1e:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <UART_RxTail>
    1f22:	e9 17       	cp	r30, r25
    1f24:	39 f0       	breq	.+14     	; 0x1f34 <__vector_13+0x38>
    1f26:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <UART_RxHead>
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	ed 54       	subi	r30, 0x4D	; 77
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	20 83       	st	Z, r18
    1f32:	01 c0       	rjmp	.+2      	; 0x1f36 <__vector_13+0x3a>
    1f34:	82 e0       	ldi	r24, 0x02	; 2
    1f36:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <UART_LastRxError>
    1f3a:	ff 91       	pop	r31
    1f3c:	ef 91       	pop	r30
    1f3e:	9f 91       	pop	r25
    1f40:	8f 91       	pop	r24
    1f42:	2f 91       	pop	r18
    1f44:	0f 90       	pop	r0
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	0f 90       	pop	r0
    1f4a:	1f 90       	pop	r1
    1f4c:	18 95       	reti

00001f4e <__vector_14>:
    1f4e:	1f 92       	push	r1
    1f50:	0f 92       	push	r0
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	0f 92       	push	r0
    1f56:	11 24       	eor	r1, r1
    1f58:	8f 93       	push	r24
    1f5a:	9f 93       	push	r25
    1f5c:	ef 93       	push	r30
    1f5e:	ff 93       	push	r31
    1f60:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <UART_TxHead>
    1f64:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <UART_TxTail>
    1f68:	98 17       	cp	r25, r24
    1f6a:	61 f0       	breq	.+24     	; 0x1f84 <__vector_14+0x36>
    1f6c:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <UART_TxTail>
    1f70:	ef 5f       	subi	r30, 0xFF	; 255
    1f72:	ef 71       	andi	r30, 0x1F	; 31
    1f74:	e0 93 b1 00 	sts	0x00B1, r30	; 0x8000b1 <UART_TxTail>
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	ed 52       	subi	r30, 0x2D	; 45
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	80 81       	ld	r24, Z
    1f80:	8c b9       	out	0x0c, r24	; 12
    1f82:	01 c0       	rjmp	.+2      	; 0x1f86 <__vector_14+0x38>
    1f84:	55 98       	cbi	0x0a, 5	; 10
    1f86:	ff 91       	pop	r31
    1f88:	ef 91       	pop	r30
    1f8a:	9f 91       	pop	r25
    1f8c:	8f 91       	pop	r24
    1f8e:	0f 90       	pop	r0
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	0f 90       	pop	r0
    1f94:	1f 90       	pop	r1
    1f96:	18 95       	reti

00001f98 <uart_init>:
    1f98:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <UART_TxHead>
    1f9c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <UART_TxTail>
    1fa0:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <UART_RxHead>
    1fa4:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <UART_RxTail>
    1fa8:	99 23       	and	r25, r25
    1faa:	1c f4       	brge	.+6      	; 0x1fb2 <uart_init+0x1a>
    1fac:	22 e0       	ldi	r18, 0x02	; 2
    1fae:	2b b9       	out	0x0b, r18	; 11
    1fb0:	9f 77       	andi	r25, 0x7F	; 127
    1fb2:	90 bd       	out	0x20, r25	; 32
    1fb4:	89 b9       	out	0x09, r24	; 9
    1fb6:	88 e9       	ldi	r24, 0x98	; 152
    1fb8:	8a b9       	out	0x0a, r24	; 10
    1fba:	86 e8       	ldi	r24, 0x86	; 134
    1fbc:	80 bd       	out	0x20, r24	; 32
    1fbe:	08 95       	ret

00001fc0 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1fc0:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <UART_TxHead>
    1fc4:	2f 5f       	subi	r18, 0xFF	; 255
    1fc6:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    1fc8:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <UART_TxTail>
    1fcc:	29 17       	cp	r18, r25
    1fce:	e1 f3       	breq	.-8      	; 0x1fc8 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    1fd0:	e2 2f       	mov	r30, r18
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	ed 52       	subi	r30, 0x2D	; 45
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    1fda:	20 93 b2 00 	sts	0x00B2, r18	; 0x8000b2 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    1fde:	55 9a       	sbi	0x0a, 5	; 10
    1fe0:	08 95       	ret

00001fe2 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
    1fe6:	ec 01       	movw	r28, r24
    while (*s) 
    1fe8:	88 81       	ld	r24, Y
    1fea:	88 23       	and	r24, r24
    1fec:	31 f0       	breq	.+12     	; 0x1ffa <uart_puts+0x18>
    1fee:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
    1ff0:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    1ff4:	89 91       	ld	r24, Y+
    1ff6:	81 11       	cpse	r24, r1
    1ff8:	fb cf       	rjmp	.-10     	; 0x1ff0 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	08 95       	ret

00002000 <__subsf3>:
    2000:	50 58       	subi	r21, 0x80	; 128

00002002 <__addsf3>:
    2002:	bb 27       	eor	r27, r27
    2004:	aa 27       	eor	r26, r26
    2006:	0e 94 18 10 	call	0x2030	; 0x2030 <__addsf3x>
    200a:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__fp_round>
    200e:	0e 94 36 12 	call	0x246c	; 0x246c <__fp_pscA>
    2012:	38 f0       	brcs	.+14     	; 0x2022 <__addsf3+0x20>
    2014:	0e 94 3d 12 	call	0x247a	; 0x247a <__fp_pscB>
    2018:	20 f0       	brcs	.+8      	; 0x2022 <__addsf3+0x20>
    201a:	39 f4       	brne	.+14     	; 0x202a <__addsf3+0x28>
    201c:	9f 3f       	cpi	r25, 0xFF	; 255
    201e:	19 f4       	brne	.+6      	; 0x2026 <__addsf3+0x24>
    2020:	26 f4       	brtc	.+8      	; 0x202a <__addsf3+0x28>
    2022:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__fp_nan>
    2026:	0e f4       	brtc	.+2      	; 0x202a <__addsf3+0x28>
    2028:	e0 95       	com	r30
    202a:	e7 fb       	bst	r30, 7
    202c:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__fp_inf>

00002030 <__addsf3x>:
    2030:	e9 2f       	mov	r30, r25
    2032:	0e 94 55 12 	call	0x24aa	; 0x24aa <__fp_split3>
    2036:	58 f3       	brcs	.-42     	; 0x200e <__addsf3+0xc>
    2038:	ba 17       	cp	r27, r26
    203a:	62 07       	cpc	r22, r18
    203c:	73 07       	cpc	r23, r19
    203e:	84 07       	cpc	r24, r20
    2040:	95 07       	cpc	r25, r21
    2042:	20 f0       	brcs	.+8      	; 0x204c <__addsf3x+0x1c>
    2044:	79 f4       	brne	.+30     	; 0x2064 <__addsf3x+0x34>
    2046:	a6 f5       	brtc	.+104    	; 0x20b0 <__addsf3x+0x80>
    2048:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__fp_zero>
    204c:	0e f4       	brtc	.+2      	; 0x2050 <__addsf3x+0x20>
    204e:	e0 95       	com	r30
    2050:	0b 2e       	mov	r0, r27
    2052:	ba 2f       	mov	r27, r26
    2054:	a0 2d       	mov	r26, r0
    2056:	0b 01       	movw	r0, r22
    2058:	b9 01       	movw	r22, r18
    205a:	90 01       	movw	r18, r0
    205c:	0c 01       	movw	r0, r24
    205e:	ca 01       	movw	r24, r20
    2060:	a0 01       	movw	r20, r0
    2062:	11 24       	eor	r1, r1
    2064:	ff 27       	eor	r31, r31
    2066:	59 1b       	sub	r21, r25
    2068:	99 f0       	breq	.+38     	; 0x2090 <__addsf3x+0x60>
    206a:	59 3f       	cpi	r21, 0xF9	; 249
    206c:	50 f4       	brcc	.+20     	; 0x2082 <__addsf3x+0x52>
    206e:	50 3e       	cpi	r21, 0xE0	; 224
    2070:	68 f1       	brcs	.+90     	; 0x20cc <__addsf3x+0x9c>
    2072:	1a 16       	cp	r1, r26
    2074:	f0 40       	sbci	r31, 0x00	; 0
    2076:	a2 2f       	mov	r26, r18
    2078:	23 2f       	mov	r18, r19
    207a:	34 2f       	mov	r19, r20
    207c:	44 27       	eor	r20, r20
    207e:	58 5f       	subi	r21, 0xF8	; 248
    2080:	f3 cf       	rjmp	.-26     	; 0x2068 <__addsf3x+0x38>
    2082:	46 95       	lsr	r20
    2084:	37 95       	ror	r19
    2086:	27 95       	ror	r18
    2088:	a7 95       	ror	r26
    208a:	f0 40       	sbci	r31, 0x00	; 0
    208c:	53 95       	inc	r21
    208e:	c9 f7       	brne	.-14     	; 0x2082 <__addsf3x+0x52>
    2090:	7e f4       	brtc	.+30     	; 0x20b0 <__addsf3x+0x80>
    2092:	1f 16       	cp	r1, r31
    2094:	ba 0b       	sbc	r27, r26
    2096:	62 0b       	sbc	r22, r18
    2098:	73 0b       	sbc	r23, r19
    209a:	84 0b       	sbc	r24, r20
    209c:	ba f0       	brmi	.+46     	; 0x20cc <__addsf3x+0x9c>
    209e:	91 50       	subi	r25, 0x01	; 1
    20a0:	a1 f0       	breq	.+40     	; 0x20ca <__addsf3x+0x9a>
    20a2:	ff 0f       	add	r31, r31
    20a4:	bb 1f       	adc	r27, r27
    20a6:	66 1f       	adc	r22, r22
    20a8:	77 1f       	adc	r23, r23
    20aa:	88 1f       	adc	r24, r24
    20ac:	c2 f7       	brpl	.-16     	; 0x209e <__addsf3x+0x6e>
    20ae:	0e c0       	rjmp	.+28     	; 0x20cc <__addsf3x+0x9c>
    20b0:	ba 0f       	add	r27, r26
    20b2:	62 1f       	adc	r22, r18
    20b4:	73 1f       	adc	r23, r19
    20b6:	84 1f       	adc	r24, r20
    20b8:	48 f4       	brcc	.+18     	; 0x20cc <__addsf3x+0x9c>
    20ba:	87 95       	ror	r24
    20bc:	77 95       	ror	r23
    20be:	67 95       	ror	r22
    20c0:	b7 95       	ror	r27
    20c2:	f7 95       	ror	r31
    20c4:	9e 3f       	cpi	r25, 0xFE	; 254
    20c6:	08 f0       	brcs	.+2      	; 0x20ca <__addsf3x+0x9a>
    20c8:	b0 cf       	rjmp	.-160    	; 0x202a <__addsf3+0x28>
    20ca:	93 95       	inc	r25
    20cc:	88 0f       	add	r24, r24
    20ce:	08 f0       	brcs	.+2      	; 0x20d2 <__addsf3x+0xa2>
    20d0:	99 27       	eor	r25, r25
    20d2:	ee 0f       	add	r30, r30
    20d4:	97 95       	ror	r25
    20d6:	87 95       	ror	r24
    20d8:	08 95       	ret

000020da <asin>:
    20da:	9f 93       	push	r25
    20dc:	9f 77       	andi	r25, 0x7F	; 127
    20de:	ee e3       	ldi	r30, 0x3E	; 62
    20e0:	89 37       	cpi	r24, 0x79	; 121
    20e2:	9e 07       	cpc	r25, r30
    20e4:	28 f4       	brcc	.+10     	; 0x20f0 <asin+0x16>
    20e6:	e4 e5       	ldi	r30, 0x54	; 84
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	0e 94 22 12 	call	0x2444	; 0x2444 <__fp_powsodd>
    20ee:	0c c0       	rjmp	.+24     	; 0x2108 <asin+0x2e>
    20f0:	0e 94 ae 11 	call	0x235c	; 0x235c <__fp_arccos>
    20f4:	90 58       	subi	r25, 0x80	; 128
    20f6:	a2 ea       	ldi	r26, 0xA2	; 162
    20f8:	2a ed       	ldi	r18, 0xDA	; 218
    20fa:	3f e0       	ldi	r19, 0x0F	; 15
    20fc:	49 ec       	ldi	r20, 0xC9	; 201
    20fe:	5f e3       	ldi	r21, 0x3F	; 63
    2100:	0e 94 18 10 	call	0x2030	; 0x2030 <__addsf3x>
    2104:	0e 94 44 12 	call	0x2488	; 0x2488 <__fp_round>
    2108:	0f 90       	pop	r0
    210a:	07 fc       	sbrc	r0, 7
    210c:	90 58       	subi	r25, 0x80	; 128
    210e:	08 95       	ret
    2110:	0e 94 36 12 	call	0x246c	; 0x246c <__fp_pscA>
    2114:	60 f0       	brcs	.+24     	; 0x212e <asin+0x54>
    2116:	80 e8       	ldi	r24, 0x80	; 128
    2118:	91 e0       	ldi	r25, 0x01	; 1
    211a:	09 f4       	brne	.+2      	; 0x211e <asin+0x44>
    211c:	9e ef       	ldi	r25, 0xFE	; 254
    211e:	0e 94 3d 12 	call	0x247a	; 0x247a <__fp_pscB>
    2122:	28 f0       	brcs	.+10     	; 0x212e <asin+0x54>
    2124:	40 e8       	ldi	r20, 0x80	; 128
    2126:	51 e0       	ldi	r21, 0x01	; 1
    2128:	71 f4       	brne	.+28     	; 0x2146 <atan2+0x10>
    212a:	5e ef       	ldi	r21, 0xFE	; 254
    212c:	0c c0       	rjmp	.+24     	; 0x2146 <atan2+0x10>
    212e:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__fp_nan>
    2132:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__fp_zero>

00002136 <atan2>:
    2136:	e9 2f       	mov	r30, r25
    2138:	e0 78       	andi	r30, 0x80	; 128
    213a:	0e 94 55 12 	call	0x24aa	; 0x24aa <__fp_split3>
    213e:	40 f3       	brcs	.-48     	; 0x2110 <asin+0x36>
    2140:	09 2e       	mov	r0, r25
    2142:	05 2a       	or	r0, r21
    2144:	b1 f3       	breq	.-20     	; 0x2132 <asin+0x58>
    2146:	26 17       	cp	r18, r22
    2148:	37 07       	cpc	r19, r23
    214a:	48 07       	cpc	r20, r24
    214c:	59 07       	cpc	r21, r25
    214e:	38 f0       	brcs	.+14     	; 0x215e <atan2+0x28>
    2150:	0e 2e       	mov	r0, r30
    2152:	07 f8       	bld	r0, 7
    2154:	e0 25       	eor	r30, r0
    2156:	69 f0       	breq	.+26     	; 0x2172 <atan2+0x3c>
    2158:	e0 25       	eor	r30, r0
    215a:	e0 64       	ori	r30, 0x40	; 64
    215c:	0a c0       	rjmp	.+20     	; 0x2172 <atan2+0x3c>
    215e:	ef 63       	ori	r30, 0x3F	; 63
    2160:	07 f8       	bld	r0, 7
    2162:	00 94       	com	r0
    2164:	07 fa       	bst	r0, 7
    2166:	db 01       	movw	r26, r22
    2168:	b9 01       	movw	r22, r18
    216a:	9d 01       	movw	r18, r26
    216c:	dc 01       	movw	r26, r24
    216e:	ca 01       	movw	r24, r20
    2170:	ad 01       	movw	r20, r26
    2172:	ef 93       	push	r30
    2174:	0e 94 16 11 	call	0x222c	; 0x222c <__divsf3_pse>
    2178:	0e 94 44 12 	call	0x2488	; 0x2488 <__fp_round>
    217c:	0e 94 cb 10 	call	0x2196	; 0x2196 <atan>
    2180:	5f 91       	pop	r21
    2182:	55 23       	and	r21, r21
    2184:	39 f0       	breq	.+14     	; 0x2194 <atan2+0x5e>
    2186:	2b ed       	ldi	r18, 0xDB	; 219
    2188:	3f e0       	ldi	r19, 0x0F	; 15
    218a:	49 e4       	ldi	r20, 0x49	; 73
    218c:	50 fd       	sbrc	r21, 0
    218e:	49 ec       	ldi	r20, 0xC9	; 201
    2190:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__addsf3>
    2194:	08 95       	ret

00002196 <atan>:
    2196:	df 93       	push	r29
    2198:	dd 27       	eor	r29, r29
    219a:	b9 2f       	mov	r27, r25
    219c:	bf 77       	andi	r27, 0x7F	; 127
    219e:	40 e8       	ldi	r20, 0x80	; 128
    21a0:	5f e3       	ldi	r21, 0x3F	; 63
    21a2:	16 16       	cp	r1, r22
    21a4:	17 06       	cpc	r1, r23
    21a6:	48 07       	cpc	r20, r24
    21a8:	5b 07       	cpc	r21, r27
    21aa:	18 f4       	brcc	.+6      	; 0x21b2 <atan+0x1c>
    21ac:	d9 2f       	mov	r29, r25
    21ae:	0e 94 83 12 	call	0x2506	; 0x2506 <inverse>
    21b2:	9f 93       	push	r25
    21b4:	8f 93       	push	r24
    21b6:	7f 93       	push	r23
    21b8:	6f 93       	push	r22
    21ba:	0e 94 3e 13 	call	0x267c	; 0x267c <square>
    21be:	e8 e6       	ldi	r30, 0x68	; 104
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__fp_powser>
    21c6:	0e 94 44 12 	call	0x2488	; 0x2488 <__fp_round>
    21ca:	2f 91       	pop	r18
    21cc:	3f 91       	pop	r19
    21ce:	4f 91       	pop	r20
    21d0:	5f 91       	pop	r21
    21d2:	0e 94 9e 12 	call	0x253c	; 0x253c <__mulsf3x>
    21d6:	dd 23       	and	r29, r29
    21d8:	51 f0       	breq	.+20     	; 0x21ee <atan+0x58>
    21da:	90 58       	subi	r25, 0x80	; 128
    21dc:	a2 ea       	ldi	r26, 0xA2	; 162
    21de:	2a ed       	ldi	r18, 0xDA	; 218
    21e0:	3f e0       	ldi	r19, 0x0F	; 15
    21e2:	49 ec       	ldi	r20, 0xC9	; 201
    21e4:	5f e3       	ldi	r21, 0x3F	; 63
    21e6:	d0 78       	andi	r29, 0x80	; 128
    21e8:	5d 27       	eor	r21, r29
    21ea:	0e 94 18 10 	call	0x2030	; 0x2030 <__addsf3x>
    21ee:	df 91       	pop	r29
    21f0:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__fp_round>

000021f4 <__cmpsf2>:
    21f4:	0e 94 ce 11 	call	0x239c	; 0x239c <__fp_cmp>
    21f8:	08 f4       	brcc	.+2      	; 0x21fc <__cmpsf2+0x8>
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	08 95       	ret

000021fe <__divsf3>:
    21fe:	0e 94 13 11 	call	0x2226	; 0x2226 <__divsf3x>
    2202:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__fp_round>
    2206:	0e 94 3d 12 	call	0x247a	; 0x247a <__fp_pscB>
    220a:	58 f0       	brcs	.+22     	; 0x2222 <__divsf3+0x24>
    220c:	0e 94 36 12 	call	0x246c	; 0x246c <__fp_pscA>
    2210:	40 f0       	brcs	.+16     	; 0x2222 <__divsf3+0x24>
    2212:	29 f4       	brne	.+10     	; 0x221e <__divsf3+0x20>
    2214:	5f 3f       	cpi	r21, 0xFF	; 255
    2216:	29 f0       	breq	.+10     	; 0x2222 <__divsf3+0x24>
    2218:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__fp_inf>
    221c:	51 11       	cpse	r21, r1
    221e:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__fp_szero>
    2222:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__fp_nan>

00002226 <__divsf3x>:
    2226:	0e 94 55 12 	call	0x24aa	; 0x24aa <__fp_split3>
    222a:	68 f3       	brcs	.-38     	; 0x2206 <__divsf3+0x8>

0000222c <__divsf3_pse>:
    222c:	99 23       	and	r25, r25
    222e:	b1 f3       	breq	.-20     	; 0x221c <__divsf3+0x1e>
    2230:	55 23       	and	r21, r21
    2232:	91 f3       	breq	.-28     	; 0x2218 <__divsf3+0x1a>
    2234:	95 1b       	sub	r25, r21
    2236:	55 0b       	sbc	r21, r21
    2238:	bb 27       	eor	r27, r27
    223a:	aa 27       	eor	r26, r26
    223c:	62 17       	cp	r22, r18
    223e:	73 07       	cpc	r23, r19
    2240:	84 07       	cpc	r24, r20
    2242:	38 f0       	brcs	.+14     	; 0x2252 <__divsf3_pse+0x26>
    2244:	9f 5f       	subi	r25, 0xFF	; 255
    2246:	5f 4f       	sbci	r21, 0xFF	; 255
    2248:	22 0f       	add	r18, r18
    224a:	33 1f       	adc	r19, r19
    224c:	44 1f       	adc	r20, r20
    224e:	aa 1f       	adc	r26, r26
    2250:	a9 f3       	breq	.-22     	; 0x223c <__divsf3_pse+0x10>
    2252:	35 d0       	rcall	.+106    	; 0x22be <__divsf3_pse+0x92>
    2254:	0e 2e       	mov	r0, r30
    2256:	3a f0       	brmi	.+14     	; 0x2266 <__divsf3_pse+0x3a>
    2258:	e0 e8       	ldi	r30, 0x80	; 128
    225a:	32 d0       	rcall	.+100    	; 0x22c0 <__divsf3_pse+0x94>
    225c:	91 50       	subi	r25, 0x01	; 1
    225e:	50 40       	sbci	r21, 0x00	; 0
    2260:	e6 95       	lsr	r30
    2262:	00 1c       	adc	r0, r0
    2264:	ca f7       	brpl	.-14     	; 0x2258 <__divsf3_pse+0x2c>
    2266:	2b d0       	rcall	.+86     	; 0x22be <__divsf3_pse+0x92>
    2268:	fe 2f       	mov	r31, r30
    226a:	29 d0       	rcall	.+82     	; 0x22be <__divsf3_pse+0x92>
    226c:	66 0f       	add	r22, r22
    226e:	77 1f       	adc	r23, r23
    2270:	88 1f       	adc	r24, r24
    2272:	bb 1f       	adc	r27, r27
    2274:	26 17       	cp	r18, r22
    2276:	37 07       	cpc	r19, r23
    2278:	48 07       	cpc	r20, r24
    227a:	ab 07       	cpc	r26, r27
    227c:	b0 e8       	ldi	r27, 0x80	; 128
    227e:	09 f0       	breq	.+2      	; 0x2282 <__divsf3_pse+0x56>
    2280:	bb 0b       	sbc	r27, r27
    2282:	80 2d       	mov	r24, r0
    2284:	bf 01       	movw	r22, r30
    2286:	ff 27       	eor	r31, r31
    2288:	93 58       	subi	r25, 0x83	; 131
    228a:	5f 4f       	sbci	r21, 0xFF	; 255
    228c:	3a f0       	brmi	.+14     	; 0x229c <__divsf3_pse+0x70>
    228e:	9e 3f       	cpi	r25, 0xFE	; 254
    2290:	51 05       	cpc	r21, r1
    2292:	78 f0       	brcs	.+30     	; 0x22b2 <__divsf3_pse+0x86>
    2294:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__fp_inf>
    2298:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__fp_szero>
    229c:	5f 3f       	cpi	r21, 0xFF	; 255
    229e:	e4 f3       	brlt	.-8      	; 0x2298 <__divsf3_pse+0x6c>
    22a0:	98 3e       	cpi	r25, 0xE8	; 232
    22a2:	d4 f3       	brlt	.-12     	; 0x2298 <__divsf3_pse+0x6c>
    22a4:	86 95       	lsr	r24
    22a6:	77 95       	ror	r23
    22a8:	67 95       	ror	r22
    22aa:	b7 95       	ror	r27
    22ac:	f7 95       	ror	r31
    22ae:	9f 5f       	subi	r25, 0xFF	; 255
    22b0:	c9 f7       	brne	.-14     	; 0x22a4 <__divsf3_pse+0x78>
    22b2:	88 0f       	add	r24, r24
    22b4:	91 1d       	adc	r25, r1
    22b6:	96 95       	lsr	r25
    22b8:	87 95       	ror	r24
    22ba:	97 f9       	bld	r25, 7
    22bc:	08 95       	ret
    22be:	e1 e0       	ldi	r30, 0x01	; 1
    22c0:	66 0f       	add	r22, r22
    22c2:	77 1f       	adc	r23, r23
    22c4:	88 1f       	adc	r24, r24
    22c6:	bb 1f       	adc	r27, r27
    22c8:	62 17       	cp	r22, r18
    22ca:	73 07       	cpc	r23, r19
    22cc:	84 07       	cpc	r24, r20
    22ce:	ba 07       	cpc	r27, r26
    22d0:	20 f0       	brcs	.+8      	; 0x22da <__divsf3_pse+0xae>
    22d2:	62 1b       	sub	r22, r18
    22d4:	73 0b       	sbc	r23, r19
    22d6:	84 0b       	sbc	r24, r20
    22d8:	ba 0b       	sbc	r27, r26
    22da:	ee 1f       	adc	r30, r30
    22dc:	88 f7       	brcc	.-30     	; 0x22c0 <__divsf3_pse+0x94>
    22de:	e0 95       	com	r30
    22e0:	08 95       	ret

000022e2 <__floatunsisf>:
    22e2:	e8 94       	clt
    22e4:	09 c0       	rjmp	.+18     	; 0x22f8 <__floatsisf+0x12>

000022e6 <__floatsisf>:
    22e6:	97 fb       	bst	r25, 7
    22e8:	3e f4       	brtc	.+14     	; 0x22f8 <__floatsisf+0x12>
    22ea:	90 95       	com	r25
    22ec:	80 95       	com	r24
    22ee:	70 95       	com	r23
    22f0:	61 95       	neg	r22
    22f2:	7f 4f       	sbci	r23, 0xFF	; 255
    22f4:	8f 4f       	sbci	r24, 0xFF	; 255
    22f6:	9f 4f       	sbci	r25, 0xFF	; 255
    22f8:	99 23       	and	r25, r25
    22fa:	a9 f0       	breq	.+42     	; 0x2326 <__floatsisf+0x40>
    22fc:	f9 2f       	mov	r31, r25
    22fe:	96 e9       	ldi	r25, 0x96	; 150
    2300:	bb 27       	eor	r27, r27
    2302:	93 95       	inc	r25
    2304:	f6 95       	lsr	r31
    2306:	87 95       	ror	r24
    2308:	77 95       	ror	r23
    230a:	67 95       	ror	r22
    230c:	b7 95       	ror	r27
    230e:	f1 11       	cpse	r31, r1
    2310:	f8 cf       	rjmp	.-16     	; 0x2302 <__floatsisf+0x1c>
    2312:	fa f4       	brpl	.+62     	; 0x2352 <__floatsisf+0x6c>
    2314:	bb 0f       	add	r27, r27
    2316:	11 f4       	brne	.+4      	; 0x231c <__floatsisf+0x36>
    2318:	60 ff       	sbrs	r22, 0
    231a:	1b c0       	rjmp	.+54     	; 0x2352 <__floatsisf+0x6c>
    231c:	6f 5f       	subi	r22, 0xFF	; 255
    231e:	7f 4f       	sbci	r23, 0xFF	; 255
    2320:	8f 4f       	sbci	r24, 0xFF	; 255
    2322:	9f 4f       	sbci	r25, 0xFF	; 255
    2324:	16 c0       	rjmp	.+44     	; 0x2352 <__floatsisf+0x6c>
    2326:	88 23       	and	r24, r24
    2328:	11 f0       	breq	.+4      	; 0x232e <__floatsisf+0x48>
    232a:	96 e9       	ldi	r25, 0x96	; 150
    232c:	11 c0       	rjmp	.+34     	; 0x2350 <__floatsisf+0x6a>
    232e:	77 23       	and	r23, r23
    2330:	21 f0       	breq	.+8      	; 0x233a <__floatsisf+0x54>
    2332:	9e e8       	ldi	r25, 0x8E	; 142
    2334:	87 2f       	mov	r24, r23
    2336:	76 2f       	mov	r23, r22
    2338:	05 c0       	rjmp	.+10     	; 0x2344 <__floatsisf+0x5e>
    233a:	66 23       	and	r22, r22
    233c:	71 f0       	breq	.+28     	; 0x235a <__floatsisf+0x74>
    233e:	96 e8       	ldi	r25, 0x86	; 134
    2340:	86 2f       	mov	r24, r22
    2342:	70 e0       	ldi	r23, 0x00	; 0
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	2a f0       	brmi	.+10     	; 0x2352 <__floatsisf+0x6c>
    2348:	9a 95       	dec	r25
    234a:	66 0f       	add	r22, r22
    234c:	77 1f       	adc	r23, r23
    234e:	88 1f       	adc	r24, r24
    2350:	da f7       	brpl	.-10     	; 0x2348 <__floatsisf+0x62>
    2352:	88 0f       	add	r24, r24
    2354:	96 95       	lsr	r25
    2356:	87 95       	ror	r24
    2358:	97 f9       	bld	r25, 7
    235a:	08 95       	ret

0000235c <__fp_arccos>:
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	1f 93       	push	r17
    2362:	0f 93       	push	r16
    2364:	8b 01       	movw	r16, r22
    2366:	ec 01       	movw	r28, r24
    2368:	e5 e9       	ldi	r30, 0x95	; 149
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__fp_powser>
    2370:	0e 94 44 12 	call	0x2488	; 0x2488 <__fp_round>
    2374:	98 01       	movw	r18, r16
    2376:	ae 01       	movw	r20, r28
    2378:	8b 01       	movw	r16, r22
    237a:	ec 01       	movw	r28, r24
    237c:	60 e0       	ldi	r22, 0x00	; 0
    237e:	70 e0       	ldi	r23, 0x00	; 0
    2380:	80 e8       	ldi	r24, 0x80	; 128
    2382:	9f e3       	ldi	r25, 0x3F	; 63
    2384:	0e 94 00 10 	call	0x2000	; 0x2000 <__subsf3>
    2388:	0e 94 fe 12 	call	0x25fc	; 0x25fc <sqrt>
    238c:	98 01       	movw	r18, r16
    238e:	ae 01       	movw	r20, r28
    2390:	0f 91       	pop	r16
    2392:	1f 91       	pop	r17
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	0c 94 9e 12 	jmp	0x253c	; 0x253c <__mulsf3x>

0000239c <__fp_cmp>:
    239c:	99 0f       	add	r25, r25
    239e:	00 08       	sbc	r0, r0
    23a0:	55 0f       	add	r21, r21
    23a2:	aa 0b       	sbc	r26, r26
    23a4:	e0 e8       	ldi	r30, 0x80	; 128
    23a6:	fe ef       	ldi	r31, 0xFE	; 254
    23a8:	16 16       	cp	r1, r22
    23aa:	17 06       	cpc	r1, r23
    23ac:	e8 07       	cpc	r30, r24
    23ae:	f9 07       	cpc	r31, r25
    23b0:	c0 f0       	brcs	.+48     	; 0x23e2 <__fp_cmp+0x46>
    23b2:	12 16       	cp	r1, r18
    23b4:	13 06       	cpc	r1, r19
    23b6:	e4 07       	cpc	r30, r20
    23b8:	f5 07       	cpc	r31, r21
    23ba:	98 f0       	brcs	.+38     	; 0x23e2 <__fp_cmp+0x46>
    23bc:	62 1b       	sub	r22, r18
    23be:	73 0b       	sbc	r23, r19
    23c0:	84 0b       	sbc	r24, r20
    23c2:	95 0b       	sbc	r25, r21
    23c4:	39 f4       	brne	.+14     	; 0x23d4 <__fp_cmp+0x38>
    23c6:	0a 26       	eor	r0, r26
    23c8:	61 f0       	breq	.+24     	; 0x23e2 <__fp_cmp+0x46>
    23ca:	23 2b       	or	r18, r19
    23cc:	24 2b       	or	r18, r20
    23ce:	25 2b       	or	r18, r21
    23d0:	21 f4       	brne	.+8      	; 0x23da <__fp_cmp+0x3e>
    23d2:	08 95       	ret
    23d4:	0a 26       	eor	r0, r26
    23d6:	09 f4       	brne	.+2      	; 0x23da <__fp_cmp+0x3e>
    23d8:	a1 40       	sbci	r26, 0x01	; 1
    23da:	a6 95       	lsr	r26
    23dc:	8f ef       	ldi	r24, 0xFF	; 255
    23de:	81 1d       	adc	r24, r1
    23e0:	81 1d       	adc	r24, r1
    23e2:	08 95       	ret

000023e4 <__fp_inf>:
    23e4:	97 f9       	bld	r25, 7
    23e6:	9f 67       	ori	r25, 0x7F	; 127
    23e8:	80 e8       	ldi	r24, 0x80	; 128
    23ea:	70 e0       	ldi	r23, 0x00	; 0
    23ec:	60 e0       	ldi	r22, 0x00	; 0
    23ee:	08 95       	ret

000023f0 <__fp_nan>:
    23f0:	9f ef       	ldi	r25, 0xFF	; 255
    23f2:	80 ec       	ldi	r24, 0xC0	; 192
    23f4:	08 95       	ret

000023f6 <__fp_powser>:
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	1f 93       	push	r17
    23fc:	0f 93       	push	r16
    23fe:	ff 92       	push	r15
    2400:	ef 92       	push	r14
    2402:	df 92       	push	r13
    2404:	7b 01       	movw	r14, r22
    2406:	8c 01       	movw	r16, r24
    2408:	68 94       	set
    240a:	06 c0       	rjmp	.+12     	; 0x2418 <__fp_powser+0x22>
    240c:	da 2e       	mov	r13, r26
    240e:	ef 01       	movw	r28, r30
    2410:	0e 94 9e 12 	call	0x253c	; 0x253c <__mulsf3x>
    2414:	fe 01       	movw	r30, r28
    2416:	e8 94       	clt
    2418:	a5 91       	lpm	r26, Z+
    241a:	25 91       	lpm	r18, Z+
    241c:	35 91       	lpm	r19, Z+
    241e:	45 91       	lpm	r20, Z+
    2420:	55 91       	lpm	r21, Z+
    2422:	a6 f3       	brts	.-24     	; 0x240c <__fp_powser+0x16>
    2424:	ef 01       	movw	r28, r30
    2426:	0e 94 18 10 	call	0x2030	; 0x2030 <__addsf3x>
    242a:	fe 01       	movw	r30, r28
    242c:	97 01       	movw	r18, r14
    242e:	a8 01       	movw	r20, r16
    2430:	da 94       	dec	r13
    2432:	69 f7       	brne	.-38     	; 0x240e <__fp_powser+0x18>
    2434:	df 90       	pop	r13
    2436:	ef 90       	pop	r14
    2438:	ff 90       	pop	r15
    243a:	0f 91       	pop	r16
    243c:	1f 91       	pop	r17
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	08 95       	ret

00002444 <__fp_powsodd>:
    2444:	9f 93       	push	r25
    2446:	8f 93       	push	r24
    2448:	7f 93       	push	r23
    244a:	6f 93       	push	r22
    244c:	ff 93       	push	r31
    244e:	ef 93       	push	r30
    2450:	9b 01       	movw	r18, r22
    2452:	ac 01       	movw	r20, r24
    2454:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsf3>
    2458:	ef 91       	pop	r30
    245a:	ff 91       	pop	r31
    245c:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__fp_powser>
    2460:	2f 91       	pop	r18
    2462:	3f 91       	pop	r19
    2464:	4f 91       	pop	r20
    2466:	5f 91       	pop	r21
    2468:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__mulsf3>

0000246c <__fp_pscA>:
    246c:	00 24       	eor	r0, r0
    246e:	0a 94       	dec	r0
    2470:	16 16       	cp	r1, r22
    2472:	17 06       	cpc	r1, r23
    2474:	18 06       	cpc	r1, r24
    2476:	09 06       	cpc	r0, r25
    2478:	08 95       	ret

0000247a <__fp_pscB>:
    247a:	00 24       	eor	r0, r0
    247c:	0a 94       	dec	r0
    247e:	12 16       	cp	r1, r18
    2480:	13 06       	cpc	r1, r19
    2482:	14 06       	cpc	r1, r20
    2484:	05 06       	cpc	r0, r21
    2486:	08 95       	ret

00002488 <__fp_round>:
    2488:	09 2e       	mov	r0, r25
    248a:	03 94       	inc	r0
    248c:	00 0c       	add	r0, r0
    248e:	11 f4       	brne	.+4      	; 0x2494 <__fp_round+0xc>
    2490:	88 23       	and	r24, r24
    2492:	52 f0       	brmi	.+20     	; 0x24a8 <__fp_round+0x20>
    2494:	bb 0f       	add	r27, r27
    2496:	40 f4       	brcc	.+16     	; 0x24a8 <__fp_round+0x20>
    2498:	bf 2b       	or	r27, r31
    249a:	11 f4       	brne	.+4      	; 0x24a0 <__fp_round+0x18>
    249c:	60 ff       	sbrs	r22, 0
    249e:	04 c0       	rjmp	.+8      	; 0x24a8 <__fp_round+0x20>
    24a0:	6f 5f       	subi	r22, 0xFF	; 255
    24a2:	7f 4f       	sbci	r23, 0xFF	; 255
    24a4:	8f 4f       	sbci	r24, 0xFF	; 255
    24a6:	9f 4f       	sbci	r25, 0xFF	; 255
    24a8:	08 95       	ret

000024aa <__fp_split3>:
    24aa:	57 fd       	sbrc	r21, 7
    24ac:	90 58       	subi	r25, 0x80	; 128
    24ae:	44 0f       	add	r20, r20
    24b0:	55 1f       	adc	r21, r21
    24b2:	59 f0       	breq	.+22     	; 0x24ca <__fp_splitA+0x10>
    24b4:	5f 3f       	cpi	r21, 0xFF	; 255
    24b6:	71 f0       	breq	.+28     	; 0x24d4 <__fp_splitA+0x1a>
    24b8:	47 95       	ror	r20

000024ba <__fp_splitA>:
    24ba:	88 0f       	add	r24, r24
    24bc:	97 fb       	bst	r25, 7
    24be:	99 1f       	adc	r25, r25
    24c0:	61 f0       	breq	.+24     	; 0x24da <__fp_splitA+0x20>
    24c2:	9f 3f       	cpi	r25, 0xFF	; 255
    24c4:	79 f0       	breq	.+30     	; 0x24e4 <__fp_splitA+0x2a>
    24c6:	87 95       	ror	r24
    24c8:	08 95       	ret
    24ca:	12 16       	cp	r1, r18
    24cc:	13 06       	cpc	r1, r19
    24ce:	14 06       	cpc	r1, r20
    24d0:	55 1f       	adc	r21, r21
    24d2:	f2 cf       	rjmp	.-28     	; 0x24b8 <__fp_split3+0xe>
    24d4:	46 95       	lsr	r20
    24d6:	f1 df       	rcall	.-30     	; 0x24ba <__fp_splitA>
    24d8:	08 c0       	rjmp	.+16     	; 0x24ea <__fp_splitA+0x30>
    24da:	16 16       	cp	r1, r22
    24dc:	17 06       	cpc	r1, r23
    24de:	18 06       	cpc	r1, r24
    24e0:	99 1f       	adc	r25, r25
    24e2:	f1 cf       	rjmp	.-30     	; 0x24c6 <__fp_splitA+0xc>
    24e4:	86 95       	lsr	r24
    24e6:	71 05       	cpc	r23, r1
    24e8:	61 05       	cpc	r22, r1
    24ea:	08 94       	sec
    24ec:	08 95       	ret

000024ee <__fp_zero>:
    24ee:	e8 94       	clt

000024f0 <__fp_szero>:
    24f0:	bb 27       	eor	r27, r27
    24f2:	66 27       	eor	r22, r22
    24f4:	77 27       	eor	r23, r23
    24f6:	cb 01       	movw	r24, r22
    24f8:	97 f9       	bld	r25, 7
    24fa:	08 95       	ret

000024fc <__gesf2>:
    24fc:	0e 94 ce 11 	call	0x239c	; 0x239c <__fp_cmp>
    2500:	08 f4       	brcc	.+2      	; 0x2504 <__gesf2+0x8>
    2502:	8f ef       	ldi	r24, 0xFF	; 255
    2504:	08 95       	ret

00002506 <inverse>:
    2506:	9b 01       	movw	r18, r22
    2508:	ac 01       	movw	r20, r24
    250a:	60 e0       	ldi	r22, 0x00	; 0
    250c:	70 e0       	ldi	r23, 0x00	; 0
    250e:	80 e8       	ldi	r24, 0x80	; 128
    2510:	9f e3       	ldi	r25, 0x3F	; 63
    2512:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__divsf3>

00002516 <__mulsf3>:
    2516:	0e 94 9e 12 	call	0x253c	; 0x253c <__mulsf3x>
    251a:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__fp_round>
    251e:	0e 94 36 12 	call	0x246c	; 0x246c <__fp_pscA>
    2522:	38 f0       	brcs	.+14     	; 0x2532 <__mulsf3+0x1c>
    2524:	0e 94 3d 12 	call	0x247a	; 0x247a <__fp_pscB>
    2528:	20 f0       	brcs	.+8      	; 0x2532 <__mulsf3+0x1c>
    252a:	95 23       	and	r25, r21
    252c:	11 f0       	breq	.+4      	; 0x2532 <__mulsf3+0x1c>
    252e:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__fp_inf>
    2532:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__fp_nan>
    2536:	11 24       	eor	r1, r1
    2538:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__fp_szero>

0000253c <__mulsf3x>:
    253c:	0e 94 55 12 	call	0x24aa	; 0x24aa <__fp_split3>
    2540:	70 f3       	brcs	.-36     	; 0x251e <__mulsf3+0x8>

00002542 <__mulsf3_pse>:
    2542:	95 9f       	mul	r25, r21
    2544:	c1 f3       	breq	.-16     	; 0x2536 <__mulsf3+0x20>
    2546:	95 0f       	add	r25, r21
    2548:	50 e0       	ldi	r21, 0x00	; 0
    254a:	55 1f       	adc	r21, r21
    254c:	62 9f       	mul	r22, r18
    254e:	f0 01       	movw	r30, r0
    2550:	72 9f       	mul	r23, r18
    2552:	bb 27       	eor	r27, r27
    2554:	f0 0d       	add	r31, r0
    2556:	b1 1d       	adc	r27, r1
    2558:	63 9f       	mul	r22, r19
    255a:	aa 27       	eor	r26, r26
    255c:	f0 0d       	add	r31, r0
    255e:	b1 1d       	adc	r27, r1
    2560:	aa 1f       	adc	r26, r26
    2562:	64 9f       	mul	r22, r20
    2564:	66 27       	eor	r22, r22
    2566:	b0 0d       	add	r27, r0
    2568:	a1 1d       	adc	r26, r1
    256a:	66 1f       	adc	r22, r22
    256c:	82 9f       	mul	r24, r18
    256e:	22 27       	eor	r18, r18
    2570:	b0 0d       	add	r27, r0
    2572:	a1 1d       	adc	r26, r1
    2574:	62 1f       	adc	r22, r18
    2576:	73 9f       	mul	r23, r19
    2578:	b0 0d       	add	r27, r0
    257a:	a1 1d       	adc	r26, r1
    257c:	62 1f       	adc	r22, r18
    257e:	83 9f       	mul	r24, r19
    2580:	a0 0d       	add	r26, r0
    2582:	61 1d       	adc	r22, r1
    2584:	22 1f       	adc	r18, r18
    2586:	74 9f       	mul	r23, r20
    2588:	33 27       	eor	r19, r19
    258a:	a0 0d       	add	r26, r0
    258c:	61 1d       	adc	r22, r1
    258e:	23 1f       	adc	r18, r19
    2590:	84 9f       	mul	r24, r20
    2592:	60 0d       	add	r22, r0
    2594:	21 1d       	adc	r18, r1
    2596:	82 2f       	mov	r24, r18
    2598:	76 2f       	mov	r23, r22
    259a:	6a 2f       	mov	r22, r26
    259c:	11 24       	eor	r1, r1
    259e:	9f 57       	subi	r25, 0x7F	; 127
    25a0:	50 40       	sbci	r21, 0x00	; 0
    25a2:	9a f0       	brmi	.+38     	; 0x25ca <__mulsf3_pse+0x88>
    25a4:	f1 f0       	breq	.+60     	; 0x25e2 <__mulsf3_pse+0xa0>
    25a6:	88 23       	and	r24, r24
    25a8:	4a f0       	brmi	.+18     	; 0x25bc <__mulsf3_pse+0x7a>
    25aa:	ee 0f       	add	r30, r30
    25ac:	ff 1f       	adc	r31, r31
    25ae:	bb 1f       	adc	r27, r27
    25b0:	66 1f       	adc	r22, r22
    25b2:	77 1f       	adc	r23, r23
    25b4:	88 1f       	adc	r24, r24
    25b6:	91 50       	subi	r25, 0x01	; 1
    25b8:	50 40       	sbci	r21, 0x00	; 0
    25ba:	a9 f7       	brne	.-22     	; 0x25a6 <__mulsf3_pse+0x64>
    25bc:	9e 3f       	cpi	r25, 0xFE	; 254
    25be:	51 05       	cpc	r21, r1
    25c0:	80 f0       	brcs	.+32     	; 0x25e2 <__mulsf3_pse+0xa0>
    25c2:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__fp_inf>
    25c6:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__fp_szero>
    25ca:	5f 3f       	cpi	r21, 0xFF	; 255
    25cc:	e4 f3       	brlt	.-8      	; 0x25c6 <__mulsf3_pse+0x84>
    25ce:	98 3e       	cpi	r25, 0xE8	; 232
    25d0:	d4 f3       	brlt	.-12     	; 0x25c6 <__mulsf3_pse+0x84>
    25d2:	86 95       	lsr	r24
    25d4:	77 95       	ror	r23
    25d6:	67 95       	ror	r22
    25d8:	b7 95       	ror	r27
    25da:	f7 95       	ror	r31
    25dc:	e7 95       	ror	r30
    25de:	9f 5f       	subi	r25, 0xFF	; 255
    25e0:	c1 f7       	brne	.-16     	; 0x25d2 <__mulsf3_pse+0x90>
    25e2:	fe 2b       	or	r31, r30
    25e4:	88 0f       	add	r24, r24
    25e6:	91 1d       	adc	r25, r1
    25e8:	96 95       	lsr	r25
    25ea:	87 95       	ror	r24
    25ec:	97 f9       	bld	r25, 7
    25ee:	08 95       	ret
    25f0:	19 f4       	brne	.+6      	; 0x25f8 <__mulsf3_pse+0xb6>
    25f2:	16 f4       	brtc	.+4      	; 0x25f8 <__mulsf3_pse+0xb6>
    25f4:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__fp_nan>
    25f8:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__fp_mpack>

000025fc <sqrt>:
    25fc:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__fp_splitA>
    2600:	b8 f3       	brcs	.-18     	; 0x25f0 <__mulsf3_pse+0xae>
    2602:	99 23       	and	r25, r25
    2604:	c9 f3       	breq	.-14     	; 0x25f8 <__mulsf3_pse+0xb6>
    2606:	b6 f3       	brts	.-20     	; 0x25f4 <__mulsf3_pse+0xb2>
    2608:	9f 57       	subi	r25, 0x7F	; 127
    260a:	55 0b       	sbc	r21, r21
    260c:	87 ff       	sbrs	r24, 7
    260e:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__fp_norm2>
    2612:	00 24       	eor	r0, r0
    2614:	a0 e6       	ldi	r26, 0x60	; 96
    2616:	40 ea       	ldi	r20, 0xA0	; 160
    2618:	90 01       	movw	r18, r0
    261a:	80 58       	subi	r24, 0x80	; 128
    261c:	56 95       	lsr	r21
    261e:	97 95       	ror	r25
    2620:	28 f4       	brcc	.+10     	; 0x262c <sqrt+0x30>
    2622:	80 5c       	subi	r24, 0xC0	; 192
    2624:	66 0f       	add	r22, r22
    2626:	77 1f       	adc	r23, r23
    2628:	88 1f       	adc	r24, r24
    262a:	20 f0       	brcs	.+8      	; 0x2634 <sqrt+0x38>
    262c:	26 17       	cp	r18, r22
    262e:	37 07       	cpc	r19, r23
    2630:	48 07       	cpc	r20, r24
    2632:	30 f4       	brcc	.+12     	; 0x2640 <sqrt+0x44>
    2634:	62 1b       	sub	r22, r18
    2636:	73 0b       	sbc	r23, r19
    2638:	84 0b       	sbc	r24, r20
    263a:	20 29       	or	r18, r0
    263c:	31 29       	or	r19, r1
    263e:	4a 2b       	or	r20, r26
    2640:	a6 95       	lsr	r26
    2642:	17 94       	ror	r1
    2644:	07 94       	ror	r0
    2646:	20 25       	eor	r18, r0
    2648:	31 25       	eor	r19, r1
    264a:	4a 27       	eor	r20, r26
    264c:	58 f7       	brcc	.-42     	; 0x2624 <sqrt+0x28>
    264e:	66 0f       	add	r22, r22
    2650:	77 1f       	adc	r23, r23
    2652:	88 1f       	adc	r24, r24
    2654:	20 f0       	brcs	.+8      	; 0x265e <sqrt+0x62>
    2656:	26 17       	cp	r18, r22
    2658:	37 07       	cpc	r19, r23
    265a:	48 07       	cpc	r20, r24
    265c:	30 f4       	brcc	.+12     	; 0x266a <sqrt+0x6e>
    265e:	62 0b       	sbc	r22, r18
    2660:	73 0b       	sbc	r23, r19
    2662:	84 0b       	sbc	r24, r20
    2664:	20 0d       	add	r18, r0
    2666:	31 1d       	adc	r19, r1
    2668:	41 1d       	adc	r20, r1
    266a:	a0 95       	com	r26
    266c:	81 f7       	brne	.-32     	; 0x264e <sqrt+0x52>
    266e:	b9 01       	movw	r22, r18
    2670:	84 2f       	mov	r24, r20
    2672:	91 58       	subi	r25, 0x81	; 129
    2674:	88 0f       	add	r24, r24
    2676:	96 95       	lsr	r25
    2678:	87 95       	ror	r24
    267a:	08 95       	ret

0000267c <square>:
    267c:	9b 01       	movw	r18, r22
    267e:	ac 01       	movw	r20, r24
    2680:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__mulsf3>

00002684 <__fp_mpack>:
    2684:	9f 3f       	cpi	r25, 0xFF	; 255
    2686:	31 f0       	breq	.+12     	; 0x2694 <__fp_mpack_finite+0xc>

00002688 <__fp_mpack_finite>:
    2688:	91 50       	subi	r25, 0x01	; 1
    268a:	20 f4       	brcc	.+8      	; 0x2694 <__fp_mpack_finite+0xc>
    268c:	87 95       	ror	r24
    268e:	77 95       	ror	r23
    2690:	67 95       	ror	r22
    2692:	b7 95       	ror	r27
    2694:	88 0f       	add	r24, r24
    2696:	91 1d       	adc	r25, r1
    2698:	96 95       	lsr	r25
    269a:	87 95       	ror	r24
    269c:	97 f9       	bld	r25, 7
    269e:	08 95       	ret

000026a0 <__fp_norm2>:
    26a0:	91 50       	subi	r25, 0x01	; 1
    26a2:	50 40       	sbci	r21, 0x00	; 0
    26a4:	66 0f       	add	r22, r22
    26a6:	77 1f       	adc	r23, r23
    26a8:	88 1f       	adc	r24, r24
    26aa:	d2 f7       	brpl	.-12     	; 0x26a0 <__fp_norm2>
    26ac:	08 95       	ret

000026ae <__udivmodsi4>:
    26ae:	a1 e2       	ldi	r26, 0x21	; 33
    26b0:	1a 2e       	mov	r1, r26
    26b2:	aa 1b       	sub	r26, r26
    26b4:	bb 1b       	sub	r27, r27
    26b6:	fd 01       	movw	r30, r26
    26b8:	0d c0       	rjmp	.+26     	; 0x26d4 <__udivmodsi4_ep>

000026ba <__udivmodsi4_loop>:
    26ba:	aa 1f       	adc	r26, r26
    26bc:	bb 1f       	adc	r27, r27
    26be:	ee 1f       	adc	r30, r30
    26c0:	ff 1f       	adc	r31, r31
    26c2:	a2 17       	cp	r26, r18
    26c4:	b3 07       	cpc	r27, r19
    26c6:	e4 07       	cpc	r30, r20
    26c8:	f5 07       	cpc	r31, r21
    26ca:	20 f0       	brcs	.+8      	; 0x26d4 <__udivmodsi4_ep>
    26cc:	a2 1b       	sub	r26, r18
    26ce:	b3 0b       	sbc	r27, r19
    26d0:	e4 0b       	sbc	r30, r20
    26d2:	f5 0b       	sbc	r31, r21

000026d4 <__udivmodsi4_ep>:
    26d4:	66 1f       	adc	r22, r22
    26d6:	77 1f       	adc	r23, r23
    26d8:	88 1f       	adc	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	1a 94       	dec	r1
    26de:	69 f7       	brne	.-38     	; 0x26ba <__udivmodsi4_loop>
    26e0:	60 95       	com	r22
    26e2:	70 95       	com	r23
    26e4:	80 95       	com	r24
    26e6:	90 95       	com	r25
    26e8:	9b 01       	movw	r18, r22
    26ea:	ac 01       	movw	r20, r24
    26ec:	bd 01       	movw	r22, r26
    26ee:	cf 01       	movw	r24, r30
    26f0:	08 95       	ret

000026f2 <dtostrf>:
    26f2:	ef 92       	push	r14
    26f4:	0f 93       	push	r16
    26f6:	1f 93       	push	r17
    26f8:	cf 93       	push	r28
    26fa:	df 93       	push	r29
    26fc:	e8 01       	movw	r28, r16
    26fe:	47 fd       	sbrc	r20, 7
    2700:	02 c0       	rjmp	.+4      	; 0x2706 <dtostrf+0x14>
    2702:	34 e0       	ldi	r19, 0x04	; 4
    2704:	01 c0       	rjmp	.+2      	; 0x2708 <dtostrf+0x16>
    2706:	34 e1       	ldi	r19, 0x14	; 20
    2708:	04 2e       	mov	r0, r20
    270a:	00 0c       	add	r0, r0
    270c:	55 0b       	sbc	r21, r21
    270e:	57 ff       	sbrs	r21, 7
    2710:	03 c0       	rjmp	.+6      	; 0x2718 <dtostrf+0x26>
    2712:	51 95       	neg	r21
    2714:	41 95       	neg	r20
    2716:	51 09       	sbc	r21, r1
    2718:	e3 2e       	mov	r14, r19
    271a:	02 2f       	mov	r16, r18
    271c:	24 2f       	mov	r18, r20
    271e:	ae 01       	movw	r20, r28
    2720:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <dtoa_prf>
    2724:	ce 01       	movw	r24, r28
    2726:	df 91       	pop	r29
    2728:	cf 91       	pop	r28
    272a:	1f 91       	pop	r17
    272c:	0f 91       	pop	r16
    272e:	ef 90       	pop	r14
    2730:	08 95       	ret

00002732 <malloc>:
    2732:	0f 93       	push	r16
    2734:	1f 93       	push	r17
    2736:	cf 93       	push	r28
    2738:	df 93       	push	r29
    273a:	82 30       	cpi	r24, 0x02	; 2
    273c:	91 05       	cpc	r25, r1
    273e:	10 f4       	brcc	.+4      	; 0x2744 <malloc+0x12>
    2740:	82 e0       	ldi	r24, 0x02	; 2
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <__flp>
    2748:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <__flp+0x1>
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	a0 e0       	ldi	r26, 0x00	; 0
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	30 97       	sbiw	r30, 0x00	; 0
    2756:	19 f1       	breq	.+70     	; 0x279e <malloc+0x6c>
    2758:	40 81       	ld	r20, Z
    275a:	51 81       	ldd	r21, Z+1	; 0x01
    275c:	02 81       	ldd	r16, Z+2	; 0x02
    275e:	13 81       	ldd	r17, Z+3	; 0x03
    2760:	48 17       	cp	r20, r24
    2762:	59 07       	cpc	r21, r25
    2764:	c8 f0       	brcs	.+50     	; 0x2798 <malloc+0x66>
    2766:	84 17       	cp	r24, r20
    2768:	95 07       	cpc	r25, r21
    276a:	69 f4       	brne	.+26     	; 0x2786 <malloc+0x54>
    276c:	10 97       	sbiw	r26, 0x00	; 0
    276e:	31 f0       	breq	.+12     	; 0x277c <malloc+0x4a>
    2770:	12 96       	adiw	r26, 0x02	; 2
    2772:	0c 93       	st	X, r16
    2774:	12 97       	sbiw	r26, 0x02	; 2
    2776:	13 96       	adiw	r26, 0x03	; 3
    2778:	1c 93       	st	X, r17
    277a:	27 c0       	rjmp	.+78     	; 0x27ca <malloc+0x98>
    277c:	00 93 49 01 	sts	0x0149, r16	; 0x800149 <__flp>
    2780:	10 93 4a 01 	sts	0x014A, r17	; 0x80014a <__flp+0x1>
    2784:	22 c0       	rjmp	.+68     	; 0x27ca <malloc+0x98>
    2786:	21 15       	cp	r18, r1
    2788:	31 05       	cpc	r19, r1
    278a:	19 f0       	breq	.+6      	; 0x2792 <malloc+0x60>
    278c:	42 17       	cp	r20, r18
    278e:	53 07       	cpc	r21, r19
    2790:	18 f4       	brcc	.+6      	; 0x2798 <malloc+0x66>
    2792:	9a 01       	movw	r18, r20
    2794:	bd 01       	movw	r22, r26
    2796:	ef 01       	movw	r28, r30
    2798:	df 01       	movw	r26, r30
    279a:	f8 01       	movw	r30, r16
    279c:	db cf       	rjmp	.-74     	; 0x2754 <malloc+0x22>
    279e:	21 15       	cp	r18, r1
    27a0:	31 05       	cpc	r19, r1
    27a2:	f9 f0       	breq	.+62     	; 0x27e2 <malloc+0xb0>
    27a4:	28 1b       	sub	r18, r24
    27a6:	39 0b       	sbc	r19, r25
    27a8:	24 30       	cpi	r18, 0x04	; 4
    27aa:	31 05       	cpc	r19, r1
    27ac:	80 f4       	brcc	.+32     	; 0x27ce <malloc+0x9c>
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	9b 81       	ldd	r25, Y+3	; 0x03
    27b2:	61 15       	cp	r22, r1
    27b4:	71 05       	cpc	r23, r1
    27b6:	21 f0       	breq	.+8      	; 0x27c0 <malloc+0x8e>
    27b8:	fb 01       	movw	r30, r22
    27ba:	93 83       	std	Z+3, r25	; 0x03
    27bc:	82 83       	std	Z+2, r24	; 0x02
    27be:	04 c0       	rjmp	.+8      	; 0x27c8 <malloc+0x96>
    27c0:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <__flp+0x1>
    27c4:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <__flp>
    27c8:	fe 01       	movw	r30, r28
    27ca:	32 96       	adiw	r30, 0x02	; 2
    27cc:	44 c0       	rjmp	.+136    	; 0x2856 <malloc+0x124>
    27ce:	fe 01       	movw	r30, r28
    27d0:	e2 0f       	add	r30, r18
    27d2:	f3 1f       	adc	r31, r19
    27d4:	81 93       	st	Z+, r24
    27d6:	91 93       	st	Z+, r25
    27d8:	22 50       	subi	r18, 0x02	; 2
    27da:	31 09       	sbc	r19, r1
    27dc:	39 83       	std	Y+1, r19	; 0x01
    27de:	28 83       	st	Y, r18
    27e0:	3a c0       	rjmp	.+116    	; 0x2856 <malloc+0x124>
    27e2:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <__brkval>
    27e6:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <__brkval+0x1>
    27ea:	23 2b       	or	r18, r19
    27ec:	41 f4       	brne	.+16     	; 0x27fe <malloc+0xcc>
    27ee:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    27f2:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    27f6:	30 93 48 01 	sts	0x0148, r19	; 0x800148 <__brkval+0x1>
    27fa:	20 93 47 01 	sts	0x0147, r18	; 0x800147 <__brkval>
    27fe:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    2802:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    2806:	21 15       	cp	r18, r1
    2808:	31 05       	cpc	r19, r1
    280a:	41 f4       	brne	.+16     	; 0x281c <malloc+0xea>
    280c:	2d b7       	in	r18, 0x3d	; 61
    280e:	3e b7       	in	r19, 0x3e	; 62
    2810:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    2814:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    2818:	24 1b       	sub	r18, r20
    281a:	35 0b       	sbc	r19, r21
    281c:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <__brkval>
    2820:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <__brkval+0x1>
    2824:	e2 17       	cp	r30, r18
    2826:	f3 07       	cpc	r31, r19
    2828:	a0 f4       	brcc	.+40     	; 0x2852 <malloc+0x120>
    282a:	2e 1b       	sub	r18, r30
    282c:	3f 0b       	sbc	r19, r31
    282e:	28 17       	cp	r18, r24
    2830:	39 07       	cpc	r19, r25
    2832:	78 f0       	brcs	.+30     	; 0x2852 <malloc+0x120>
    2834:	ac 01       	movw	r20, r24
    2836:	4e 5f       	subi	r20, 0xFE	; 254
    2838:	5f 4f       	sbci	r21, 0xFF	; 255
    283a:	24 17       	cp	r18, r20
    283c:	35 07       	cpc	r19, r21
    283e:	48 f0       	brcs	.+18     	; 0x2852 <malloc+0x120>
    2840:	4e 0f       	add	r20, r30
    2842:	5f 1f       	adc	r21, r31
    2844:	50 93 48 01 	sts	0x0148, r21	; 0x800148 <__brkval+0x1>
    2848:	40 93 47 01 	sts	0x0147, r20	; 0x800147 <__brkval>
    284c:	81 93       	st	Z+, r24
    284e:	91 93       	st	Z+, r25
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <malloc+0x124>
    2852:	e0 e0       	ldi	r30, 0x00	; 0
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	cf 01       	movw	r24, r30
    2858:	df 91       	pop	r29
    285a:	cf 91       	pop	r28
    285c:	1f 91       	pop	r17
    285e:	0f 91       	pop	r16
    2860:	08 95       	ret

00002862 <free>:
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	09 f4       	brne	.+2      	; 0x286c <free+0xa>
    286a:	81 c0       	rjmp	.+258    	; 0x296e <free+0x10c>
    286c:	fc 01       	movw	r30, r24
    286e:	32 97       	sbiw	r30, 0x02	; 2
    2870:	13 82       	std	Z+3, r1	; 0x03
    2872:	12 82       	std	Z+2, r1	; 0x02
    2874:	a0 91 49 01 	lds	r26, 0x0149	; 0x800149 <__flp>
    2878:	b0 91 4a 01 	lds	r27, 0x014A	; 0x80014a <__flp+0x1>
    287c:	10 97       	sbiw	r26, 0x00	; 0
    287e:	81 f4       	brne	.+32     	; 0x28a0 <free+0x3e>
    2880:	20 81       	ld	r18, Z
    2882:	31 81       	ldd	r19, Z+1	; 0x01
    2884:	82 0f       	add	r24, r18
    2886:	93 1f       	adc	r25, r19
    2888:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <__brkval>
    288c:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <__brkval+0x1>
    2890:	28 17       	cp	r18, r24
    2892:	39 07       	cpc	r19, r25
    2894:	51 f5       	brne	.+84     	; 0x28ea <free+0x88>
    2896:	f0 93 48 01 	sts	0x0148, r31	; 0x800148 <__brkval+0x1>
    289a:	e0 93 47 01 	sts	0x0147, r30	; 0x800147 <__brkval>
    289e:	67 c0       	rjmp	.+206    	; 0x296e <free+0x10c>
    28a0:	ed 01       	movw	r28, r26
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	ce 17       	cp	r28, r30
    28a8:	df 07       	cpc	r29, r31
    28aa:	40 f4       	brcc	.+16     	; 0x28bc <free+0x5a>
    28ac:	4a 81       	ldd	r20, Y+2	; 0x02
    28ae:	5b 81       	ldd	r21, Y+3	; 0x03
    28b0:	9e 01       	movw	r18, r28
    28b2:	41 15       	cp	r20, r1
    28b4:	51 05       	cpc	r21, r1
    28b6:	f1 f0       	breq	.+60     	; 0x28f4 <free+0x92>
    28b8:	ea 01       	movw	r28, r20
    28ba:	f5 cf       	rjmp	.-22     	; 0x28a6 <free+0x44>
    28bc:	d3 83       	std	Z+3, r29	; 0x03
    28be:	c2 83       	std	Z+2, r28	; 0x02
    28c0:	40 81       	ld	r20, Z
    28c2:	51 81       	ldd	r21, Z+1	; 0x01
    28c4:	84 0f       	add	r24, r20
    28c6:	95 1f       	adc	r25, r21
    28c8:	c8 17       	cp	r28, r24
    28ca:	d9 07       	cpc	r29, r25
    28cc:	59 f4       	brne	.+22     	; 0x28e4 <free+0x82>
    28ce:	88 81       	ld	r24, Y
    28d0:	99 81       	ldd	r25, Y+1	; 0x01
    28d2:	84 0f       	add	r24, r20
    28d4:	95 1f       	adc	r25, r21
    28d6:	02 96       	adiw	r24, 0x02	; 2
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	80 83       	st	Z, r24
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	9b 81       	ldd	r25, Y+3	; 0x03
    28e0:	93 83       	std	Z+3, r25	; 0x03
    28e2:	82 83       	std	Z+2, r24	; 0x02
    28e4:	21 15       	cp	r18, r1
    28e6:	31 05       	cpc	r19, r1
    28e8:	29 f4       	brne	.+10     	; 0x28f4 <free+0x92>
    28ea:	f0 93 4a 01 	sts	0x014A, r31	; 0x80014a <__flp+0x1>
    28ee:	e0 93 49 01 	sts	0x0149, r30	; 0x800149 <__flp>
    28f2:	3d c0       	rjmp	.+122    	; 0x296e <free+0x10c>
    28f4:	e9 01       	movw	r28, r18
    28f6:	fb 83       	std	Y+3, r31	; 0x03
    28f8:	ea 83       	std	Y+2, r30	; 0x02
    28fa:	49 91       	ld	r20, Y+
    28fc:	59 91       	ld	r21, Y+
    28fe:	c4 0f       	add	r28, r20
    2900:	d5 1f       	adc	r29, r21
    2902:	ec 17       	cp	r30, r28
    2904:	fd 07       	cpc	r31, r29
    2906:	61 f4       	brne	.+24     	; 0x2920 <free+0xbe>
    2908:	80 81       	ld	r24, Z
    290a:	91 81       	ldd	r25, Z+1	; 0x01
    290c:	84 0f       	add	r24, r20
    290e:	95 1f       	adc	r25, r21
    2910:	02 96       	adiw	r24, 0x02	; 2
    2912:	e9 01       	movw	r28, r18
    2914:	99 83       	std	Y+1, r25	; 0x01
    2916:	88 83       	st	Y, r24
    2918:	82 81       	ldd	r24, Z+2	; 0x02
    291a:	93 81       	ldd	r25, Z+3	; 0x03
    291c:	9b 83       	std	Y+3, r25	; 0x03
    291e:	8a 83       	std	Y+2, r24	; 0x02
    2920:	e0 e0       	ldi	r30, 0x00	; 0
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	12 96       	adiw	r26, 0x02	; 2
    2926:	8d 91       	ld	r24, X+
    2928:	9c 91       	ld	r25, X
    292a:	13 97       	sbiw	r26, 0x03	; 3
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	19 f0       	breq	.+6      	; 0x2936 <free+0xd4>
    2930:	fd 01       	movw	r30, r26
    2932:	dc 01       	movw	r26, r24
    2934:	f7 cf       	rjmp	.-18     	; 0x2924 <free+0xc2>
    2936:	8d 91       	ld	r24, X+
    2938:	9c 91       	ld	r25, X
    293a:	11 97       	sbiw	r26, 0x01	; 1
    293c:	9d 01       	movw	r18, r26
    293e:	2e 5f       	subi	r18, 0xFE	; 254
    2940:	3f 4f       	sbci	r19, 0xFF	; 255
    2942:	82 0f       	add	r24, r18
    2944:	93 1f       	adc	r25, r19
    2946:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <__brkval>
    294a:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <__brkval+0x1>
    294e:	28 17       	cp	r18, r24
    2950:	39 07       	cpc	r19, r25
    2952:	69 f4       	brne	.+26     	; 0x296e <free+0x10c>
    2954:	30 97       	sbiw	r30, 0x00	; 0
    2956:	29 f4       	brne	.+10     	; 0x2962 <free+0x100>
    2958:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__flp+0x1>
    295c:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__flp>
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <free+0x104>
    2962:	13 82       	std	Z+3, r1	; 0x03
    2964:	12 82       	std	Z+2, r1	; 0x02
    2966:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <__brkval+0x1>
    296a:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <__brkval>
    296e:	df 91       	pop	r29
    2970:	cf 91       	pop	r28
    2972:	08 95       	ret

00002974 <realloc>:
    2974:	a0 e0       	ldi	r26, 0x00	; 0
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	e0 ec       	ldi	r30, 0xC0	; 192
    297a:	f4 e1       	ldi	r31, 0x14	; 20
    297c:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__prologue_saves__+0x8>
    2980:	ec 01       	movw	r28, r24
    2982:	00 97       	sbiw	r24, 0x00	; 0
    2984:	21 f4       	brne	.+8      	; 0x298e <realloc+0x1a>
    2986:	cb 01       	movw	r24, r22
    2988:	0e 94 99 13 	call	0x2732	; 0x2732 <malloc>
    298c:	b4 c0       	rjmp	.+360    	; 0x2af6 <realloc+0x182>
    298e:	fc 01       	movw	r30, r24
    2990:	e6 0f       	add	r30, r22
    2992:	f7 1f       	adc	r31, r23
    2994:	9c 01       	movw	r18, r24
    2996:	22 50       	subi	r18, 0x02	; 2
    2998:	31 09       	sbc	r19, r1
    299a:	e2 17       	cp	r30, r18
    299c:	f3 07       	cpc	r31, r19
    299e:	08 f4       	brcc	.+2      	; 0x29a2 <realloc+0x2e>
    29a0:	a8 c0       	rjmp	.+336    	; 0x2af2 <realloc+0x17e>
    29a2:	d9 01       	movw	r26, r18
    29a4:	0d 91       	ld	r16, X+
    29a6:	1c 91       	ld	r17, X
    29a8:	11 97       	sbiw	r26, 0x01	; 1
    29aa:	06 17       	cp	r16, r22
    29ac:	17 07       	cpc	r17, r23
    29ae:	b0 f0       	brcs	.+44     	; 0x29dc <realloc+0x68>
    29b0:	05 30       	cpi	r16, 0x05	; 5
    29b2:	11 05       	cpc	r17, r1
    29b4:	08 f4       	brcc	.+2      	; 0x29b8 <realloc+0x44>
    29b6:	9b c0       	rjmp	.+310    	; 0x2aee <realloc+0x17a>
    29b8:	c8 01       	movw	r24, r16
    29ba:	04 97       	sbiw	r24, 0x04	; 4
    29bc:	86 17       	cp	r24, r22
    29be:	97 07       	cpc	r25, r23
    29c0:	08 f4       	brcc	.+2      	; 0x29c4 <realloc+0x50>
    29c2:	95 c0       	rjmp	.+298    	; 0x2aee <realloc+0x17a>
    29c4:	02 50       	subi	r16, 0x02	; 2
    29c6:	11 09       	sbc	r17, r1
    29c8:	06 1b       	sub	r16, r22
    29ca:	17 0b       	sbc	r17, r23
    29cc:	01 93       	st	Z+, r16
    29ce:	11 93       	st	Z+, r17
    29d0:	6d 93       	st	X+, r22
    29d2:	7c 93       	st	X, r23
    29d4:	cf 01       	movw	r24, r30
    29d6:	0e 94 31 14 	call	0x2862	; 0x2862 <free>
    29da:	89 c0       	rjmp	.+274    	; 0x2aee <realloc+0x17a>
    29dc:	5b 01       	movw	r10, r22
    29de:	a0 1a       	sub	r10, r16
    29e0:	b1 0a       	sbc	r11, r17
    29e2:	4c 01       	movw	r8, r24
    29e4:	80 0e       	add	r8, r16
    29e6:	91 1e       	adc	r9, r17
    29e8:	a0 91 49 01 	lds	r26, 0x0149	; 0x800149 <__flp>
    29ec:	b0 91 4a 01 	lds	r27, 0x014A	; 0x80014a <__flp+0x1>
    29f0:	61 2c       	mov	r6, r1
    29f2:	71 2c       	mov	r7, r1
    29f4:	e1 2c       	mov	r14, r1
    29f6:	f1 2c       	mov	r15, r1
    29f8:	10 97       	sbiw	r26, 0x00	; 0
    29fa:	09 f4       	brne	.+2      	; 0x29fe <realloc+0x8a>
    29fc:	46 c0       	rjmp	.+140    	; 0x2a8a <realloc+0x116>
    29fe:	8d 91       	ld	r24, X+
    2a00:	9c 91       	ld	r25, X
    2a02:	11 97       	sbiw	r26, 0x01	; 1
    2a04:	a8 15       	cp	r26, r8
    2a06:	b9 05       	cpc	r27, r9
    2a08:	b1 f5       	brne	.+108    	; 0x2a76 <realloc+0x102>
    2a0a:	6c 01       	movw	r12, r24
    2a0c:	42 e0       	ldi	r20, 0x02	; 2
    2a0e:	c4 0e       	add	r12, r20
    2a10:	d1 1c       	adc	r13, r1
    2a12:	ca 14       	cp	r12, r10
    2a14:	db 04       	cpc	r13, r11
    2a16:	78 f1       	brcs	.+94     	; 0x2a76 <realloc+0x102>
    2a18:	4c 01       	movw	r8, r24
    2a1a:	8a 18       	sub	r8, r10
    2a1c:	9b 08       	sbc	r9, r11
    2a1e:	64 01       	movw	r12, r8
    2a20:	42 e0       	ldi	r20, 0x02	; 2
    2a22:	c4 0e       	add	r12, r20
    2a24:	d1 1c       	adc	r13, r1
    2a26:	12 96       	adiw	r26, 0x02	; 2
    2a28:	bc 90       	ld	r11, X
    2a2a:	12 97       	sbiw	r26, 0x02	; 2
    2a2c:	13 96       	adiw	r26, 0x03	; 3
    2a2e:	ac 91       	ld	r26, X
    2a30:	b5 e0       	ldi	r27, 0x05	; 5
    2a32:	cb 16       	cp	r12, r27
    2a34:	d1 04       	cpc	r13, r1
    2a36:	40 f0       	brcs	.+16     	; 0x2a48 <realloc+0xd4>
    2a38:	b2 82       	std	Z+2, r11	; 0x02
    2a3a:	a3 83       	std	Z+3, r26	; 0x03
    2a3c:	91 82       	std	Z+1, r9	; 0x01
    2a3e:	80 82       	st	Z, r8
    2a40:	d9 01       	movw	r26, r18
    2a42:	6d 93       	st	X+, r22
    2a44:	7c 93       	st	X, r23
    2a46:	09 c0       	rjmp	.+18     	; 0x2a5a <realloc+0xe6>
    2a48:	0e 5f       	subi	r16, 0xFE	; 254
    2a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4c:	80 0f       	add	r24, r16
    2a4e:	91 1f       	adc	r25, r17
    2a50:	f9 01       	movw	r30, r18
    2a52:	91 83       	std	Z+1, r25	; 0x01
    2a54:	80 83       	st	Z, r24
    2a56:	eb 2d       	mov	r30, r11
    2a58:	fa 2f       	mov	r31, r26
    2a5a:	e1 14       	cp	r14, r1
    2a5c:	f1 04       	cpc	r15, r1
    2a5e:	31 f0       	breq	.+12     	; 0x2a6c <realloc+0xf8>
    2a60:	d7 01       	movw	r26, r14
    2a62:	13 96       	adiw	r26, 0x03	; 3
    2a64:	fc 93       	st	X, r31
    2a66:	ee 93       	st	-X, r30
    2a68:	12 97       	sbiw	r26, 0x02	; 2
    2a6a:	41 c0       	rjmp	.+130    	; 0x2aee <realloc+0x17a>
    2a6c:	f0 93 4a 01 	sts	0x014A, r31	; 0x80014a <__flp+0x1>
    2a70:	e0 93 49 01 	sts	0x0149, r30	; 0x800149 <__flp>
    2a74:	3c c0       	rjmp	.+120    	; 0x2aee <realloc+0x17a>
    2a76:	68 16       	cp	r6, r24
    2a78:	79 06       	cpc	r7, r25
    2a7a:	08 f4       	brcc	.+2      	; 0x2a7e <realloc+0x10a>
    2a7c:	3c 01       	movw	r6, r24
    2a7e:	7d 01       	movw	r14, r26
    2a80:	12 96       	adiw	r26, 0x02	; 2
    2a82:	0d 90       	ld	r0, X+
    2a84:	bc 91       	ld	r27, X
    2a86:	a0 2d       	mov	r26, r0
    2a88:	b7 cf       	rjmp	.-146    	; 0x29f8 <realloc+0x84>
    2a8a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__brkval>
    2a8e:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <__brkval+0x1>
    2a92:	88 16       	cp	r8, r24
    2a94:	99 06       	cpc	r9, r25
    2a96:	e1 f4       	brne	.+56     	; 0x2ad0 <realloc+0x15c>
    2a98:	66 16       	cp	r6, r22
    2a9a:	77 06       	cpc	r7, r23
    2a9c:	c8 f4       	brcc	.+50     	; 0x2ad0 <realloc+0x15c>
    2a9e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    2aa2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
    2aa6:	00 97       	sbiw	r24, 0x00	; 0
    2aa8:	41 f4       	brne	.+16     	; 0x2aba <realloc+0x146>
    2aaa:	8d b7       	in	r24, 0x3d	; 61
    2aac:	9e b7       	in	r25, 0x3e	; 62
    2aae:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    2ab2:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    2ab6:	84 1b       	sub	r24, r20
    2ab8:	95 0b       	sbc	r25, r21
    2aba:	e8 17       	cp	r30, r24
    2abc:	f9 07       	cpc	r31, r25
    2abe:	c8 f4       	brcc	.+50     	; 0x2af2 <realloc+0x17e>
    2ac0:	f0 93 48 01 	sts	0x0148, r31	; 0x800148 <__brkval+0x1>
    2ac4:	e0 93 47 01 	sts	0x0147, r30	; 0x800147 <__brkval>
    2ac8:	f9 01       	movw	r30, r18
    2aca:	71 83       	std	Z+1, r23	; 0x01
    2acc:	60 83       	st	Z, r22
    2ace:	0f c0       	rjmp	.+30     	; 0x2aee <realloc+0x17a>
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	0e 94 99 13 	call	0x2732	; 0x2732 <malloc>
    2ad6:	7c 01       	movw	r14, r24
    2ad8:	00 97       	sbiw	r24, 0x00	; 0
    2ada:	59 f0       	breq	.+22     	; 0x2af2 <realloc+0x17e>
    2adc:	a8 01       	movw	r20, r16
    2ade:	be 01       	movw	r22, r28
    2ae0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <memcpy>
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	0e 94 31 14 	call	0x2862	; 0x2862 <free>
    2aea:	c7 01       	movw	r24, r14
    2aec:	04 c0       	rjmp	.+8      	; 0x2af6 <realloc+0x182>
    2aee:	ce 01       	movw	r24, r28
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <realloc+0x182>
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	cd b7       	in	r28, 0x3d	; 61
    2af8:	de b7       	in	r29, 0x3e	; 62
    2afa:	ee e0       	ldi	r30, 0x0E	; 14
    2afc:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__epilogue_restores__+0x8>

00002b00 <memcmp>:
    2b00:	fb 01       	movw	r30, r22
    2b02:	dc 01       	movw	r26, r24
    2b04:	04 c0       	rjmp	.+8      	; 0x2b0e <memcmp+0xe>
    2b06:	8d 91       	ld	r24, X+
    2b08:	01 90       	ld	r0, Z+
    2b0a:	80 19       	sub	r24, r0
    2b0c:	21 f4       	brne	.+8      	; 0x2b16 <memcmp+0x16>
    2b0e:	41 50       	subi	r20, 0x01	; 1
    2b10:	50 40       	sbci	r21, 0x00	; 0
    2b12:	c8 f7       	brcc	.-14     	; 0x2b06 <memcmp+0x6>
    2b14:	88 1b       	sub	r24, r24
    2b16:	99 0b       	sbc	r25, r25
    2b18:	08 95       	ret

00002b1a <memcpy>:
    2b1a:	fb 01       	movw	r30, r22
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <memcpy+0xa>
    2b20:	01 90       	ld	r0, Z+
    2b22:	0d 92       	st	X+, r0
    2b24:	41 50       	subi	r20, 0x01	; 1
    2b26:	50 40       	sbci	r21, 0x00	; 0
    2b28:	d8 f7       	brcc	.-10     	; 0x2b20 <memcpy+0x6>
    2b2a:	08 95       	ret

00002b2c <dtoa_prf>:
    2b2c:	a9 e0       	ldi	r26, 0x09	; 9
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	ec e9       	ldi	r30, 0x9C	; 156
    2b32:	f5 e1       	ldi	r31, 0x15	; 21
    2b34:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__+0xc>
    2b38:	6a 01       	movw	r12, r20
    2b3a:	12 2f       	mov	r17, r18
    2b3c:	b0 2e       	mov	r11, r16
    2b3e:	2b e3       	ldi	r18, 0x3B	; 59
    2b40:	20 17       	cp	r18, r16
    2b42:	20 f0       	brcs	.+8      	; 0x2b4c <dtoa_prf+0x20>
    2b44:	ff 24       	eor	r15, r15
    2b46:	f3 94       	inc	r15
    2b48:	f0 0e       	add	r15, r16
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <dtoa_prf+0x24>
    2b4c:	2c e3       	ldi	r18, 0x3C	; 60
    2b4e:	f2 2e       	mov	r15, r18
    2b50:	0f 2d       	mov	r16, r15
    2b52:	27 e0       	ldi	r18, 0x07	; 7
    2b54:	ae 01       	movw	r20, r28
    2b56:	4f 5f       	subi	r20, 0xFF	; 255
    2b58:	5f 4f       	sbci	r21, 0xFF	; 255
    2b5a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__ftoa_engine>
    2b5e:	bc 01       	movw	r22, r24
    2b60:	49 81       	ldd	r20, Y+1	; 0x01
    2b62:	84 2f       	mov	r24, r20
    2b64:	89 70       	andi	r24, 0x09	; 9
    2b66:	81 30       	cpi	r24, 0x01	; 1
    2b68:	31 f0       	breq	.+12     	; 0x2b76 <dtoa_prf+0x4a>
    2b6a:	e1 fc       	sbrc	r14, 1
    2b6c:	06 c0       	rjmp	.+12     	; 0x2b7a <dtoa_prf+0x4e>
    2b6e:	e0 fe       	sbrs	r14, 0
    2b70:	06 c0       	rjmp	.+12     	; 0x2b7e <dtoa_prf+0x52>
    2b72:	90 e2       	ldi	r25, 0x20	; 32
    2b74:	05 c0       	rjmp	.+10     	; 0x2b80 <dtoa_prf+0x54>
    2b76:	9d e2       	ldi	r25, 0x2D	; 45
    2b78:	03 c0       	rjmp	.+6      	; 0x2b80 <dtoa_prf+0x54>
    2b7a:	9b e2       	ldi	r25, 0x2B	; 43
    2b7c:	01 c0       	rjmp	.+2      	; 0x2b80 <dtoa_prf+0x54>
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	5e 2d       	mov	r21, r14
    2b82:	50 71       	andi	r21, 0x10	; 16
    2b84:	43 ff       	sbrs	r20, 3
    2b86:	3c c0       	rjmp	.+120    	; 0x2c00 <dtoa_prf+0xd4>
    2b88:	91 11       	cpse	r25, r1
    2b8a:	02 c0       	rjmp	.+4      	; 0x2b90 <dtoa_prf+0x64>
    2b8c:	83 e0       	ldi	r24, 0x03	; 3
    2b8e:	01 c0       	rjmp	.+2      	; 0x2b92 <dtoa_prf+0x66>
    2b90:	84 e0       	ldi	r24, 0x04	; 4
    2b92:	81 17       	cp	r24, r17
    2b94:	18 f4       	brcc	.+6      	; 0x2b9c <dtoa_prf+0x70>
    2b96:	21 2f       	mov	r18, r17
    2b98:	28 1b       	sub	r18, r24
    2b9a:	01 c0       	rjmp	.+2      	; 0x2b9e <dtoa_prf+0x72>
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	51 11       	cpse	r21, r1
    2ba0:	0b c0       	rjmp	.+22     	; 0x2bb8 <dtoa_prf+0x8c>
    2ba2:	f6 01       	movw	r30, r12
    2ba4:	82 2f       	mov	r24, r18
    2ba6:	30 e2       	ldi	r19, 0x20	; 32
    2ba8:	88 23       	and	r24, r24
    2baa:	19 f0       	breq	.+6      	; 0x2bb2 <dtoa_prf+0x86>
    2bac:	31 93       	st	Z+, r19
    2bae:	81 50       	subi	r24, 0x01	; 1
    2bb0:	fb cf       	rjmp	.-10     	; 0x2ba8 <dtoa_prf+0x7c>
    2bb2:	c2 0e       	add	r12, r18
    2bb4:	d1 1c       	adc	r13, r1
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	99 23       	and	r25, r25
    2bba:	29 f0       	breq	.+10     	; 0x2bc6 <dtoa_prf+0x9a>
    2bbc:	d6 01       	movw	r26, r12
    2bbe:	9c 93       	st	X, r25
    2bc0:	f6 01       	movw	r30, r12
    2bc2:	31 96       	adiw	r30, 0x01	; 1
    2bc4:	6f 01       	movw	r12, r30
    2bc6:	c6 01       	movw	r24, r12
    2bc8:	03 96       	adiw	r24, 0x03	; 3
    2bca:	e2 fe       	sbrs	r14, 2
    2bcc:	0a c0       	rjmp	.+20     	; 0x2be2 <dtoa_prf+0xb6>
    2bce:	3e e4       	ldi	r19, 0x4E	; 78
    2bd0:	d6 01       	movw	r26, r12
    2bd2:	3c 93       	st	X, r19
    2bd4:	41 e4       	ldi	r20, 0x41	; 65
    2bd6:	11 96       	adiw	r26, 0x01	; 1
    2bd8:	4c 93       	st	X, r20
    2bda:	11 97       	sbiw	r26, 0x01	; 1
    2bdc:	12 96       	adiw	r26, 0x02	; 2
    2bde:	3c 93       	st	X, r19
    2be0:	06 c0       	rjmp	.+12     	; 0x2bee <dtoa_prf+0xc2>
    2be2:	3e e6       	ldi	r19, 0x6E	; 110
    2be4:	f6 01       	movw	r30, r12
    2be6:	30 83       	st	Z, r19
    2be8:	41 e6       	ldi	r20, 0x61	; 97
    2bea:	41 83       	std	Z+1, r20	; 0x01
    2bec:	32 83       	std	Z+2, r19	; 0x02
    2bee:	fc 01       	movw	r30, r24
    2bf0:	32 2f       	mov	r19, r18
    2bf2:	40 e2       	ldi	r20, 0x20	; 32
    2bf4:	33 23       	and	r19, r19
    2bf6:	09 f4       	brne	.+2      	; 0x2bfa <dtoa_prf+0xce>
    2bf8:	42 c0       	rjmp	.+132    	; 0x2c7e <dtoa_prf+0x152>
    2bfa:	41 93       	st	Z+, r20
    2bfc:	31 50       	subi	r19, 0x01	; 1
    2bfe:	fa cf       	rjmp	.-12     	; 0x2bf4 <dtoa_prf+0xc8>
    2c00:	42 ff       	sbrs	r20, 2
    2c02:	44 c0       	rjmp	.+136    	; 0x2c8c <dtoa_prf+0x160>
    2c04:	91 11       	cpse	r25, r1
    2c06:	02 c0       	rjmp	.+4      	; 0x2c0c <dtoa_prf+0xe0>
    2c08:	83 e0       	ldi	r24, 0x03	; 3
    2c0a:	01 c0       	rjmp	.+2      	; 0x2c0e <dtoa_prf+0xe2>
    2c0c:	84 e0       	ldi	r24, 0x04	; 4
    2c0e:	81 17       	cp	r24, r17
    2c10:	18 f4       	brcc	.+6      	; 0x2c18 <dtoa_prf+0xec>
    2c12:	21 2f       	mov	r18, r17
    2c14:	28 1b       	sub	r18, r24
    2c16:	01 c0       	rjmp	.+2      	; 0x2c1a <dtoa_prf+0xee>
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	51 11       	cpse	r21, r1
    2c1c:	0b c0       	rjmp	.+22     	; 0x2c34 <dtoa_prf+0x108>
    2c1e:	f6 01       	movw	r30, r12
    2c20:	82 2f       	mov	r24, r18
    2c22:	30 e2       	ldi	r19, 0x20	; 32
    2c24:	88 23       	and	r24, r24
    2c26:	19 f0       	breq	.+6      	; 0x2c2e <dtoa_prf+0x102>
    2c28:	31 93       	st	Z+, r19
    2c2a:	81 50       	subi	r24, 0x01	; 1
    2c2c:	fb cf       	rjmp	.-10     	; 0x2c24 <dtoa_prf+0xf8>
    2c2e:	c2 0e       	add	r12, r18
    2c30:	d1 1c       	adc	r13, r1
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	99 23       	and	r25, r25
    2c36:	29 f0       	breq	.+10     	; 0x2c42 <dtoa_prf+0x116>
    2c38:	d6 01       	movw	r26, r12
    2c3a:	9c 93       	st	X, r25
    2c3c:	f6 01       	movw	r30, r12
    2c3e:	31 96       	adiw	r30, 0x01	; 1
    2c40:	6f 01       	movw	r12, r30
    2c42:	c6 01       	movw	r24, r12
    2c44:	03 96       	adiw	r24, 0x03	; 3
    2c46:	e2 fe       	sbrs	r14, 2
    2c48:	0b c0       	rjmp	.+22     	; 0x2c60 <dtoa_prf+0x134>
    2c4a:	39 e4       	ldi	r19, 0x49	; 73
    2c4c:	d6 01       	movw	r26, r12
    2c4e:	3c 93       	st	X, r19
    2c50:	3e e4       	ldi	r19, 0x4E	; 78
    2c52:	11 96       	adiw	r26, 0x01	; 1
    2c54:	3c 93       	st	X, r19
    2c56:	11 97       	sbiw	r26, 0x01	; 1
    2c58:	36 e4       	ldi	r19, 0x46	; 70
    2c5a:	12 96       	adiw	r26, 0x02	; 2
    2c5c:	3c 93       	st	X, r19
    2c5e:	07 c0       	rjmp	.+14     	; 0x2c6e <dtoa_prf+0x142>
    2c60:	39 e6       	ldi	r19, 0x69	; 105
    2c62:	f6 01       	movw	r30, r12
    2c64:	30 83       	st	Z, r19
    2c66:	3e e6       	ldi	r19, 0x6E	; 110
    2c68:	31 83       	std	Z+1, r19	; 0x01
    2c6a:	36 e6       	ldi	r19, 0x66	; 102
    2c6c:	32 83       	std	Z+2, r19	; 0x02
    2c6e:	fc 01       	movw	r30, r24
    2c70:	32 2f       	mov	r19, r18
    2c72:	40 e2       	ldi	r20, 0x20	; 32
    2c74:	33 23       	and	r19, r19
    2c76:	19 f0       	breq	.+6      	; 0x2c7e <dtoa_prf+0x152>
    2c78:	41 93       	st	Z+, r20
    2c7a:	31 50       	subi	r19, 0x01	; 1
    2c7c:	fb cf       	rjmp	.-10     	; 0x2c74 <dtoa_prf+0x148>
    2c7e:	fc 01       	movw	r30, r24
    2c80:	e2 0f       	add	r30, r18
    2c82:	f1 1d       	adc	r31, r1
    2c84:	10 82       	st	Z, r1
    2c86:	8e ef       	ldi	r24, 0xFE	; 254
    2c88:	9f ef       	ldi	r25, 0xFF	; 255
    2c8a:	a6 c0       	rjmp	.+332    	; 0x2dd8 <dtoa_prf+0x2ac>
    2c8c:	21 e0       	ldi	r18, 0x01	; 1
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	91 11       	cpse	r25, r1
    2c92:	02 c0       	rjmp	.+4      	; 0x2c98 <dtoa_prf+0x16c>
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	16 16       	cp	r1, r22
    2c9a:	17 06       	cpc	r1, r23
    2c9c:	1c f4       	brge	.+6      	; 0x2ca4 <dtoa_prf+0x178>
    2c9e:	fb 01       	movw	r30, r22
    2ca0:	31 96       	adiw	r30, 0x01	; 1
    2ca2:	02 c0       	rjmp	.+4      	; 0x2ca8 <dtoa_prf+0x17c>
    2ca4:	e1 e0       	ldi	r30, 0x01	; 1
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	2e 0f       	add	r18, r30
    2caa:	3f 1f       	adc	r19, r31
    2cac:	bb 20       	and	r11, r11
    2cae:	21 f0       	breq	.+8      	; 0x2cb8 <dtoa_prf+0x18c>
    2cb0:	eb 2d       	mov	r30, r11
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	31 96       	adiw	r30, 0x01	; 1
    2cb6:	02 c0       	rjmp	.+4      	; 0x2cbc <dtoa_prf+0x190>
    2cb8:	e0 e0       	ldi	r30, 0x00	; 0
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	2e 0f       	add	r18, r30
    2cbe:	3f 1f       	adc	r19, r31
    2cc0:	e1 2f       	mov	r30, r17
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	2e 17       	cp	r18, r30
    2cc6:	3f 07       	cpc	r19, r31
    2cc8:	1c f4       	brge	.+6      	; 0x2cd0 <dtoa_prf+0x1a4>
    2cca:	12 1b       	sub	r17, r18
    2ccc:	21 2f       	mov	r18, r17
    2cce:	01 c0       	rjmp	.+2      	; 0x2cd2 <dtoa_prf+0x1a6>
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	8e 2d       	mov	r24, r14
    2cd4:	88 71       	andi	r24, 0x18	; 24
    2cd6:	59 f4       	brne	.+22     	; 0x2cee <dtoa_prf+0x1c2>
    2cd8:	f6 01       	movw	r30, r12
    2cda:	82 2f       	mov	r24, r18
    2cdc:	30 e2       	ldi	r19, 0x20	; 32
    2cde:	88 23       	and	r24, r24
    2ce0:	19 f0       	breq	.+6      	; 0x2ce8 <dtoa_prf+0x1bc>
    2ce2:	31 93       	st	Z+, r19
    2ce4:	81 50       	subi	r24, 0x01	; 1
    2ce6:	fb cf       	rjmp	.-10     	; 0x2cde <dtoa_prf+0x1b2>
    2ce8:	c2 0e       	add	r12, r18
    2cea:	d1 1c       	adc	r13, r1
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	99 23       	and	r25, r25
    2cf0:	29 f0       	breq	.+10     	; 0x2cfc <dtoa_prf+0x1d0>
    2cf2:	d6 01       	movw	r26, r12
    2cf4:	9c 93       	st	X, r25
    2cf6:	f6 01       	movw	r30, r12
    2cf8:	31 96       	adiw	r30, 0x01	; 1
    2cfa:	6f 01       	movw	r12, r30
    2cfc:	51 11       	cpse	r21, r1
    2cfe:	0b c0       	rjmp	.+22     	; 0x2d16 <dtoa_prf+0x1ea>
    2d00:	f6 01       	movw	r30, r12
    2d02:	82 2f       	mov	r24, r18
    2d04:	90 e3       	ldi	r25, 0x30	; 48
    2d06:	88 23       	and	r24, r24
    2d08:	19 f0       	breq	.+6      	; 0x2d10 <dtoa_prf+0x1e4>
    2d0a:	91 93       	st	Z+, r25
    2d0c:	81 50       	subi	r24, 0x01	; 1
    2d0e:	fb cf       	rjmp	.-10     	; 0x2d06 <dtoa_prf+0x1da>
    2d10:	c2 0e       	add	r12, r18
    2d12:	d1 1c       	adc	r13, r1
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	0f 2d       	mov	r16, r15
    2d18:	06 0f       	add	r16, r22
    2d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1c:	34 2f       	mov	r19, r20
    2d1e:	30 71       	andi	r19, 0x10	; 16
    2d20:	44 ff       	sbrs	r20, 4
    2d22:	03 c0       	rjmp	.+6      	; 0x2d2a <dtoa_prf+0x1fe>
    2d24:	91 33       	cpi	r25, 0x31	; 49
    2d26:	09 f4       	brne	.+2      	; 0x2d2a <dtoa_prf+0x1fe>
    2d28:	01 50       	subi	r16, 0x01	; 1
    2d2a:	10 16       	cp	r1, r16
    2d2c:	24 f4       	brge	.+8      	; 0x2d36 <dtoa_prf+0x20a>
    2d2e:	09 30       	cpi	r16, 0x09	; 9
    2d30:	18 f0       	brcs	.+6      	; 0x2d38 <dtoa_prf+0x20c>
    2d32:	08 e0       	ldi	r16, 0x08	; 8
    2d34:	01 c0       	rjmp	.+2      	; 0x2d38 <dtoa_prf+0x20c>
    2d36:	01 e0       	ldi	r16, 0x01	; 1
    2d38:	ab 01       	movw	r20, r22
    2d3a:	77 ff       	sbrs	r23, 7
    2d3c:	02 c0       	rjmp	.+4      	; 0x2d42 <dtoa_prf+0x216>
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	50 e0       	ldi	r21, 0x00	; 0
    2d42:	fb 01       	movw	r30, r22
    2d44:	e4 1b       	sub	r30, r20
    2d46:	f5 0b       	sbc	r31, r21
    2d48:	a1 e0       	ldi	r26, 0x01	; 1
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	ac 0f       	add	r26, r28
    2d4e:	bd 1f       	adc	r27, r29
    2d50:	ea 0f       	add	r30, r26
    2d52:	fb 1f       	adc	r31, r27
    2d54:	8e e2       	ldi	r24, 0x2E	; 46
    2d56:	a8 2e       	mov	r10, r24
    2d58:	4b 01       	movw	r8, r22
    2d5a:	80 1a       	sub	r8, r16
    2d5c:	91 08       	sbc	r9, r1
    2d5e:	0b 2d       	mov	r16, r11
    2d60:	10 e0       	ldi	r17, 0x00	; 0
    2d62:	11 95       	neg	r17
    2d64:	01 95       	neg	r16
    2d66:	11 09       	sbc	r17, r1
    2d68:	4f 3f       	cpi	r20, 0xFF	; 255
    2d6a:	bf ef       	ldi	r27, 0xFF	; 255
    2d6c:	5b 07       	cpc	r21, r27
    2d6e:	21 f4       	brne	.+8      	; 0x2d78 <dtoa_prf+0x24c>
    2d70:	d6 01       	movw	r26, r12
    2d72:	ac 92       	st	X, r10
    2d74:	11 96       	adiw	r26, 0x01	; 1
    2d76:	6d 01       	movw	r12, r26
    2d78:	64 17       	cp	r22, r20
    2d7a:	75 07       	cpc	r23, r21
    2d7c:	2c f0       	brlt	.+10     	; 0x2d88 <dtoa_prf+0x25c>
    2d7e:	84 16       	cp	r8, r20
    2d80:	95 06       	cpc	r9, r21
    2d82:	14 f4       	brge	.+4      	; 0x2d88 <dtoa_prf+0x25c>
    2d84:	81 81       	ldd	r24, Z+1	; 0x01
    2d86:	01 c0       	rjmp	.+2      	; 0x2d8a <dtoa_prf+0x25e>
    2d88:	80 e3       	ldi	r24, 0x30	; 48
    2d8a:	41 50       	subi	r20, 0x01	; 1
    2d8c:	51 09       	sbc	r21, r1
    2d8e:	31 96       	adiw	r30, 0x01	; 1
    2d90:	d6 01       	movw	r26, r12
    2d92:	11 96       	adiw	r26, 0x01	; 1
    2d94:	7d 01       	movw	r14, r26
    2d96:	40 17       	cp	r20, r16
    2d98:	51 07       	cpc	r21, r17
    2d9a:	24 f0       	brlt	.+8      	; 0x2da4 <dtoa_prf+0x278>
    2d9c:	d6 01       	movw	r26, r12
    2d9e:	8c 93       	st	X, r24
    2da0:	67 01       	movw	r12, r14
    2da2:	e2 cf       	rjmp	.-60     	; 0x2d68 <dtoa_prf+0x23c>
    2da4:	64 17       	cp	r22, r20
    2da6:	75 07       	cpc	r23, r21
    2da8:	39 f4       	brne	.+14     	; 0x2db8 <dtoa_prf+0x28c>
    2daa:	96 33       	cpi	r25, 0x36	; 54
    2dac:	20 f4       	brcc	.+8      	; 0x2db6 <dtoa_prf+0x28a>
    2dae:	95 33       	cpi	r25, 0x35	; 53
    2db0:	19 f4       	brne	.+6      	; 0x2db8 <dtoa_prf+0x28c>
    2db2:	31 11       	cpse	r19, r1
    2db4:	01 c0       	rjmp	.+2      	; 0x2db8 <dtoa_prf+0x28c>
    2db6:	81 e3       	ldi	r24, 0x31	; 49
    2db8:	f6 01       	movw	r30, r12
    2dba:	80 83       	st	Z, r24
    2dbc:	f7 01       	movw	r30, r14
    2dbe:	82 2f       	mov	r24, r18
    2dc0:	90 e2       	ldi	r25, 0x20	; 32
    2dc2:	88 23       	and	r24, r24
    2dc4:	19 f0       	breq	.+6      	; 0x2dcc <dtoa_prf+0x2a0>
    2dc6:	91 93       	st	Z+, r25
    2dc8:	81 50       	subi	r24, 0x01	; 1
    2dca:	fb cf       	rjmp	.-10     	; 0x2dc2 <dtoa_prf+0x296>
    2dcc:	f7 01       	movw	r30, r14
    2dce:	e2 0f       	add	r30, r18
    2dd0:	f1 1d       	adc	r31, r1
    2dd2:	10 82       	st	Z, r1
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	29 96       	adiw	r28, 0x09	; 9
    2dda:	ec e0       	ldi	r30, 0x0C	; 12
    2ddc:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__+0xc>

00002de0 <__ftoa_engine>:
    2de0:	28 30       	cpi	r18, 0x08	; 8
    2de2:	08 f0       	brcs	.+2      	; 0x2de6 <__ftoa_engine+0x6>
    2de4:	27 e0       	ldi	r18, 0x07	; 7
    2de6:	33 27       	eor	r19, r19
    2de8:	da 01       	movw	r26, r20
    2dea:	99 0f       	add	r25, r25
    2dec:	31 1d       	adc	r19, r1
    2dee:	87 fd       	sbrc	r24, 7
    2df0:	91 60       	ori	r25, 0x01	; 1
    2df2:	00 96       	adiw	r24, 0x00	; 0
    2df4:	61 05       	cpc	r22, r1
    2df6:	71 05       	cpc	r23, r1
    2df8:	39 f4       	brne	.+14     	; 0x2e08 <__ftoa_engine+0x28>
    2dfa:	32 60       	ori	r19, 0x02	; 2
    2dfc:	2e 5f       	subi	r18, 0xFE	; 254
    2dfe:	3d 93       	st	X+, r19
    2e00:	30 e3       	ldi	r19, 0x30	; 48
    2e02:	2a 95       	dec	r18
    2e04:	e1 f7       	brne	.-8      	; 0x2dfe <__ftoa_engine+0x1e>
    2e06:	08 95       	ret
    2e08:	9f 3f       	cpi	r25, 0xFF	; 255
    2e0a:	30 f0       	brcs	.+12     	; 0x2e18 <__ftoa_engine+0x38>
    2e0c:	80 38       	cpi	r24, 0x80	; 128
    2e0e:	71 05       	cpc	r23, r1
    2e10:	61 05       	cpc	r22, r1
    2e12:	09 f0       	breq	.+2      	; 0x2e16 <__ftoa_engine+0x36>
    2e14:	3c 5f       	subi	r19, 0xFC	; 252
    2e16:	3c 5f       	subi	r19, 0xFC	; 252
    2e18:	3d 93       	st	X+, r19
    2e1a:	91 30       	cpi	r25, 0x01	; 1
    2e1c:	08 f0       	brcs	.+2      	; 0x2e20 <__ftoa_engine+0x40>
    2e1e:	80 68       	ori	r24, 0x80	; 128
    2e20:	91 1d       	adc	r25, r1
    2e22:	df 93       	push	r29
    2e24:	cf 93       	push	r28
    2e26:	1f 93       	push	r17
    2e28:	0f 93       	push	r16
    2e2a:	ff 92       	push	r15
    2e2c:	ef 92       	push	r14
    2e2e:	19 2f       	mov	r17, r25
    2e30:	98 7f       	andi	r25, 0xF8	; 248
    2e32:	96 95       	lsr	r25
    2e34:	e9 2f       	mov	r30, r25
    2e36:	96 95       	lsr	r25
    2e38:	96 95       	lsr	r25
    2e3a:	e9 0f       	add	r30, r25
    2e3c:	ff 27       	eor	r31, r31
    2e3e:	e8 5e       	subi	r30, 0xE8	; 232
    2e40:	fe 4f       	sbci	r31, 0xFE	; 254
    2e42:	99 27       	eor	r25, r25
    2e44:	33 27       	eor	r19, r19
    2e46:	ee 24       	eor	r14, r14
    2e48:	ff 24       	eor	r15, r15
    2e4a:	a7 01       	movw	r20, r14
    2e4c:	e7 01       	movw	r28, r14
    2e4e:	05 90       	lpm	r0, Z+
    2e50:	08 94       	sec
    2e52:	07 94       	ror	r0
    2e54:	28 f4       	brcc	.+10     	; 0x2e60 <__ftoa_engine+0x80>
    2e56:	36 0f       	add	r19, r22
    2e58:	e7 1e       	adc	r14, r23
    2e5a:	f8 1e       	adc	r15, r24
    2e5c:	49 1f       	adc	r20, r25
    2e5e:	51 1d       	adc	r21, r1
    2e60:	66 0f       	add	r22, r22
    2e62:	77 1f       	adc	r23, r23
    2e64:	88 1f       	adc	r24, r24
    2e66:	99 1f       	adc	r25, r25
    2e68:	06 94       	lsr	r0
    2e6a:	a1 f7       	brne	.-24     	; 0x2e54 <__ftoa_engine+0x74>
    2e6c:	05 90       	lpm	r0, Z+
    2e6e:	07 94       	ror	r0
    2e70:	28 f4       	brcc	.+10     	; 0x2e7c <__ftoa_engine+0x9c>
    2e72:	e7 0e       	add	r14, r23
    2e74:	f8 1e       	adc	r15, r24
    2e76:	49 1f       	adc	r20, r25
    2e78:	56 1f       	adc	r21, r22
    2e7a:	c1 1d       	adc	r28, r1
    2e7c:	77 0f       	add	r23, r23
    2e7e:	88 1f       	adc	r24, r24
    2e80:	99 1f       	adc	r25, r25
    2e82:	66 1f       	adc	r22, r22
    2e84:	06 94       	lsr	r0
    2e86:	a1 f7       	brne	.-24     	; 0x2e70 <__ftoa_engine+0x90>
    2e88:	05 90       	lpm	r0, Z+
    2e8a:	07 94       	ror	r0
    2e8c:	28 f4       	brcc	.+10     	; 0x2e98 <__ftoa_engine+0xb8>
    2e8e:	f8 0e       	add	r15, r24
    2e90:	49 1f       	adc	r20, r25
    2e92:	56 1f       	adc	r21, r22
    2e94:	c7 1f       	adc	r28, r23
    2e96:	d1 1d       	adc	r29, r1
    2e98:	88 0f       	add	r24, r24
    2e9a:	99 1f       	adc	r25, r25
    2e9c:	66 1f       	adc	r22, r22
    2e9e:	77 1f       	adc	r23, r23
    2ea0:	06 94       	lsr	r0
    2ea2:	a1 f7       	brne	.-24     	; 0x2e8c <__ftoa_engine+0xac>
    2ea4:	05 90       	lpm	r0, Z+
    2ea6:	07 94       	ror	r0
    2ea8:	20 f4       	brcc	.+8      	; 0x2eb2 <__ftoa_engine+0xd2>
    2eaa:	49 0f       	add	r20, r25
    2eac:	56 1f       	adc	r21, r22
    2eae:	c7 1f       	adc	r28, r23
    2eb0:	d8 1f       	adc	r29, r24
    2eb2:	99 0f       	add	r25, r25
    2eb4:	66 1f       	adc	r22, r22
    2eb6:	77 1f       	adc	r23, r23
    2eb8:	88 1f       	adc	r24, r24
    2eba:	06 94       	lsr	r0
    2ebc:	a9 f7       	brne	.-22     	; 0x2ea8 <__ftoa_engine+0xc8>
    2ebe:	84 91       	lpm	r24, Z
    2ec0:	10 95       	com	r17
    2ec2:	17 70       	andi	r17, 0x07	; 7
    2ec4:	41 f0       	breq	.+16     	; 0x2ed6 <__ftoa_engine+0xf6>
    2ec6:	d6 95       	lsr	r29
    2ec8:	c7 95       	ror	r28
    2eca:	57 95       	ror	r21
    2ecc:	47 95       	ror	r20
    2ece:	f7 94       	ror	r15
    2ed0:	e7 94       	ror	r14
    2ed2:	1a 95       	dec	r17
    2ed4:	c1 f7       	brne	.-16     	; 0x2ec6 <__ftoa_engine+0xe6>
    2ed6:	ee eb       	ldi	r30, 0xBE	; 190
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	68 94       	set
    2edc:	15 90       	lpm	r1, Z+
    2ede:	15 91       	lpm	r17, Z+
    2ee0:	35 91       	lpm	r19, Z+
    2ee2:	65 91       	lpm	r22, Z+
    2ee4:	95 91       	lpm	r25, Z+
    2ee6:	05 90       	lpm	r0, Z+
    2ee8:	7f e2       	ldi	r23, 0x2F	; 47
    2eea:	73 95       	inc	r23
    2eec:	e1 18       	sub	r14, r1
    2eee:	f1 0a       	sbc	r15, r17
    2ef0:	43 0b       	sbc	r20, r19
    2ef2:	56 0b       	sbc	r21, r22
    2ef4:	c9 0b       	sbc	r28, r25
    2ef6:	d0 09       	sbc	r29, r0
    2ef8:	c0 f7       	brcc	.-16     	; 0x2eea <__ftoa_engine+0x10a>
    2efa:	e1 0c       	add	r14, r1
    2efc:	f1 1e       	adc	r15, r17
    2efe:	43 1f       	adc	r20, r19
    2f00:	56 1f       	adc	r21, r22
    2f02:	c9 1f       	adc	r28, r25
    2f04:	d0 1d       	adc	r29, r0
    2f06:	7e f4       	brtc	.+30     	; 0x2f26 <__ftoa_engine+0x146>
    2f08:	70 33       	cpi	r23, 0x30	; 48
    2f0a:	11 f4       	brne	.+4      	; 0x2f10 <__ftoa_engine+0x130>
    2f0c:	8a 95       	dec	r24
    2f0e:	e6 cf       	rjmp	.-52     	; 0x2edc <__ftoa_engine+0xfc>
    2f10:	e8 94       	clt
    2f12:	01 50       	subi	r16, 0x01	; 1
    2f14:	30 f0       	brcs	.+12     	; 0x2f22 <__ftoa_engine+0x142>
    2f16:	08 0f       	add	r16, r24
    2f18:	0a f4       	brpl	.+2      	; 0x2f1c <__ftoa_engine+0x13c>
    2f1a:	00 27       	eor	r16, r16
    2f1c:	02 17       	cp	r16, r18
    2f1e:	08 f4       	brcc	.+2      	; 0x2f22 <__ftoa_engine+0x142>
    2f20:	20 2f       	mov	r18, r16
    2f22:	23 95       	inc	r18
    2f24:	02 2f       	mov	r16, r18
    2f26:	7a 33       	cpi	r23, 0x3A	; 58
    2f28:	28 f0       	brcs	.+10     	; 0x2f34 <__ftoa_engine+0x154>
    2f2a:	79 e3       	ldi	r23, 0x39	; 57
    2f2c:	7d 93       	st	X+, r23
    2f2e:	2a 95       	dec	r18
    2f30:	e9 f7       	brne	.-6      	; 0x2f2c <__ftoa_engine+0x14c>
    2f32:	10 c0       	rjmp	.+32     	; 0x2f54 <__ftoa_engine+0x174>
    2f34:	7d 93       	st	X+, r23
    2f36:	2a 95       	dec	r18
    2f38:	89 f6       	brne	.-94     	; 0x2edc <__ftoa_engine+0xfc>
    2f3a:	06 94       	lsr	r0
    2f3c:	97 95       	ror	r25
    2f3e:	67 95       	ror	r22
    2f40:	37 95       	ror	r19
    2f42:	17 95       	ror	r17
    2f44:	17 94       	ror	r1
    2f46:	e1 18       	sub	r14, r1
    2f48:	f1 0a       	sbc	r15, r17
    2f4a:	43 0b       	sbc	r20, r19
    2f4c:	56 0b       	sbc	r21, r22
    2f4e:	c9 0b       	sbc	r28, r25
    2f50:	d0 09       	sbc	r29, r0
    2f52:	98 f0       	brcs	.+38     	; 0x2f7a <__ftoa_engine+0x19a>
    2f54:	23 95       	inc	r18
    2f56:	7e 91       	ld	r23, -X
    2f58:	73 95       	inc	r23
    2f5a:	7a 33       	cpi	r23, 0x3A	; 58
    2f5c:	08 f0       	brcs	.+2      	; 0x2f60 <__ftoa_engine+0x180>
    2f5e:	70 e3       	ldi	r23, 0x30	; 48
    2f60:	7c 93       	st	X, r23
    2f62:	20 13       	cpse	r18, r16
    2f64:	b8 f7       	brcc	.-18     	; 0x2f54 <__ftoa_engine+0x174>
    2f66:	7e 91       	ld	r23, -X
    2f68:	70 61       	ori	r23, 0x10	; 16
    2f6a:	7d 93       	st	X+, r23
    2f6c:	30 f0       	brcs	.+12     	; 0x2f7a <__ftoa_engine+0x19a>
    2f6e:	83 95       	inc	r24
    2f70:	71 e3       	ldi	r23, 0x31	; 49
    2f72:	7d 93       	st	X+, r23
    2f74:	70 e3       	ldi	r23, 0x30	; 48
    2f76:	2a 95       	dec	r18
    2f78:	e1 f7       	brne	.-8      	; 0x2f72 <__ftoa_engine+0x192>
    2f7a:	11 24       	eor	r1, r1
    2f7c:	ef 90       	pop	r14
    2f7e:	ff 90       	pop	r15
    2f80:	0f 91       	pop	r16
    2f82:	1f 91       	pop	r17
    2f84:	cf 91       	pop	r28
    2f86:	df 91       	pop	r29
    2f88:	99 27       	eor	r25, r25
    2f8a:	87 fd       	sbrc	r24, 7
    2f8c:	90 95       	com	r25
    2f8e:	08 95       	ret

00002f90 <__prologue_saves__>:
    2f90:	2f 92       	push	r2
    2f92:	3f 92       	push	r3
    2f94:	4f 92       	push	r4
    2f96:	5f 92       	push	r5
    2f98:	6f 92       	push	r6
    2f9a:	7f 92       	push	r7
    2f9c:	8f 92       	push	r8
    2f9e:	9f 92       	push	r9
    2fa0:	af 92       	push	r10
    2fa2:	bf 92       	push	r11
    2fa4:	cf 92       	push	r12
    2fa6:	df 92       	push	r13
    2fa8:	ef 92       	push	r14
    2faa:	ff 92       	push	r15
    2fac:	0f 93       	push	r16
    2fae:	1f 93       	push	r17
    2fb0:	cf 93       	push	r28
    2fb2:	df 93       	push	r29
    2fb4:	cd b7       	in	r28, 0x3d	; 61
    2fb6:	de b7       	in	r29, 0x3e	; 62
    2fb8:	ca 1b       	sub	r28, r26
    2fba:	db 0b       	sbc	r29, r27
    2fbc:	0f b6       	in	r0, 0x3f	; 63
    2fbe:	f8 94       	cli
    2fc0:	de bf       	out	0x3e, r29	; 62
    2fc2:	0f be       	out	0x3f, r0	; 63
    2fc4:	cd bf       	out	0x3d, r28	; 61
    2fc6:	09 94       	ijmp

00002fc8 <__epilogue_restores__>:
    2fc8:	2a 88       	ldd	r2, Y+18	; 0x12
    2fca:	39 88       	ldd	r3, Y+17	; 0x11
    2fcc:	48 88       	ldd	r4, Y+16	; 0x10
    2fce:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fd0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fd2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fd4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fd6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fd8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fda:	b9 84       	ldd	r11, Y+9	; 0x09
    2fdc:	c8 84       	ldd	r12, Y+8	; 0x08
    2fde:	df 80       	ldd	r13, Y+7	; 0x07
    2fe0:	ee 80       	ldd	r14, Y+6	; 0x06
    2fe2:	fd 80       	ldd	r15, Y+5	; 0x05
    2fe4:	0c 81       	ldd	r16, Y+4	; 0x04
    2fe6:	1b 81       	ldd	r17, Y+3	; 0x03
    2fe8:	aa 81       	ldd	r26, Y+2	; 0x02
    2fea:	b9 81       	ldd	r27, Y+1	; 0x01
    2fec:	ce 0f       	add	r28, r30
    2fee:	d1 1d       	adc	r29, r1
    2ff0:	0f b6       	in	r0, 0x3f	; 63
    2ff2:	f8 94       	cli
    2ff4:	de bf       	out	0x3e, r29	; 62
    2ff6:	0f be       	out	0x3f, r0	; 63
    2ff8:	cd bf       	out	0x3d, r28	; 61
    2ffa:	ed 01       	movw	r28, r26
    2ffc:	08 95       	ret

00002ffe <_exit>:
    2ffe:	f8 94       	cli

00003000 <__stop_program>:
    3000:	ff cf       	rjmp	.-2      	; 0x3000 <__stop_program>
